
H755_ILI9341_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a40  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000cd8  08000ce0  00001ce0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000cd8  08000cd8  00001ce0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000cd8  08000cd8  00001ce0  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000cd8  08000ce0  00001ce0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000cd8  08000cd8  00001cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000cdc  08000cdc  00001cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  24000000  24000000  00001ce0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  24000000  08000ce0  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400002c  08000ce0  0000202c  2**0
                  ALLOC
 11 .ARM.attributes 0000002c  00000000  00000000  00001ce0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000037f4  00000000  00000000  00001d0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000833  00000000  00000000  00005500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000052d  00000000  00000000  00005d33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000170  00000000  00000000  00006260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000fd  00000000  00000000  000063d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ac9f  00000000  00000000  000064cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002f06  00000000  00000000  0003116c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f36ce  00000000  00000000  00034072  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00127740  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000002e4  00000000  00000000  00127784  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  00127a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000000 	.word	0x24000000
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08000cc0 	.word	0x08000cc0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000004 	.word	0x24000004
 80002d4:	08000cc0 	.word	0x08000cc0

080002d8 <LCD_command_write>:





void LCD_command_write(const uint8_t command){
 80002d8:	b508      	push	{r3, lr}
  //  p. 11
  GPIOE->ODR &= ~LCD_RS;
 80002da:	4a04      	ldr	r2, [pc, #16]	@ (80002ec <LCD_command_write+0x14>)
 80002dc:	6953      	ldr	r3, [r2, #20]
 80002de:	f023 0304 	bic.w	r3, r3, #4
 80002e2:	6153      	str	r3, [r2, #20]

  LCD_write(command);
 80002e4:	f000 f8e6 	bl	80004b4 <LCD_write>
}
 80002e8:	bd08      	pop	{r3, pc}
 80002ea:	bf00      	nop
 80002ec:	58021000 	.word	0x58021000

080002f0 <LCD_data_write>:

void LCD_data_write(const uint8_t data){
 80002f0:	b508      	push	{r3, lr}
  //  p. 11
	GPIOE->ODR |= LCD_RS;
 80002f2:	4a04      	ldr	r2, [pc, #16]	@ (8000304 <LCD_data_write+0x14>)
 80002f4:	6953      	ldr	r3, [r2, #20]
 80002f6:	f043 0304 	orr.w	r3, r3, #4
 80002fa:	6153      	str	r3, [r2, #20]

  LCD_write(data);
 80002fc:	f000 f8da 	bl	80004b4 <LCD_write>
}
 8000300:	bd08      	pop	{r3, pc}
 8000302:	bf00      	nop
 8000304:	58021000 	.word	0x58021000

08000308 <scr_area>:
void scr_area(uint16_t topcorn, uint16_t Area, uint16_t bottomcorn){
 8000308:	b570      	push	{r4, r5, r6, lr}
 800030a:	4606      	mov	r6, r0
 800030c:	460d      	mov	r5, r1
 800030e:	4614      	mov	r4, r2
    LCD_command_write(0x33);
 8000310:	2033      	movs	r0, #51	@ 0x33
 8000312:	f7ff ffe1 	bl	80002d8 <LCD_command_write>
    LCD_data_write(topcorn >> 8);
 8000316:	0a30      	lsrs	r0, r6, #8
 8000318:	f7ff ffea 	bl	80002f0 <LCD_data_write>
    LCD_data_write(topcorn & 0xFF);
 800031c:	b2f0      	uxtb	r0, r6
 800031e:	f7ff ffe7 	bl	80002f0 <LCD_data_write>
    LCD_data_write(Area >> 8);
 8000322:	0a28      	lsrs	r0, r5, #8
 8000324:	f7ff ffe4 	bl	80002f0 <LCD_data_write>
    LCD_data_write(Area & 0xFF);
 8000328:	b2e8      	uxtb	r0, r5
 800032a:	f7ff ffe1 	bl	80002f0 <LCD_data_write>
    LCD_data_write(bottomcorn >> 8);
 800032e:	0a20      	lsrs	r0, r4, #8
 8000330:	f7ff ffde 	bl	80002f0 <LCD_data_write>
    LCD_data_write(bottomcorn & 0xFF);
 8000334:	b2e0      	uxtb	r0, r4
 8000336:	f7ff ffdb 	bl	80002f0 <LCD_data_write>
}
 800033a:	bd70      	pop	{r4, r5, r6, pc}

0800033c <LCD_Scroll>:
void LCD_Scroll(const uint16_t scr_with){ //shifting the starting RAM addr negative
 800033c:	b510      	push	{r4, lr}
 800033e:	4604      	mov	r4, r0
	GPIOE->ODR &= ~LCD_CS;// Chip Select active
 8000340:	4a16      	ldr	r2, [pc, #88]	@ (800039c <LCD_Scroll+0x60>)
 8000342:	6953      	ldr	r3, [r2, #20]
 8000344:	f023 0310 	bic.w	r3, r3, #16
 8000348:	6153      	str	r3, [r2, #20]
	LCD_command_write(0x2a);  //code for column address p 110
 800034a:	202a      	movs	r0, #42	@ 0x2a
 800034c:	f7ff ffc4 	bl	80002d8 <LCD_command_write>
	LCD_data_write(0x0);  //upper 8 Bit sent to LCD       start addr
 8000350:	2000      	movs	r0, #0
 8000352:	f7ff ffcd 	bl	80002f0 <LCD_data_write>
	LCD_data_write(0x0);       //lower 8 Bit sent to LCD
 8000356:	2000      	movs	r0, #0
 8000358:	f7ff ffca 	bl	80002f0 <LCD_data_write>
	LCD_data_write(0x0);  //
 800035c:	2000      	movs	r0, #0
 800035e:	f7ff ffc7 	bl	80002f0 <LCD_data_write>
	LCD_data_write(0xF0);       // end addr
 8000362:	20f0      	movs	r0, #240	@ 0xf0
 8000364:	f7ff ffc4 	bl	80002f0 <LCD_data_write>
	LCD_command_write(0x2b);  //code for row address
 8000368:	202b      	movs	r0, #43	@ 0x2b
 800036a:	f7ff ffb5 	bl	80002d8 <LCD_command_write>
	LCD_data_write(0x0);  //
 800036e:	2000      	movs	r0, #0
 8000370:	f7ff ffbe 	bl	80002f0 <LCD_data_write>
	LCD_data_write(0x0);       //
 8000374:	2000      	movs	r0, #0
 8000376:	f7ff ffbb 	bl	80002f0 <LCD_data_write>
	LCD_data_write(0x1);  //
 800037a:	2001      	movs	r0, #1
 800037c:	f7ff ffb8 	bl	80002f0 <LCD_data_write>
	LCD_data_write(0x3F); //
 8000380:	203f      	movs	r0, #63	@ 0x3f
 8000382:	f7ff ffb5 	bl	80002f0 <LCD_data_write>
	LCD_command_write(0x37);  // p. 129                 317|318|319|0|1
 8000386:	2037      	movs	r0, #55	@ 0x37
 8000388:	f7ff ffa6 	bl	80002d8 <LCD_command_write>
	LCD_data_write(scr_with >> 8); //                   318|319| 0 |1|2
 800038c:	0a20      	lsrs	r0, r4, #8
 800038e:	f7ff ffaf 	bl	80002f0 <LCD_data_write>
	LCD_data_write(scr_with & 0xFF);//Start addr after shift-----^
 8000392:	b2e0      	uxtb	r0, r4
 8000394:	f7ff ffac 	bl	80002f0 <LCD_data_write>
}
 8000398:	bd10      	pop	{r4, pc}
 800039a:	bf00      	nop
 800039c:	58021000 	.word	0x58021000

080003a0 <Line>:
	LCD_data_write(color);

}


void Line(uint16_t x1, uint16_t y1, uint16_t y2, uint16_t color){
 80003a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80003a4:	4604      	mov	r4, r0
 80003a6:	4688      	mov	r8, r1
 80003a8:	4617      	mov	r7, r2
 80003aa:	461d      	mov	r5, r3
	const uint32_t pixels = (y2 - y1 + 1);
 80003ac:	1a56      	subs	r6, r2, r1
 80003ae:	3601      	adds	r6, #1
	GPIOE->ODR &= ~LCD_CS;// Chip Select active
 80003b0:	4a1b      	ldr	r2, [pc, #108]	@ (8000420 <Line+0x80>)
 80003b2:	6953      	ldr	r3, [r2, #20]
 80003b4:	f023 0310 	bic.w	r3, r3, #16
 80003b8:	6153      	str	r3, [r2, #20]
	//delay_cycles(1);
	//define area where pixels will be changed/written
	LCD_command_write(0x2a);  //code for column address p 110
 80003ba:	202a      	movs	r0, #42	@ 0x2a
 80003bc:	f7ff ff8c 	bl	80002d8 <LCD_command_write>
	LCD_data_write(y1 >> 8);  //upper 8 Bit sent to LCD
 80003c0:	ea4f 2018 	mov.w	r0, r8, lsr #8
 80003c4:	f7ff ff94 	bl	80002f0 <LCD_data_write>
	LCD_data_write(y1 & 0xFF);       //lower 8 Bit sent to LCD
 80003c8:	fa5f f088 	uxtb.w	r0, r8
 80003cc:	f7ff ff90 	bl	80002f0 <LCD_data_write>
	LCD_data_write(y2 >> 8);  // start addr
 80003d0:	0a38      	lsrs	r0, r7, #8
 80003d2:	f7ff ff8d 	bl	80002f0 <LCD_data_write>
	LCD_data_write(y2 & 0xFF);       // end addr
 80003d6:	b2f8      	uxtb	r0, r7
 80003d8:	f7ff ff8a 	bl	80002f0 <LCD_data_write>

	LCD_command_write(0x2b);  //code for row address
 80003dc:	202b      	movs	r0, #43	@ 0x2b
 80003de:	f7ff ff7b 	bl	80002d8 <LCD_command_write>
	LCD_data_write(x1 >> 8);  //
 80003e2:	0a27      	lsrs	r7, r4, #8
 80003e4:	4638      	mov	r0, r7
 80003e6:	f7ff ff83 	bl	80002f0 <LCD_data_write>
	LCD_data_write(x1 & 0xFF);       //
 80003ea:	b2e4      	uxtb	r4, r4
 80003ec:	4620      	mov	r0, r4
 80003ee:	f7ff ff7f 	bl	80002f0 <LCD_data_write>
	LCD_data_write(x1 >> 8);  //
 80003f2:	4638      	mov	r0, r7
 80003f4:	f7ff ff7c 	bl	80002f0 <LCD_data_write>
	LCD_data_write(x1 & 0xFF);       //
 80003f8:	4620      	mov	r0, r4
 80003fa:	f7ff ff79 	bl	80002f0 <LCD_data_write>

	LCD_command_write(0x2c);  // Memory Write
 80003fe:	202c      	movs	r0, #44	@ 0x2c
 8000400:	f7ff ff6a 	bl	80002d8 <LCD_command_write>
	for(int i = 0; i < pixels; i++){
 8000404:	2400      	movs	r4, #0
 8000406:	e006      	b.n	8000416 <Line+0x76>
		LCD_data_write(color >> 8);
 8000408:	0a28      	lsrs	r0, r5, #8
 800040a:	f7ff ff71 	bl	80002f0 <LCD_data_write>
		LCD_data_write(color & 0xFF);
 800040e:	b2e8      	uxtb	r0, r5
 8000410:	f7ff ff6e 	bl	80002f0 <LCD_data_write>
	for(int i = 0; i < pixels; i++){
 8000414:	3401      	adds	r4, #1
 8000416:	42b4      	cmp	r4, r6
 8000418:	d3f6      	bcc.n	8000408 <Line+0x68>

	}
}
 800041a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800041e:	bf00      	nop
 8000420:	58021000 	.word	0x58021000

08000424 <Rect>:

void Rect(uint16_t x1, uint16_t x2, uint16_t y1, uint16_t y2, uint16_t color){
 8000424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000428:	4607      	mov	r7, r0
 800042a:	460c      	mov	r4, r1
 800042c:	4691      	mov	r9, r2
 800042e:	4698      	mov	r8, r3
 8000430:	f8bd 5020 	ldrh.w	r5, [sp, #32]
	const uint32_t pixels = (x2 - x1 + 1) * (y2 - y1 + 1);
 8000434:	1a0b      	subs	r3, r1, r0
 8000436:	eba8 0602 	sub.w	r6, r8, r2
 800043a:	3601      	adds	r6, #1
 800043c:	fb03 6606 	mla	r6, r3, r6, r6
	GPIOE->ODR &= ~LCD_CS;// Chip Select active
 8000440:	4a1b      	ldr	r2, [pc, #108]	@ (80004b0 <Rect+0x8c>)
 8000442:	6953      	ldr	r3, [r2, #20]
 8000444:	f023 0310 	bic.w	r3, r3, #16
 8000448:	6153      	str	r3, [r2, #20]
	//define area where pixels will be changed/written
	LCD_command_write(0x2a);  //code for column address p 110
 800044a:	202a      	movs	r0, #42	@ 0x2a
 800044c:	f7ff ff44 	bl	80002d8 <LCD_command_write>
	LCD_data_write((y1 >> 8));  //upper 8 Bit sent to LCD
 8000450:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8000454:	f7ff ff4c 	bl	80002f0 <LCD_data_write>
	LCD_data_write((y1 & 0xFF));       //lower 8 Bit sent to LCD
 8000458:	fa5f f089 	uxtb.w	r0, r9
 800045c:	f7ff ff48 	bl	80002f0 <LCD_data_write>
	LCD_data_write((y2 >> 8));  // start addr
 8000460:	ea4f 2018 	mov.w	r0, r8, lsr #8
 8000464:	f7ff ff44 	bl	80002f0 <LCD_data_write>
	LCD_data_write((y2 & 0xFF));       // end addr
 8000468:	fa5f f088 	uxtb.w	r0, r8
 800046c:	f7ff ff40 	bl	80002f0 <LCD_data_write>

	LCD_command_write(0x2b);  //code for row address
 8000470:	202b      	movs	r0, #43	@ 0x2b
 8000472:	f7ff ff31 	bl	80002d8 <LCD_command_write>
	LCD_data_write(x1 >> 8);  //
 8000476:	0a38      	lsrs	r0, r7, #8
 8000478:	f7ff ff3a 	bl	80002f0 <LCD_data_write>
	LCD_data_write(x1 & 0xFF);       //
 800047c:	b2f8      	uxtb	r0, r7
 800047e:	f7ff ff37 	bl	80002f0 <LCD_data_write>
	LCD_data_write(x2 >> 8);  //
 8000482:	0a20      	lsrs	r0, r4, #8
 8000484:	f7ff ff34 	bl	80002f0 <LCD_data_write>
	LCD_data_write(x2 & 0xFF);       //
 8000488:	b2e0      	uxtb	r0, r4
 800048a:	f7ff ff31 	bl	80002f0 <LCD_data_write>

	LCD_command_write(0x2c);  // Memory Write
 800048e:	202c      	movs	r0, #44	@ 0x2c
 8000490:	f7ff ff22 	bl	80002d8 <LCD_command_write>
	for(int i = 0; i < pixels; i++){
 8000494:	2400      	movs	r4, #0
 8000496:	e006      	b.n	80004a6 <Rect+0x82>
		LCD_data_write(color >> 8);
 8000498:	0a28      	lsrs	r0, r5, #8
 800049a:	f7ff ff29 	bl	80002f0 <LCD_data_write>
		LCD_data_write(color & 0xFF);
 800049e:	b2e8      	uxtb	r0, r5
 80004a0:	f7ff ff26 	bl	80002f0 <LCD_data_write>
	for(int i = 0; i < pixels; i++){
 80004a4:	3401      	adds	r4, #1
 80004a6:	42b4      	cmp	r4, r6
 80004a8:	d3f6      	bcc.n	8000498 <Rect+0x74>
	}
}
 80004aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80004ae:	bf00      	nop
 80004b0:	58021000 	.word	0x58021000

080004b4 <LCD_write>:
#define LCD_RST  GPIO_ODR_OD3 //Shield Reset



 void LCD_write(const uint8_t data){ // inline cause less overhead maybe
	GPIOE->ODR &= ~LCD_WR; // WR = 0
 80004b4:	4b05      	ldr	r3, [pc, #20]	@ (80004cc <LCD_write+0x18>)
 80004b6:	695a      	ldr	r2, [r3, #20]
 80004b8:	f022 0220 	bic.w	r2, r2, #32
 80004bc:	615a      	str	r2, [r3, #20]
	// Function Pins                        RD|WR|RS|CS|RST
	//                                      A3|C0|C3|E4|C2
    //
    //

	GPIOD->ODR = data;
 80004be:	4a04      	ldr	r2, [pc, #16]	@ (80004d0 <LCD_write+0x1c>)
 80004c0:	6150      	str	r0, [r2, #20]
        GPIOA->BSRR = (clearMaskA << 16) | setMaskA;
    }
*/

   // delay_cycles(1); //necces for make TFT working
    GPIOE->ODR |= LCD_WR; // send data after (rising edge)
 80004c2:	695a      	ldr	r2, [r3, #20]
 80004c4:	f042 0220 	orr.w	r2, r2, #32
 80004c8:	615a      	str	r2, [r3, #20]
   // delay_cycles(1);
}
 80004ca:	4770      	bx	lr
 80004cc:	58021000 	.word	0x58021000
 80004d0:	58020c00 	.word	0x58020c00

080004d4 <LCD_Init>:





void LCD_Init(void){
 80004d4:	b510      	push	{r4, lr}
 	//Reset TFT
 	GPIOE->ODR |= LCD_RST; //active low
 80004d6:	4c26      	ldr	r4, [pc, #152]	@ (8000570 <LCD_Init+0x9c>)
 80004d8:	6963      	ldr	r3, [r4, #20]
 80004da:	f043 0308 	orr.w	r3, r3, #8
 80004de:	6163      	str	r3, [r4, #20]
 	delay(5);
 80004e0:	2005      	movs	r0, #5
 80004e2:	f000 f9d5 	bl	8000890 <delay>
 	GPIOE->ODR &= ~LCD_RST; //reset TFT
 80004e6:	6963      	ldr	r3, [r4, #20]
 80004e8:	f023 0308 	bic.w	r3, r3, #8
 80004ec:	6163      	str	r3, [r4, #20]
 	delay(15);
 80004ee:	200f      	movs	r0, #15
 80004f0:	f000 f9ce 	bl	8000890 <delay>
 	GPIOE->ODR |= LCD_RST; // turn off rst
 80004f4:	6963      	ldr	r3, [r4, #20]
 80004f6:	f043 0308 	orr.w	r3, r3, #8
 80004fa:	6163      	str	r3, [r4, #20]
 	delay(15);
 80004fc:	200f      	movs	r0, #15
 80004fe:	f000 f9c7 	bl	8000890 <delay>

 	//The below is just preparation for Write Cycle Seq
 	GPIOE->ODR |= LCD_CS; //Chip-Select Active Low Signal
 8000502:	6963      	ldr	r3, [r4, #20]
 8000504:	f043 0310 	orr.w	r3, r3, #16
 8000508:	6163      	str	r3, [r4, #20]
 	GPIOE->ODR |= LCD_WR;
 800050a:	6963      	ldr	r3, [r4, #20]
 800050c:	f043 0320 	orr.w	r3, r3, #32
 8000510:	6163      	str	r3, [r4, #20]
 	delay_u(2000);
 8000512:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000516:	f000 f9f7 	bl	8000908 <delay_u>
 	GPIOE->ODR |= LCD_RD;
 800051a:	6963      	ldr	r3, [r4, #20]
 800051c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000520:	6163      	str	r3, [r4, #20]
 	GPIOE->ODR &= ~LCD_CS;  //cs low to actv ears of controller
 8000522:	6963      	ldr	r3, [r4, #20]
 8000524:	f023 0310 	bic.w	r3, r3, #16
 8000528:	6163      	str	r3, [r4, #20]

 	LCD_command_write(0xC5);    //Test this Out | VCOM Control 1 : Colour Contrast Maybe
 800052a:	20c5      	movs	r0, #197	@ 0xc5
 800052c:	f7ff fed4 	bl	80002d8 <LCD_command_write>
 	LCD_data_write(0x54);       //VCOM H 1111111 0x7F
 8000530:	2054      	movs	r0, #84	@ 0x54
 8000532:	f7ff fedd 	bl	80002f0 <LCD_data_write>
 	LCD_data_write(0x00);       //VCOM L 0000000
 8000536:	2000      	movs	r0, #0
 8000538:	f7ff feda 	bl	80002f0 <LCD_data_write>

 	LCD_command_write(0x36);    //Memory Access Control | DataSheet Page 127
 800053c:	2036      	movs	r0, #54	@ 0x36
 800053e:	f7ff fecb 	bl	80002d8 <LCD_command_write>
 	///LCD_data_write(0x48);    //Adjust this value to get right color and starting point of x and y
 	LCD_data_write(0b100);  //
 8000542:	2004      	movs	r0, #4
 8000544:	f7ff fed4 	bl	80002f0 <LCD_data_write>
 	LCD_command_write(0x3A);    //COLMOD: Pixel Format Set  p. 134
 8000548:	203a      	movs	r0, #58	@ 0x3a
 800054a:	f7ff fec5 	bl	80002d8 <LCD_command_write>
 	LCD_data_write(0x55);       //16 Bit RGB and MCU
 800054e:	2055      	movs	r0, #85	@ 0x55
 8000550:	f7ff fece 	bl	80002f0 <LCD_data_write>
 	LCD_command_write(0x11);    //Sleep Out  p. 245
 8000554:	2011      	movs	r0, #17
 8000556:	f7ff febf 	bl	80002d8 <LCD_command_write>
 	delay(10);                  //wait at least 5ms after sleepout
 800055a:	200a      	movs	r0, #10
 800055c:	f000 f998 	bl	8000890 <delay>
 	LCD_command_write(0x29);    //Display on.
 8000560:	2029      	movs	r0, #41	@ 0x29
 8000562:	f7ff feb9 	bl	80002d8 <LCD_command_write>
 	LCD_command_write(0x2c);    //Memory Write | DataSheet Page 245
 8000566:	202c      	movs	r0, #44	@ 0x2c
 8000568:	f7ff feb6 	bl	80002d8 <LCD_command_write>
 //	LCD_command_write(0x51);    // display brightness
 	//LCD_data_write(0xFF);       // brightness = 50%

 }
 800056c:	bd10      	pop	{r4, pc}
 800056e:	bf00      	nop
 8000570:	58021000 	.word	0x58021000

08000574 <board_voltage>:





void board_voltage(void){ // call at very first
 8000574:	b082      	sub	sp, #8
		volatile int b;


		//Instruction on p.329
	    RCC->APB4ENR |= 0b10;        //SYSCFGEN bit set  en clk for hw in moment of clk mux changeing
 8000576:	4a11      	ldr	r2, [pc, #68]	@ (80005bc <board_voltage+0x48>)
 8000578:	f8d2 30f4 	ldr.w	r3, [r2, #244]	@ 0xf4
 800057c:	f043 0302 	orr.w	r3, r3, #2
 8000580:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
	  /*  a = PWR->CR3;             // save register in a; to change things step by step. wrong values cause register Lock
	    a = a & ~(0b11 << 1);     // LDO and SD Bits off
	    a = (a |= (0b1       |     // BYPASS bit to 1
	    		 (0b1 << 5) |     // 2,5V input for step down conv
				 (0b1 << 3)));     // slightly raise of Vcore -> more stable*/
	    PWR->CR3 = (PWR->CR3 &
 8000584:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000588:	68d3      	ldr	r3, [r2, #12]
	    			~(PWR_CR3_LDOEN))            |
					PWR_CR3_SMPSLEVEL_1          |
					PWR_CR3_SMPSEXTHP            |
					PWR_CR3_SMPSEN               |
 800058a:	f023 032f 	bic.w	r3, r3, #47	@ 0x2f
 800058e:	f043 032d 	orr.w	r3, r3, #45	@ 0x2d
	    PWR->CR3 = (PWR->CR3 &
 8000592:	60d3      	str	r3, [r2, #12]
					PWR_CR3_BYPASS;                 // neccesary for VOS0


	    //Instruction on p. 297
		PWR->D3CR |= (0b11 << 14);   //VOS1 Mode set
 8000594:	6993      	ldr	r3, [r2, #24]
 8000596:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800059a:	6193      	str	r3, [r2, #24]
		//while(1){a = ()
		SYSCFG->PWRCR |= 0b1;        //VOS0 Mode set (Boost Mode) BYPASS active neccesary
 800059c:	f5a2 3211 	sub.w	r2, r2, #148480	@ 0x24400
 80005a0:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80005a2:	f043 0301 	orr.w	r3, r3, #1
 80005a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
		while(1){b = (PWR->D3CR >> 13) & 0b1; if(b == 1){break;}}
 80005a8:	4b05      	ldr	r3, [pc, #20]	@ (80005c0 <board_voltage+0x4c>)
 80005aa:	699b      	ldr	r3, [r3, #24]
 80005ac:	f3c3 3340 	ubfx	r3, r3, #13, #1
 80005b0:	9301      	str	r3, [sp, #4]
 80005b2:	9b01      	ldr	r3, [sp, #4]
 80005b4:	2b01      	cmp	r3, #1
 80005b6:	d1f7      	bne.n	80005a8 <board_voltage+0x34>

}
 80005b8:	b002      	add	sp, #8
 80005ba:	4770      	bx	lr
 80005bc:	58024400 	.word	0x58024400
 80005c0:	58024800 	.word	0x58024800

080005c4 <board_oclk>:


void board_oclk(volatile int clksel){ // 0 HSI 440MHz  1 HSE 480MHz     call 2nd
 80005c4:	b084      	sub	sp, #16
 80005c6:	9001      	str	r0, [sp, #4]
	volatile int a;

	FLASH->ACR &= ~(0b1);  //Flash standard 7 wait cycles refere page 166 in RM -> 6 WS now
 80005c8:	4a5c      	ldr	r2, [pc, #368]	@ (800073c <board_oclk+0x178>)
 80005ca:	6813      	ldr	r3, [r2, #0]
 80005cc:	f023 0301 	bic.w	r3, r3, #1
 80005d0:	6013      	str	r3, [r2, #0]


	RCC->CR &= ~(0b1 << 24);         // turn PLL1 off
 80005d2:	4b5b      	ldr	r3, [pc, #364]	@ (8000740 <board_oclk+0x17c>)
 80005d4:	681a      	ldr	r2, [r3, #0]
 80005d6:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 80005da:	601a      	str	r2, [r3, #0]

	RCC->D2CCIP2R |= 0b1 << 8;
 80005dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80005de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80005e2:	655a      	str	r2, [r3, #84]	@ 0x54

	if(clksel == 1){
 80005e4:	9b01      	ldr	r3, [sp, #4]
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d04d      	beq.n	8000686 <board_oclk+0xc2>


	else{
	  //HSI selected by default (00)
		//clk input divider -> 16MHz input
		RCC->PLLCKSELR &= ~((0b1 << 9) | (0b1 << 17) | (0b1 << 25));    // PRE 32 -> 0 for DIVM 1,2,3
 80005ea:	4b55      	ldr	r3, [pc, #340]	@ (8000740 <board_oclk+0x17c>)
 80005ec:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80005ee:	4a55      	ldr	r2, [pc, #340]	@ (8000744 <board_oclk+0x180>)
 80005f0:	400a      	ands	r2, r1
 80005f2:	629a      	str	r2, [r3, #40]	@ 0x28
		RCC->PLLCKSELR |= (0b1 << 6) | (0b1 << 14) | (0b1 << 22); // PRE = 4 for DIVM 1,2,3  HSI auto set as PLL input
 80005f4:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80005f6:	4a54      	ldr	r2, [pc, #336]	@ (8000748 <board_oclk+0x184>)
 80005f8:	430a      	orrs	r2, r1
 80005fa:	629a      	str	r2, [r3, #40]	@ 0x28

		RCC->PLLCFGR |= (0b11 << 2) | //PLL input clk range 8 - 16
 80005fc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80005fe:	f640 42cc 	movw	r2, #3276	@ 0xccc
 8000602:	430a      	orrs	r2, r1
 8000604:	62da      	str	r2, [r3, #44]	@ 0x2c

		//Freq calculation   PLL1 = HSI/DIVM*(DIVN+(FRACN/2^13))/DIVP     p.436 RM

		//RCC->PLL1FRACR |= (0b1 << 15); //Frac = 4096 -> 456 ->460MHz clk   (2^13 -1 max)

		RCC->PLL1DIVR &= (0b1 << 31) | (0b1 << 23);  // all 0 without changing res Bits 31;23
 8000606:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000608:	4950      	ldr	r1, [pc, #320]	@ (800074c <board_oclk+0x188>)
 800060a:	400a      	ands	r2, r1
 800060c:	631a      	str	r2, [r3, #48]	@ 0x30
		RCC->PLL1DIVR |= ((0b110110)   | //DIVN = 54  -> 880MHz
 800060e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8000610:	4a4f      	ldr	r2, [pc, #316]	@ (8000750 <board_oclk+0x18c>)
 8000612:	4302      	orrs	r2, r0
 8000614:	631a      	str	r2, [r3, #48]	@ 0x30
						  (0b1 << 9)   | //DIVP = 2 -> 440MHz into CLK MUX
						  (0b11 << 16) | //DIVQ = 4 -> 220MHz
						  (0b11 << 24)); //DIVR = 4 -> 220MHz


		RCC->PLL2DIVR &= (0b1 << 31) | (0b1 << 23);  // all 0 without changing res Bits 31;23
 8000616:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000618:	400a      	ands	r2, r1
 800061a:	639a      	str	r2, [r3, #56]	@ 0x38
		RCC->PLL2DIVR |= ((0b111011)   | //DIVN = 60  -> 960MHz
 800061c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800061e:	484d      	ldr	r0, [pc, #308]	@ (8000754 <board_oclk+0x190>)
 8000620:	4302      	orrs	r2, r0
 8000622:	639a      	str	r2, [r3, #56]	@ 0x38
						 (0b11 << 24)); //DIVR = 4 -> 230MHz




		RCC->PLL3DIVR &= (0b1 << 31) | (0b1 << 23);  // all 0 without changing res Bits 31;23
 8000624:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000626:	400a      	ands	r2, r1
 8000628:	641a      	str	r2, [r3, #64]	@ 0x40
		RCC->PLL3DIVR |= ((0b111011)   | //DIVN = 60  -> 960MHz
 800062a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800062c:	4302      	orrs	r2, r0
 800062e:	641a      	str	r2, [r3, #64]	@ 0x40
						 (0b11 << 16) | //DIVQ = 4 -> 230MHz
						 (0b11 << 24)); //DIVR = 4 -> 230MHz



		RCC->CR |= (0b1 << 24);         // turn PLL1ON
 8000630:	681a      	ldr	r2, [r3, #0]
 8000632:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8000636:	601a      	str	r2, [r3, #0]

		while(1) // wait till Flag signaling PLL1 is on
		{a = (RCC->CR >> 25) & 0b1; if(a == 1){break;}}
 8000638:	4b41      	ldr	r3, [pc, #260]	@ (8000740 <board_oclk+0x17c>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f3c3 6340 	ubfx	r3, r3, #25, #1
 8000640:	9303      	str	r3, [sp, #12]
 8000642:	9b03      	ldr	r3, [sp, #12]
 8000644:	2b01      	cmp	r3, #1
 8000646:	d1f7      	bne.n	8000638 <board_oclk+0x74>


		RCC->D1CFGR = (RCC->D1CFGR & ~(0b1 << 11)) | 0b1001000; // HPRE /2 & D1PPRE /2
 8000648:	4b3d      	ldr	r3, [pc, #244]	@ (8000740 <board_oclk+0x17c>)
 800064a:	6999      	ldr	r1, [r3, #24]
 800064c:	4a42      	ldr	r2, [pc, #264]	@ (8000758 <board_oclk+0x194>)
 800064e:	400a      	ands	r2, r1
 8000650:	f042 0248 	orr.w	r2, r2, #72	@ 0x48
 8000654:	619a      	str	r2, [r3, #24]
		RCC->D2CFGR |= (0b10001 << 6); // D2PPRE & D2PPRE2 /2
 8000656:	69da      	ldr	r2, [r3, #28]
 8000658:	f442 6288 	orr.w	r2, r2, #1088	@ 0x440
 800065c:	61da      	str	r2, [r3, #28]
		RCC->D3CFGR |= (0b1 << 6); // D3PPRE /2
 800065e:	6a1a      	ldr	r2, [r3, #32]
 8000660:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000664:	621a      	str	r2, [r3, #32]

		RCC->CFGR |= 0b11;
 8000666:	691a      	ldr	r2, [r3, #16]
 8000668:	f042 0203 	orr.w	r2, r2, #3
 800066c:	611a      	str	r2, [r3, #16]
		while(1)
		{a = (RCC->CFGR >> 3) & 0b11; if(a == 3){break;}}  // wait till SWS == 0b11000 (PLL1 == input)
 800066e:	4b34      	ldr	r3, [pc, #208]	@ (8000740 <board_oclk+0x17c>)
 8000670:	691b      	ldr	r3, [r3, #16]
 8000672:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8000676:	9303      	str	r3, [sp, #12]
 8000678:	9b03      	ldr	r3, [sp, #12]
 800067a:	2b03      	cmp	r3, #3
 800067c:	d1f7      	bne.n	800066e <board_oclk+0xaa>

		a = 0;
 800067e:	2300      	movs	r3, #0
 8000680:	9303      	str	r3, [sp, #12]
	}

}
 8000682:	b004      	add	sp, #16
 8000684:	4770      	bx	lr
			RCC->CR |= 0b1 << 16;
 8000686:	4a2e      	ldr	r2, [pc, #184]	@ (8000740 <board_oclk+0x17c>)
 8000688:	6813      	ldr	r3, [r2, #0]
 800068a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800068e:	6013      	str	r3, [r2, #0]
			while(1){a = (RCC->CR >> 17) & 0b1; if(a == 0b1){break;}}
 8000690:	4b2b      	ldr	r3, [pc, #172]	@ (8000740 <board_oclk+0x17c>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8000698:	9303      	str	r3, [sp, #12]
 800069a:	9b03      	ldr	r3, [sp, #12]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d1f7      	bne.n	8000690 <board_oclk+0xcc>
			RCC->PLLCKSELR &= ~((0b1 << 9) | (0b1 << 17) | (0b1 << 25));    // PRE 32 -> 0 for DIVM 1,2,3
 80006a0:	4b27      	ldr	r3, [pc, #156]	@ (8000740 <board_oclk+0x17c>)
 80006a2:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80006a4:	4a27      	ldr	r2, [pc, #156]	@ (8000744 <board_oclk+0x180>)
 80006a6:	400a      	ands	r2, r1
 80006a8:	629a      	str	r2, [r3, #40]	@ 0x28
			RCC->PLLCKSELR |= (0b101 << 4) | (0b101 << 12) | (0b101 << 20) | 0b10; // PRE = 5 for DIVM 1,2,3  HSE sel as PLL input
 80006aa:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80006ac:	4a2b      	ldr	r2, [pc, #172]	@ (800075c <board_oclk+0x198>)
 80006ae:	430a      	orrs	r2, r1
 80006b0:	629a      	str	r2, [r3, #40]	@ 0x28
		    RCC->PLLCFGR |= (0b10 << 2) | //PLL input frq range = 4 - 8 MHz
 80006b2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80006b4:	f640 0288 	movw	r2, #2184	@ 0x888
 80006b8:	430a      	orrs	r2, r1
 80006ba:	62da      	str	r2, [r3, #44]	@ 0x2c
		    RCC->PLL1DIVR &= (0b1 << 31) | (0b1 << 23);  // all 0 without changing res Bits 31;23
 80006bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80006be:	4923      	ldr	r1, [pc, #140]	@ (800074c <board_oclk+0x188>)
 80006c0:	400a      	ands	r2, r1
 80006c2:	631a      	str	r2, [r3, #48]	@ 0x30
		    RCC->PLL1DIVR |= ((0b10111111)   | //DIVN = 54  -> 880MHz
 80006c4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80006c6:	4a26      	ldr	r2, [pc, #152]	@ (8000760 <board_oclk+0x19c>)
 80006c8:	4302      	orrs	r2, r0
 80006ca:	631a      	str	r2, [r3, #48]	@ 0x30
		    RCC->PLL2DIVR &= (0b1 << 31) | (0b1 << 23);  // all 0 without changing res Bits 31;23
 80006cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80006ce:	400a      	ands	r2, r1
 80006d0:	639a      	str	r2, [r3, #56]	@ 0x38
		    RCC->PLL2DIVR |= ((0b10111111)   | //DIVN = 60  -> 960MHz
 80006d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80006d4:	4823      	ldr	r0, [pc, #140]	@ (8000764 <board_oclk+0x1a0>)
 80006d6:	4302      	orrs	r2, r0
 80006d8:	639a      	str	r2, [r3, #56]	@ 0x38
			RCC->PLL3DIVR &= (0b1 << 31) | (0b1 << 23);  // all 0 without changing res Bits 31;23
 80006da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80006dc:	400a      	ands	r2, r1
 80006de:	641a      	str	r2, [r3, #64]	@ 0x40
		    RCC->PLL3DIVR |= ((0b10111111)   | //DIVN = 60  -> 960MHz
 80006e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80006e2:	4302      	orrs	r2, r0
 80006e4:	641a      	str	r2, [r3, #64]	@ 0x40
		    RCC->CR |= (0b1 << 24);         // turn PLL1ON
 80006e6:	681a      	ldr	r2, [r3, #0]
 80006e8:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80006ec:	601a      	str	r2, [r3, #0]
		    {a = (RCC->CR >> 25) & 0b1; if(a == 1){break;}}
 80006ee:	4b14      	ldr	r3, [pc, #80]	@ (8000740 <board_oclk+0x17c>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f3c3 6340 	ubfx	r3, r3, #25, #1
 80006f6:	9303      	str	r3, [sp, #12]
 80006f8:	9b03      	ldr	r3, [sp, #12]
 80006fa:	2b01      	cmp	r3, #1
 80006fc:	d1f7      	bne.n	80006ee <board_oclk+0x12a>
		    RCC->D1CFGR = (RCC->D1CFGR & ~(0b1 << 11)) | 0b1001000; // HPRE /2 & D1PPRE /2
 80006fe:	4b10      	ldr	r3, [pc, #64]	@ (8000740 <board_oclk+0x17c>)
 8000700:	6999      	ldr	r1, [r3, #24]
 8000702:	4a15      	ldr	r2, [pc, #84]	@ (8000758 <board_oclk+0x194>)
 8000704:	400a      	ands	r2, r1
 8000706:	f042 0248 	orr.w	r2, r2, #72	@ 0x48
 800070a:	619a      	str	r2, [r3, #24]
		    RCC->D2CFGR |= (0b10001 << 6); // D2PPRE & D2PPRE2 /2
 800070c:	69da      	ldr	r2, [r3, #28]
 800070e:	f442 6288 	orr.w	r2, r2, #1088	@ 0x440
 8000712:	61da      	str	r2, [r3, #28]
		    RCC->D3CFGR |= (0b1 << 6); // D3PPRE /2
 8000714:	6a1a      	ldr	r2, [r3, #32]
 8000716:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800071a:	621a      	str	r2, [r3, #32]
		    RCC->CFGR |= 0b11;  // set PLL1p as input frq for main clk
 800071c:	691a      	ldr	r2, [r3, #16]
 800071e:	f042 0203 	orr.w	r2, r2, #3
 8000722:	611a      	str	r2, [r3, #16]
		    {a = (RCC->CFGR >> 3) & 0b11; if(a == 3){break;}}  // wait till SWS == 0b11000 (PLL1 == input)
 8000724:	4b06      	ldr	r3, [pc, #24]	@ (8000740 <board_oclk+0x17c>)
 8000726:	691b      	ldr	r3, [r3, #16]
 8000728:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800072c:	9303      	str	r3, [sp, #12]
 800072e:	9b03      	ldr	r3, [sp, #12]
 8000730:	2b03      	cmp	r3, #3
 8000732:	d1f7      	bne.n	8000724 <board_oclk+0x160>
			a = 0;
 8000734:	2300      	movs	r3, #0
 8000736:	9303      	str	r3, [sp, #12]
 8000738:	e7a3      	b.n	8000682 <board_oclk+0xbe>
 800073a:	bf00      	nop
 800073c:	52002000 	.word	0x52002000
 8000740:	58024400 	.word	0x58024400
 8000744:	fdfdfdff 	.word	0xfdfdfdff
 8000748:	00404040 	.word	0x00404040
 800074c:	80800000 	.word	0x80800000
 8000750:	03030236 	.word	0x03030236
 8000754:	0303063b 	.word	0x0303063b
 8000758:	fffff7b7 	.word	0xfffff7b7
 800075c:	00505052 	.word	0x00505052
 8000760:	030302bf 	.word	0x030302bf
 8000764:	030306bf 	.word	0x030306bf

08000768 <board_start>:

// DATA Pins |0|1|2|3|4|5|6|7|     || G9|D15|G14|E13|E14|E11|A8|G12
// Function Pins                        RD|WR|RS|CS|RST
//                                      A3|C0|C3|B1|C2

void board_start(void){//    call 3rd
 8000768:	b410      	push	{r4}
	RCC->APB4ENR |= 0b10;        //SYSCFGEN bit set   also in board_voltage
 800076a:	4b38      	ldr	r3, [pc, #224]	@ (800084c <board_start+0xe4>)
 800076c:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8000770:	f042 0202 	orr.w	r2, r2, #2
 8000774:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
	RCC->AHB4ENR |= 0b111 << 2;	    //clk for Ports C,D,E act
 8000778:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800077c:	f042 021c 	orr.w	r2, r2, #28
 8000780:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 // define pin type
	GPIOC->MODER &= ~(0b11 << (2 * 13)); // 00 = Input C13 blue PB
 8000784:	4932      	ldr	r1, [pc, #200]	@ (8000850 <board_start+0xe8>)
 8000786:	680a      	ldr	r2, [r1, #0]
 8000788:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 800078c:	600a      	str	r2, [r1, #0]
	GPIOD->MODER &= 0x5555; // 0 - 7
 800078e:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8000792:	680a      	ldr	r2, [r1, #0]
 8000794:	f422 522a 	bic.w	r2, r2, #10880	@ 0x2a80
 8000798:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800079c:	0452      	lsls	r2, r2, #17
 800079e:	0c52      	lsrs	r2, r2, #17
 80007a0:	600a      	str	r2, [r1, #0]
	GPIOE->MODER &= (0x1550);    // 2 - 6
 80007a2:	4a2c      	ldr	r2, [pc, #176]	@ (8000854 <board_start+0xec>)
 80007a4:	6810      	ldr	r0, [r2, #0]
 80007a6:	f420 602a 	bic.w	r0, r0, #2720	@ 0xaa0
 80007aa:	f020 000f 	bic.w	r0, r0, #15
 80007ae:	04c0      	lsls	r0, r0, #19
 80007b0:	0cc0      	lsrs	r0, r0, #19
 80007b2:	6010      	str	r0, [r2, #0]

	//GPIOC->PUPDR |= 0b11 << (2 * 13);  // Pull up

	//define pin rising/falling edges precision/time
	GPIOD->OSPEEDR |= 0xFFFF;
 80007b4:	688c      	ldr	r4, [r1, #8]
 80007b6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80007ba:	4320      	orrs	r0, r4
 80007bc:	6088      	str	r0, [r1, #8]
	GPIOE->OSPEEDR |= 0x3FF0;
 80007be:	6890      	ldr	r0, [r2, #8]
 80007c0:	f643 71f0 	movw	r1, #16368	@ 0x3ff0
 80007c4:	4301      	orrs	r1, r0
 80007c6:	6091      	str	r1, [r2, #8]


	RCC->APB1LENR |= RCC_APB1LENR_TIM2EN;     // Timer clk on
 80007c8:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80007cc:	f042 0201 	orr.w	r2, r2, #1
 80007d0:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
	RCC->APB1LENR |= RCC_APB1LENR_TIM3EN;
 80007d4:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80007d8:	f042 0202 	orr.w	r2, r2, #2
 80007dc:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8

	RCC->AHB2ENR |= RCC_AHB2ENR_RNGEN;        // bus clk for random number generator on
 80007e0:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 80007e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80007e8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
	RNG->CR |= RNG_CR_RNGEN;                  // RNG on
 80007ec:	4a1a      	ldr	r2, [pc, #104]	@ (8000858 <board_start+0xf0>)
 80007ee:	6813      	ldr	r3, [r2, #0]
 80007f0:	f043 0304 	orr.w	r3, r3, #4
 80007f4:	6013      	str	r3, [r2, #0]



	SCB->CPACR |= ((0b11 << 20) | (0b11 << 22));  //activate FPU refere ARM Manual (ARM DUI 0646B ID082615) 4-56
 80007f6:	4a19      	ldr	r2, [pc, #100]	@ (800085c <board_start+0xf4>)
 80007f8:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80007fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000800:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

	// 5. EXTI-Konfiguration:
	    //    - Verbinde EXTI-Linie 13 mit Port C.
	    //      Dazu gehört EXTICR[3] (für EXTI12 bis EXTI15):
	    //      Für Pin 13: (13 % 4 = 1) – also Bits [7:4] in EXTICR[3] müssen auf 0x2 (Port C) gesetzt werden.
	    SYSCFG->EXTICR[3] &= ~(0xF << 4);  // Lösche die Bits für EXTI13
 8000804:	4b16      	ldr	r3, [pc, #88]	@ (8000860 <board_start+0xf8>)
 8000806:	695a      	ldr	r2, [r3, #20]
 8000808:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800080c:	615a      	str	r2, [r3, #20]
	    SYSCFG->EXTICR[3] |=  (0x2 << 4);    // Wähle Port C (0: A, 1: B, 2: C, …)
 800080e:	695a      	ldr	r2, [r3, #20]
 8000810:	f042 0220 	orr.w	r2, r2, #32
 8000814:	615a      	str	r2, [r3, #20]

	    // 6. Konfiguriere EXTI-Linie 13:
	    //    a) Interrupt unmasken: IMR1
	    EXTI->IMR1 |= (1 << 13);
 8000816:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800081a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800081e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8000822:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	    //    b) Trigger: Da der Button in der Regel aktiv niedrig ist, wählen wir den fallenden Flanken-Trigger.
	    EXTI->FTSR1 |= (1 << 13);
 8000826:	685a      	ldr	r2, [r3, #4]
 8000828:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800082c:	605a      	str	r2, [r3, #4]
	    //    c) (Optional) Rising Edge abschalten, falls nicht benötigt:
	    EXTI->RTSR1 &= ~(1 << 13);
 800082e:	681a      	ldr	r2, [r3, #0]
 8000830:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8000834:	601a      	str	r2, [r3, #0]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000836:	4b0b      	ldr	r3, [pc, #44]	@ (8000864 <board_start+0xfc>)
 8000838:	2220      	movs	r2, #32
 800083a:	f883 2328 	strb.w	r2, [r3, #808]	@ 0x328
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800083e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000842:	605a      	str	r2, [r3, #4]

	    // 7. NVIC: EXTI15_10-Interrupt aktivieren (da EXTI13 in diesem IRQ zusammengefasst ist)
	   NVIC_SetPriority(EXTI15_10_IRQn, 2);   // Priorität einstellen (2 = Beispielwert)
	   NVIC_EnableIRQ(EXTI15_10_IRQn);          // Interrupt freigeben

}
 8000844:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	58024400 	.word	0x58024400
 8000850:	58020800 	.word	0x58020800
 8000854:	58021000 	.word	0x58021000
 8000858:	48021800 	.word	0x48021800
 800085c:	e000ed00 	.word	0xe000ed00
 8000860:	58000400 	.word	0x58000400
 8000864:	e000e100 	.word	0xe000e100

08000868 <DWT_Init>:




void DWT_Init(void){   // call when u need
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // activate trace and debug
 8000868:	4a07      	ldr	r2, [pc, #28]	@ (8000888 <DWT_Init+0x20>)
 800086a:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
 800086e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000872:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
    DWT->CYCCNT = 0;                                // clk cycle cnt = 0
 8000876:	4b05      	ldr	r3, [pc, #20]	@ (800088c <DWT_Init+0x24>)
 8000878:	2200      	movs	r2, #0
 800087a:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;            // act DWT
 800087c:	681a      	ldr	r2, [r3, #0]
 800087e:	f042 0201 	orr.w	r2, r2, #1
 8000882:	601a      	str	r2, [r3, #0]
}
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	e000ed00 	.word	0xe000ed00
 800088c:	e0001000 	.word	0xe0001000

08000890 <delay>:





void delay(volatile unsigned int ___1){                //Timer for ms
 8000890:	b082      	sub	sp, #8
 8000892:	9001      	str	r0, [sp, #4]
	 RCC->APB1LENR |= RCC_APB1LENR_TIM2EN;             // en clk for TIM
 8000894:	4a12      	ldr	r2, [pc, #72]	@ (80008e0 <delay+0x50>)
 8000896:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 800089a:	f043 0301 	orr.w	r3, r3, #1
 800089e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
	 TIM2->DIER = TIM_DIER_UIE;                        //Update-Interrupt on
 80008a2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008a6:	2201      	movs	r2, #1
 80008a8:	60da      	str	r2, [r3, #12]
	 TIM2->CNT = 0;
 80008aa:	2100      	movs	r1, #0
 80008ac:	6259      	str	r1, [r3, #36]	@ 0x24
	 TIM2->PSC = 240000 - 1;                           // devides counting clock (~4,3MHz max) 0 means AHB clk
 80008ae:	480d      	ldr	r0, [pc, #52]	@ (80008e4 <delay+0x54>)
 80008b0:	6298      	str	r0, [r3, #40]	@ 0x28
	 TIM2->ARR = ___1;                                 // define how long is counted
 80008b2:	9801      	ldr	r0, [sp, #4]
 80008b4:	62d8      	str	r0, [r3, #44]	@ 0x2c
	 tim2Intrpt_g = 0;                                 // reset for "infinite" sleep loop
 80008b6:	480c      	ldr	r0, [pc, #48]	@ (80008e8 <delay+0x58>)
 80008b8:	7001      	strb	r1, [r0, #0]
	 TIM2->CR1 = TIM_CR1_CEN;                          // Timer start
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	4b0b      	ldr	r3, [pc, #44]	@ (80008ec <delay+0x5c>)
 80008be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80008c2:	601a      	str	r2, [r3, #0]

	 NVIC_EnableIRQ(TIM2_IRQn);                        // en Interrupt Handler

	 do {
		 __WFI();                                      // wait for interrupt -> sleep mode
 80008c4:	bf30      	wfi
	 } while (!tim2Intrpt_g);
 80008c6:	4b08      	ldr	r3, [pc, #32]	@ (80008e8 <delay+0x58>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d0fa      	beq.n	80008c4 <delay+0x34>

	 TIM2->CR1 &= ~TIM_CR1_CEN;                        //Timer off
 80008ce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008d2:	6813      	ldr	r3, [r2, #0]
 80008d4:	f023 0301 	bic.w	r3, r3, #1
 80008d8:	6013      	str	r3, [r2, #0]
}
 80008da:	b002      	add	sp, #8
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	58024400 	.word	0x58024400
 80008e4:	0003a97f 	.word	0x0003a97f
 80008e8:	24000028 	.word	0x24000028
 80008ec:	e000e100 	.word	0xe000e100

080008f0 <TIM2_IRQHandler>:


void TIM2_IRQHandler(void){                            // Interrupt (Handler) makes cpu work here
	 tim2Intrpt_g = 1;                                 // stop sleep loop
 80008f0:	4b04      	ldr	r3, [pc, #16]	@ (8000904 <TIM2_IRQHandler+0x14>)
 80008f2:	2201      	movs	r2, #1
 80008f4:	701a      	strb	r2, [r3, #0]
	 TIM2->SR &= ~TIM_SR_UIF;                          // Update Interrupt Flag = 0 -> stops generating interrupts
 80008f6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008fa:	6913      	ldr	r3, [r2, #16]
 80008fc:	f023 0301 	bic.w	r3, r3, #1
 8000900:	6113      	str	r3, [r2, #16]
}
 8000902:	4770      	bx	lr
 8000904:	24000028 	.word	0x24000028

08000908 <delay_u>:



void delay_u(volatile int ___2){          //Timer for TFT output freq
 8000908:	b082      	sub	sp, #8
 800090a:	9001      	str	r0, [sp, #4]
	 RCC->APB1LENR |= RCC_APB1LENR_TIM3EN;
 800090c:	4a11      	ldr	r2, [pc, #68]	@ (8000954 <delay_u+0x4c>)
 800090e:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 8000912:	f043 0302 	orr.w	r3, r3, #2
 8000916:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
	 TIM3->DIER = TIM_DIER_UIE;                         //Update-Interrupt on
 800091a:	4b0f      	ldr	r3, [pc, #60]	@ (8000958 <delay_u+0x50>)
 800091c:	2201      	movs	r2, #1
 800091e:	60da      	str	r2, [r3, #12]
	 TIM3->CNT = 0;
 8000920:	2100      	movs	r1, #0
 8000922:	6259      	str	r1, [r3, #36]	@ 0x24
	 TIM3->PSC = 57 - 1;
 8000924:	2038      	movs	r0, #56	@ 0x38
 8000926:	6298      	str	r0, [r3, #40]	@ 0x28
	 TIM3->ARR = ___2;                                  //1 = 231,82ns
 8000928:	9801      	ldr	r0, [sp, #4]
 800092a:	62d8      	str	r0, [r3, #44]	@ 0x2c
	 tim3Intrpt_g = 0;
 800092c:	480b      	ldr	r0, [pc, #44]	@ (800095c <delay_u+0x54>)
 800092e:	7001      	strb	r1, [r0, #0]
	 TIM3->CR1 = TIM_CR1_CEN;                          //Timer start
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	4b0b      	ldr	r3, [pc, #44]	@ (8000960 <delay_u+0x58>)
 8000934:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000938:	601a      	str	r2, [r3, #0]

	 NVIC_EnableIRQ(TIM3_IRQn);

 do {
	 __WFI();
 800093a:	bf30      	wfi
 } while (!tim3Intrpt_g);
 800093c:	4b07      	ldr	r3, [pc, #28]	@ (800095c <delay_u+0x54>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d0fa      	beq.n	800093a <delay_u+0x32>

 	 TIM3->CR1 &= ~TIM_CR1_CEN;                        //Timer aus
 8000944:	4a04      	ldr	r2, [pc, #16]	@ (8000958 <delay_u+0x50>)
 8000946:	6813      	ldr	r3, [r2, #0]
 8000948:	f023 0301 	bic.w	r3, r3, #1
 800094c:	6013      	str	r3, [r2, #0]
}
 800094e:	b002      	add	sp, #8
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	58024400 	.word	0x58024400
 8000958:	40000400 	.word	0x40000400
 800095c:	24000027 	.word	0x24000027
 8000960:	e000e100 	.word	0xe000e100

08000964 <TIM3_IRQHandler>:


void TIM3_IRQHandler(void){
	 tim3Intrpt_g = 1;
 8000964:	4b04      	ldr	r3, [pc, #16]	@ (8000978 <TIM3_IRQHandler+0x14>)
 8000966:	2201      	movs	r2, #1
 8000968:	701a      	strb	r2, [r3, #0]
	 TIM3->SR &= ~TIM_SR_UIF;
 800096a:	4a04      	ldr	r2, [pc, #16]	@ (800097c <TIM3_IRQHandler+0x18>)
 800096c:	6913      	ldr	r3, [r2, #16]
 800096e:	f023 0301 	bic.w	r3, r3, #1
 8000972:	6113      	str	r3, [r2, #16]
}
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	24000027 	.word	0x24000027
 800097c:	40000400 	.word	0x40000400

08000980 <RandomNG>:



int32_t RandomNG(void){
	//new random value after 216 periods of AHB clk if the output FIFO is empty RM p. 1412
	RNG->CR |= (0b1 << 2); //| (0b1 << 5) | ;        // en RNG intrpt funct ________________________________________________act once at start?
 8000980:	4b27      	ldr	r3, [pc, #156]	@ (8000a20 <RandomNG+0xa0>)
 8000982:	681a      	ldr	r2, [r3, #0]
 8000984:	f042 0204 	orr.w	r2, r2, #4
 8000988:	601a      	str	r2, [r3, #0]

	 NVIC_DisableIRQ(RNG_IRQn);*/
	//    if ((RNG->SR & RNG_SR_DRDY) != 0b0){  // if value is valid
	  //       rval = RNG->DR;                  // read value resets DRDY Flag
	   // }
	    if(((RNG->SR >> 6) & 0b1) == 1){   // invalid data detected
 800098a:	685b      	ldr	r3, [r3, #4]
 800098c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8000990:	d005      	beq.n	800099e <RandomNG+0x1e>
	    	SECS = ((RNG->SR >> 2) & 0b1);
 8000992:	4b23      	ldr	r3, [pc, #140]	@ (8000a20 <RandomNG+0xa0>)
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800099a:	4a22      	ldr	r2, [pc, #136]	@ (8000a24 <RandomNG+0xa4>)
 800099c:	7013      	strb	r3, [r2, #0]
	    }
	    if(((RNG->SR >> 5) & 0b1) == 1){   // invalid clk detected
 800099e:	4b20      	ldr	r3, [pc, #128]	@ (8000a20 <RandomNG+0xa0>)
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	f013 0f20 	tst.w	r3, #32
 80009a6:	d005      	beq.n	80009b4 <RandomNG+0x34>
	    	CECS = ((RNG->SR >> 1) & 0b1);
 80009a8:	4b1d      	ldr	r3, [pc, #116]	@ (8000a20 <RandomNG+0xa0>)
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80009b0:	4a1d      	ldr	r2, [pc, #116]	@ (8000a28 <RandomNG+0xa8>)
 80009b2:	7013      	strb	r3, [r2, #0]
	    }

	    while((RNG->SR & 0b1) == 0){
 80009b4:	4b1a      	ldr	r3, [pc, #104]	@ (8000a20 <RandomNG+0xa0>)
 80009b6:	685b      	ldr	r3, [r3, #4]
 80009b8:	f013 0f01 	tst.w	r3, #1
 80009bc:	d119      	bne.n	80009f2 <RandomNG+0x72>
		    if(((RNG->SR >> 6) & 0b1) == 1){   // invalid data detected
 80009be:	4b18      	ldr	r3, [pc, #96]	@ (8000a20 <RandomNG+0xa0>)
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80009c6:	d10c      	bne.n	80009e2 <RandomNG+0x62>
		    	SECS = ((RNG->SR >> 2) & 0b1);
		    	return 0;
		    }
		    if(((RNG->SR >> 5) & 0b1) == 1){   // invalid clk detected
 80009c8:	4b15      	ldr	r3, [pc, #84]	@ (8000a20 <RandomNG+0xa0>)
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	f013 0f20 	tst.w	r3, #32
 80009d0:	d0f0      	beq.n	80009b4 <RandomNG+0x34>
		    	CECS = ((RNG->SR >> 1) & 0b1);
 80009d2:	4b13      	ldr	r3, [pc, #76]	@ (8000a20 <RandomNG+0xa0>)
 80009d4:	685b      	ldr	r3, [r3, #4]
 80009d6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80009da:	4a13      	ldr	r2, [pc, #76]	@ (8000a28 <RandomNG+0xa8>)
 80009dc:	7013      	strb	r3, [r2, #0]
		    	return 0;
 80009de:	2000      	movs	r0, #0
 80009e0:	4770      	bx	lr
		    	SECS = ((RNG->SR >> 2) & 0b1);
 80009e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000a20 <RandomNG+0xa0>)
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80009ea:	4a0e      	ldr	r2, [pc, #56]	@ (8000a24 <RandomNG+0xa4>)
 80009ec:	7013      	strb	r3, [r2, #0]
		    	return 0;
 80009ee:	2000      	movs	r0, #0
 80009f0:	4770      	bx	lr
		    }

	    }

	    rval = RNG->DR;                  // read value resets DRDY Flag
 80009f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000a20 <RandomNG+0xa0>)
 80009f4:	689a      	ldr	r2, [r3, #8]
 80009f6:	4b0d      	ldr	r3, [pc, #52]	@ (8000a2c <RandomNG+0xac>)
 80009f8:	601a      	str	r2, [r3, #0]

	 if((SECS == 0b0) && (CECS == 0b0) && (rval != 0)){
 80009fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000a24 <RandomNG+0xa4>)
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	b92b      	cbnz	r3, 8000a0c <RandomNG+0x8c>
 8000a00:	4b09      	ldr	r3, [pc, #36]	@ (8000a28 <RandomNG+0xa8>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	b913      	cbnz	r3, 8000a0c <RandomNG+0x8c>
 8000a06:	4b09      	ldr	r3, [pc, #36]	@ (8000a2c <RandomNG+0xac>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	b92b      	cbnz	r3, 8000a18 <RandomNG+0x98>
		 return rval;

	 }else{
		 RNG->CR &= ~RNG_CR_RNGEN;
 8000a0c:	4a04      	ldr	r2, [pc, #16]	@ (8000a20 <RandomNG+0xa0>)
 8000a0e:	6813      	ldr	r3, [r2, #0]
 8000a10:	f023 0304 	bic.w	r3, r3, #4
 8000a14:	6013      	str	r3, [r2, #0]
	 }
}
 8000a16:	4770      	bx	lr
		 return rval;
 8000a18:	4b04      	ldr	r3, [pc, #16]	@ (8000a2c <RandomNG+0xac>)
 8000a1a:	6818      	ldr	r0, [r3, #0]
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	48021800 	.word	0x48021800
 8000a24:	24000025 	.word	0x24000025
 8000a28:	24000024 	.word	0x24000024
 8000a2c:	24000020 	.word	0x24000020

08000a30 <HASH_RNG_IRQHandler>:



void RNG_IRQHandler(void){
	   rngIntrpt_g = 1;                // stop WFI loop
 8000a30:	4b05      	ldr	r3, [pc, #20]	@ (8000a48 <HASH_RNG_IRQHandler+0x18>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	701a      	strb	r2, [r3, #0]
	   rval = RNG->DR;                  // read value resets DRDY Flag
 8000a36:	4b05      	ldr	r3, [pc, #20]	@ (8000a4c <HASH_RNG_IRQHandler+0x1c>)
 8000a38:	6899      	ldr	r1, [r3, #8]
 8000a3a:	4a05      	ldr	r2, [pc, #20]	@ (8000a50 <HASH_RNG_IRQHandler+0x20>)
 8000a3c:	6011      	str	r1, [r2, #0]
	   RNG->CR &= ~(0b11 << 2);      // turn off RNG only option to reset RNG itrp Flags
 8000a3e:	681a      	ldr	r2, [r3, #0]
 8000a40:	f022 020c 	bic.w	r2, r2, #12
 8000a44:	601a      	str	r2, [r3, #0]
}
 8000a46:	4770      	bx	lr
 8000a48:	24000026 	.word	0x24000026
 8000a4c:	48021800 	.word	0x48021800
 8000a50:	24000020 	.word	0x24000020

08000a54 <hwswflpy>:




uint8_t hwswflpy(void){
	uint8_t ue = pc13 / 4;   // can't be higher than 5
 8000a54:	4b03      	ldr	r3, [pc, #12]	@ (8000a64 <hwswflpy+0x10>)
 8000a56:	6818      	ldr	r0, [r3, #0]
	pc13 = 0;
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
	return ue;

}
 8000a5c:	f3c0 0087 	ubfx	r0, r0, #2, #8
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	2400001c 	.word	0x2400001c

08000a68 <EXTI15_10_IRQHandler>:

// Interrupt-Handler für EXTI-Linien 15 bis 10 (enthält auch EXTI13)
void EXTI15_10_IRQHandler(void)
{
    // Überprüfen, ob EXTI-Linie 13 den Interrupt ausgelöst hat
    if (EXTI->PR1 & (1 << 13))
 8000a68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a70:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8000a74:	d00b      	beq.n	8000a8e <EXTI15_10_IRQHandler+0x26>
    {
        // Interrupt-Pending-Bit löschen (durch Setzen auf 1)
        EXTI->PR1 |= (1 << 13);
 8000a76:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000a7a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8000a7e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000a82:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

        pc13 = pc13 + 200;
 8000a86:	4a02      	ldr	r2, [pc, #8]	@ (8000a90 <EXTI15_10_IRQHandler+0x28>)
 8000a88:	6813      	ldr	r3, [r2, #0]
 8000a8a:	33c8      	adds	r3, #200	@ 0xc8
 8000a8c:	6013      	str	r3, [r2, #0]
    }
}
 8000a8e:	4770      	bx	lr
 8000a90:	2400001c 	.word	0x2400001c

08000a94 <tuberand>:





gappos tuberand(void){  // call RNG to work;    create 2 rand vals with def space inbetw
 8000a94:	b500      	push	{lr}
 8000a96:	b083      	sub	sp, #12
//min !must! be in range of LCD hight = 0 to (240 - 1)
                                           //
	uint32_t val = RandomNG();            //                                                                ____________________________________
 8000a98:	f7ff ff72 	bl	8000980 <RandomNG>
    //                  max    min + 1     //                                                                \                 /                |
	uint8_t vall = (val % (LCD_hight - tubespace + 1));   // shrink val to LCD writeable space  vall % 190 ->  (2^32 - 1) - {[(2^32 - 1) / 190] - residual of} * 190  = (0,...,239)
 8000a9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad8 <tuberand+0x44>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	f1c3 02f0 	rsb	r2, r3, #240	@ 0xf0
 8000aa4:	fbb0 f1f2 	udiv	r1, r0, r2
 8000aa8:	fb02 0011 	mls	r0, r2, r1, r0
 8000aac:	b2c0      	uxtb	r0, r0
	uint8_t valh = vall + tubespace;
 8000aae:	4403      	add	r3, r0


	gappos result;               // result has same type as gappos
	    result.gaplow = vall;    // save vall in gaplow var of struct "result"
 8000ab0:	f88d 0000 	strb.w	r0, [sp]
	    result.gaphigh = valh;   // save valh in gaphigh var of struct "result"
 8000ab4:	f88d 3001 	strb.w	r3, [sp, #1]

	    return result;           // return struct "result" -> needs to be saved in struct "gappos" or other struct of same type as gappos
 8000ab8:	f8bd 3000 	ldrh.w	r3, [sp]
 8000abc:	f8ad 3004 	strh.w	r3, [sp, #4]
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000ac6:	f363 0007 	bfi	r0, r3, #0, #8
 8000aca:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8000ace:	f363 200f 	bfi	r0, r3, #8, #8


}
 8000ad2:	b003      	add	sp, #12
 8000ad4:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ad8:	2400002a 	.word	0x2400002a

08000adc <flappy>:

	return ypos1;
}


uint8_t flappy(void){
 8000adc:	b508      	push	{r3, lr}

	return hwswflpy();
 8000ade:	f7ff ffb9 	bl	8000a54 <hwswflpy>
}
 8000ae2:	bd08      	pop	{r3, pc}

08000ae4 <bird>:

uint8_t bird(void){
	//program velocity

return 1;
}
 8000ae4:	2001      	movs	r0, #1
 8000ae6:	4770      	bx	lr

08000ae8 <flappy_pos>:
uint8_t flappy_pos(uint16_t xpos1, uint8_t ypos1){
 8000ae8:	b570      	push	{r4, r5, r6, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	4606      	mov	r6, r0
 8000aee:	460d      	mov	r5, r1
	ypos1 = (ypos1 - flappy());
 8000af0:	f7ff fff4 	bl	8000adc <flappy>
 8000af4:	1a2d      	subs	r5, r5, r0
 8000af6:	b2ed      	uxtb	r5, r5
	ypos1 = (ypos1 + bird());
 8000af8:	f7ff fff4 	bl	8000ae4 <bird>
 8000afc:	1944      	adds	r4, r0, r5
 8000afe:	b2e4      	uxtb	r4, r4
	if(xpos1 > (LCD_with - xposofst)){
 8000b00:	4b0d      	ldr	r3, [pc, #52]	@ (8000b38 <flappy_pos+0x50>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	f240 123f 	movw	r2, #319	@ 0x13f
 8000b08:	1ad2      	subs	r2, r2, r3
 8000b0a:	4296      	cmp	r6, r2
 8000b0c:	dd10      	ble.n	8000b30 <flappy_pos+0x48>
		xpos1 = xpos1 + xposofst - LCD_with ;
 8000b0e:	1998      	adds	r0, r3, r6
 8000b10:	b280      	uxth	r0, r0
 8000b12:	f2a0 103f 	subw	r0, r0, #319	@ 0x13f
 8000b16:	b280      	uxth	r0, r0
	int16_t xpos2 = xpos1 + 3;
 8000b18:	1cc1      	adds	r1, r0, #3
	Rect(xpos1,xpos2,ypos1,ypos1 + 3,WHITE);
 8000b1a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000b1e:	9300      	str	r3, [sp, #0]
 8000b20:	1ce3      	adds	r3, r4, #3
 8000b22:	4622      	mov	r2, r4
 8000b24:	b289      	uxth	r1, r1
 8000b26:	f7ff fc7d 	bl	8000424 <Rect>
}
 8000b2a:	4620      	mov	r0, r4
 8000b2c:	b002      	add	sp, #8
 8000b2e:	bd70      	pop	{r4, r5, r6, pc}
		xpos1 = xpos1 + xposofst;
 8000b30:	1998      	adds	r0, r3, r6
 8000b32:	b280      	uxth	r0, r0
 8000b34:	e7f0      	b.n	8000b18 <flappy_pos+0x30>
 8000b36:	bf00      	nop
 8000b38:	24000029 	.word	0x24000029

08000b3c <main>:




int main() {
 8000b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	2500      	movs	r5, #0
    DWT_Init();
 8000b42:	f7ff fe91 	bl	8000868 <DWT_Init>
    board_voltage();
 8000b46:	f7ff fd15 	bl	8000574 <board_voltage>
	board_oclk(1);
 8000b4a:	2001      	movs	r0, #1
 8000b4c:	f7ff fd3a 	bl	80005c4 <board_oclk>
	board_start();
 8000b50:	f7ff fe0a 	bl	8000768 <board_start>
    LCD_Init();
 8000b54:	f7ff fcbe 	bl	80004d4 <LCD_Init>
    delay(1000);
 8000b58:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b5c:	f7ff fe98 	bl	8000890 <delay>
    tubespace = 100;
 8000b60:	4b2e      	ldr	r3, [pc, #184]	@ (8000c1c <main+0xe0>)
 8000b62:	2264      	movs	r2, #100	@ 0x64
 8000b64:	701a      	strb	r2, [r3, #0]
    xposofst = 59;
 8000b66:	4b2e      	ldr	r3, [pc, #184]	@ (8000c20 <main+0xe4>)
 8000b68:	223b      	movs	r2, #59	@ 0x3b
 8000b6a:	701a      	strb	r2, [r3, #0]
    uint8_t flpyh = 119;
    scr_area(0b1,0x13F,0);      //def first line as dummy to keep screen scrollable without artifcts
 8000b6c:	462a      	mov	r2, r5
 8000b6e:	f240 113f 	movw	r1, #319	@ 0x13f
 8000b72:	2001      	movs	r0, #1
 8000b74:	f7ff fbc8 	bl	8000308 <scr_area>
    Line(0,0,LCD_hight,GREEN);
 8000b78:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000b7c:	22ef      	movs	r2, #239	@ 0xef
 8000b7e:	4629      	mov	r1, r5
 8000b80:	4628      	mov	r0, r5
 8000b82:	f7ff fc0d 	bl	80003a0 <Line>
    uint8_t flpyh = 119;
 8000b86:	2777      	movs	r7, #119	@ 0x77
    uint16_t tbcoun;
	for(;;){
			for(int i = 1;i < LCD_with + 1/*+ 1*/; i++){//
 8000b88:	2401      	movs	r4, #1
 8000b8a:	f5b4 7fa0 	cmp.w	r4, #320	@ 0x140
 8000b8e:	dafb      	bge.n	8000b88 <main+0x4c>
				Line(i,0,LCD_hight,BLACK);
 8000b90:	b2a6      	uxth	r6, r4
 8000b92:	2300      	movs	r3, #0
 8000b94:	22ef      	movs	r2, #239	@ 0xef
 8000b96:	4619      	mov	r1, r3
 8000b98:	4630      	mov	r0, r6
 8000b9a:	f7ff fc01 	bl	80003a0 <Line>
				flpyh = flappy_pos(i, flpyh);
 8000b9e:	4639      	mov	r1, r7
 8000ba0:	4630      	mov	r0, r6
 8000ba2:	f7ff ffa1 	bl	8000ae8 <flappy_pos>
 8000ba6:	4607      	mov	r7, r0
				LCD_Scroll(i);
 8000ba8:	4630      	mov	r0, r6
 8000baa:	f7ff fbc7 	bl	800033c <LCD_Scroll>
				delay_u(7500);
 8000bae:	f641 504c 	movw	r0, #7500	@ 0x1d4c
 8000bb2:	f7ff fea9 	bl	8000908 <delay_u>
				delay_u(7500);
 8000bb6:	f641 504c 	movw	r0, #7500	@ 0x1d4c
 8000bba:	f7ff fea5 	bl	8000908 <delay_u>
				tbcoun++;
 8000bbe:	3501      	adds	r5, #1
 8000bc0:	b2ad      	uxth	r5, r5
				if(tbcoun == 80){ //&& (i < 320)){
 8000bc2:	2d50      	cmp	r5, #80	@ 0x50
 8000bc4:	d005      	beq.n	8000bd2 <main+0x96>

					Line(i,gappos.gaphigh,239, 204 * i);//
					tbcoun = 0;
				}

				if(i == 319){i = 0; if(tubespace > 50){tubespace--;}}
 8000bc6:	f240 133f 	movw	r3, #319	@ 0x13f
 8000bca:	429c      	cmp	r4, r3
 8000bcc:	d01b      	beq.n	8000c06 <main+0xca>
			for(int i = 1;i < LCD_with + 1/*+ 1*/; i++){//
 8000bce:	3401      	adds	r4, #1
 8000bd0:	e7db      	b.n	8000b8a <main+0x4e>
					gappos gappos = tuberand();
 8000bd2:	f7ff ff5f 	bl	8000a94 <tuberand>
 8000bd6:	f8ad 0004 	strh.w	r0, [sp, #4]
					Line(i,0,gappos.gaplow, 204 * i);//
 8000bda:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 8000bde:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8000be2:	00ad      	lsls	r5, r5, #2
 8000be4:	b2ad      	uxth	r5, r5
 8000be6:	462b      	mov	r3, r5
 8000be8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8000bec:	2100      	movs	r1, #0
 8000bee:	4630      	mov	r0, r6
 8000bf0:	f7ff fbd6 	bl	80003a0 <Line>
					Line(i,gappos.gaphigh,239, 204 * i);//
 8000bf4:	462b      	mov	r3, r5
 8000bf6:	22ef      	movs	r2, #239	@ 0xef
 8000bf8:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8000bfc:	4630      	mov	r0, r6
 8000bfe:	f7ff fbcf 	bl	80003a0 <Line>
					tbcoun = 0;
 8000c02:	2500      	movs	r5, #0
 8000c04:	e7df      	b.n	8000bc6 <main+0x8a>
				if(i == 319){i = 0; if(tubespace > 50){tubespace--;}}
 8000c06:	4b05      	ldr	r3, [pc, #20]	@ (8000c1c <main+0xe0>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	2b32      	cmp	r3, #50	@ 0x32
 8000c0c:	d904      	bls.n	8000c18 <main+0xdc>
 8000c0e:	3b01      	subs	r3, #1
 8000c10:	4a02      	ldr	r2, [pc, #8]	@ (8000c1c <main+0xe0>)
 8000c12:	7013      	strb	r3, [r2, #0]
 8000c14:	2400      	movs	r4, #0
 8000c16:	e7da      	b.n	8000bce <main+0x92>
 8000c18:	2400      	movs	r4, #0
 8000c1a:	e7d8      	b.n	8000bce <main+0x92>
 8000c1c:	2400002a 	.word	0x2400002a
 8000c20:	24000029 	.word	0x24000029

08000c24 <Reset_Handler>:
*/

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:   ldr   r0, =_estack
 8000c24:	480d      	ldr	r0, [pc, #52]	@ (8000c5c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c26:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c28:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c2c:	480c      	ldr	r0, [pc, #48]	@ (8000c60 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c2e:	490d      	ldr	r1, [pc, #52]	@ (8000c64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c30:	4a0d      	ldr	r2, [pc, #52]	@ (8000c68 <LoopForever+0xe>)
  movs r3, #0
 8000c32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c34:	e002      	b.n	8000c3c <LoopCopyDataInit>

08000c36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c3a:	3304      	adds	r3, #4

08000c3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c40:	d3f9      	bcc.n	8000c36 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c42:	4a0a      	ldr	r2, [pc, #40]	@ (8000c6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c44:	4c0a      	ldr	r4, [pc, #40]	@ (8000c70 <LoopForever+0x16>)
  movs r3, #0
 8000c46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c48:	e001      	b.n	8000c4e <LoopFillZerobss>

08000c4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c4c:	3204      	adds	r2, #4

08000c4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c50:	d3fb      	bcc.n	8000c4a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c52:	f000 f811 	bl	8000c78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c56:	f7ff ff71 	bl	8000b3c <main>

08000c5a <LoopForever>:

LoopForever:
  b LoopForever
 8000c5a:	e7fe      	b.n	8000c5a <LoopForever>
Reset_Handler:   ldr   r0, =_estack
 8000c5c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000c60:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000c64:	24000000 	.word	0x24000000
  ldr r2, =_sidata
 8000c68:	08000ce0 	.word	0x08000ce0
  ldr r2, =_sbss
 8000c6c:	24000000 	.word	0x24000000
  ldr r4, =_ebss
 8000c70:	2400002c 	.word	0x2400002c

08000c74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c74:	e7fe      	b.n	8000c74 <ADC1_2_IRQHandler>
	...

08000c78 <__libc_init_array>:
 8000c78:	b570      	push	{r4, r5, r6, lr}
 8000c7a:	4d0d      	ldr	r5, [pc, #52]	@ (8000cb0 <__libc_init_array+0x38>)
 8000c7c:	4c0d      	ldr	r4, [pc, #52]	@ (8000cb4 <__libc_init_array+0x3c>)
 8000c7e:	1b64      	subs	r4, r4, r5
 8000c80:	10a4      	asrs	r4, r4, #2
 8000c82:	2600      	movs	r6, #0
 8000c84:	42a6      	cmp	r6, r4
 8000c86:	d109      	bne.n	8000c9c <__libc_init_array+0x24>
 8000c88:	4d0b      	ldr	r5, [pc, #44]	@ (8000cb8 <__libc_init_array+0x40>)
 8000c8a:	4c0c      	ldr	r4, [pc, #48]	@ (8000cbc <__libc_init_array+0x44>)
 8000c8c:	f000 f818 	bl	8000cc0 <_init>
 8000c90:	1b64      	subs	r4, r4, r5
 8000c92:	10a4      	asrs	r4, r4, #2
 8000c94:	2600      	movs	r6, #0
 8000c96:	42a6      	cmp	r6, r4
 8000c98:	d105      	bne.n	8000ca6 <__libc_init_array+0x2e>
 8000c9a:	bd70      	pop	{r4, r5, r6, pc}
 8000c9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ca0:	4798      	blx	r3
 8000ca2:	3601      	adds	r6, #1
 8000ca4:	e7ee      	b.n	8000c84 <__libc_init_array+0xc>
 8000ca6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000caa:	4798      	blx	r3
 8000cac:	3601      	adds	r6, #1
 8000cae:	e7f2      	b.n	8000c96 <__libc_init_array+0x1e>
 8000cb0:	08000cd8 	.word	0x08000cd8
 8000cb4:	08000cd8 	.word	0x08000cd8
 8000cb8:	08000cd8 	.word	0x08000cd8
 8000cbc:	08000cdc 	.word	0x08000cdc

08000cc0 <_init>:
 8000cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cc2:	bf00      	nop
 8000cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cc6:	bc08      	pop	{r3}
 8000cc8:	469e      	mov	lr, r3
 8000cca:	4770      	bx	lr

08000ccc <_fini>:
 8000ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cce:	bf00      	nop
 8000cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cd2:	bc08      	pop	{r3}
 8000cd4:	469e      	mov	lr, r3
 8000cd6:	4770      	bx	lr
