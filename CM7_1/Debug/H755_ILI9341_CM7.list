
H755_ILI9341_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000dec  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08001084  08001084  00002084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001090  08001090  00003004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001090  08001090  00003004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001090  08001090  00003004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001090  08001090  00002090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001094  08001094  00002094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  24000000  08001098  00003000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  24000004  0800109c  00003004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000034  0800109c  00003034  2**0
                  ALLOC
 11 .ARM.attributes 0000002c  00000000  00000000  00003004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000034b6  00000000  00000000  00003030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000887  00000000  00000000  000064e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 000006fd  00000000  00000000  00006d6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000180  00000000  00000000  00007470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000118  00000000  00000000  000075f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029732  00000000  00000000  00007708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003229  00000000  00000000  00030e3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f375c  00000000  00000000  00034063  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001277bf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000354  00000000  00000000  00127804  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  00127b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000004 	.word	0x24000004
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800106c 	.word	0x0800106c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000008 	.word	0x24000008
 80002d4:	0800106c 	.word	0x0800106c

080002d8 <LCD_command>:





void LCD_command(const uint8_t command){
 80002d8:	b508      	push	{r3, lr}
  //  p. 11
  GPIOE->ODR &= ~LCD_RS;
 80002da:	4a04      	ldr	r2, [pc, #16]	@ (80002ec <LCD_command+0x14>)
 80002dc:	6953      	ldr	r3, [r2, #20]
 80002de:	f023 0304 	bic.w	r3, r3, #4
 80002e2:	6153      	str	r3, [r2, #20]

  LCD_write(command);
 80002e4:	f000 f8e6 	bl	80004b4 <LCD_write>
}
 80002e8:	bd08      	pop	{r3, pc}
 80002ea:	bf00      	nop
 80002ec:	58021000 	.word	0x58021000

080002f0 <LCD_dataw>:

void LCD_dataw(const uint8_t data){
 80002f0:	b508      	push	{r3, lr}
  //  p. 11
	GPIOE->ODR |= LCD_RS;
 80002f2:	4a04      	ldr	r2, [pc, #16]	@ (8000304 <LCD_dataw+0x14>)
 80002f4:	6953      	ldr	r3, [r2, #20]
 80002f6:	f043 0304 	orr.w	r3, r3, #4
 80002fa:	6153      	str	r3, [r2, #20]

  LCD_write(data);
 80002fc:	f000 f8da 	bl	80004b4 <LCD_write>
}
 8000300:	bd08      	pop	{r3, pc}
 8000302:	bf00      	nop
 8000304:	58021000 	.word	0x58021000

08000308 <scr_area>:
void scr_area(uint16_t topcorn, uint16_t Area, uint16_t bottomcorn){
 8000308:	b570      	push	{r4, r5, r6, lr}
 800030a:	4606      	mov	r6, r0
 800030c:	460d      	mov	r5, r1
 800030e:	4614      	mov	r4, r2
    LCD_command(0x33);
 8000310:	2033      	movs	r0, #51	@ 0x33
 8000312:	f7ff ffe1 	bl	80002d8 <LCD_command>
    LCD_dataw(topcorn >> 8);
 8000316:	0a30      	lsrs	r0, r6, #8
 8000318:	f7ff ffea 	bl	80002f0 <LCD_dataw>
    LCD_dataw(topcorn & 0xFF);
 800031c:	b2f0      	uxtb	r0, r6
 800031e:	f7ff ffe7 	bl	80002f0 <LCD_dataw>
    LCD_dataw(Area >> 8);
 8000322:	0a28      	lsrs	r0, r5, #8
 8000324:	f7ff ffe4 	bl	80002f0 <LCD_dataw>
    LCD_dataw(Area & 0xFF);
 8000328:	b2e8      	uxtb	r0, r5
 800032a:	f7ff ffe1 	bl	80002f0 <LCD_dataw>
    LCD_dataw(bottomcorn >> 8);
 800032e:	0a20      	lsrs	r0, r4, #8
 8000330:	f7ff ffde 	bl	80002f0 <LCD_dataw>
    LCD_dataw(bottomcorn & 0xFF);
 8000334:	b2e0      	uxtb	r0, r4
 8000336:	f7ff ffdb 	bl	80002f0 <LCD_dataw>
}
 800033a:	bd70      	pop	{r4, r5, r6, pc}

0800033c <LCD_Scroll>:
void LCD_Scroll(const uint16_t scr_with){ //shifting the starting RAM addr negative dire
 800033c:	b510      	push	{r4, lr}
 800033e:	4604      	mov	r4, r0
	GPIOE->ODR &= ~LCD_CS;// Chip Select active
 8000340:	4a16      	ldr	r2, [pc, #88]	@ (800039c <LCD_Scroll+0x60>)
 8000342:	6953      	ldr	r3, [r2, #20]
 8000344:	f023 0310 	bic.w	r3, r3, #16
 8000348:	6153      	str	r3, [r2, #20]
	LCD_command(0x2a);  //code for column address p 110
 800034a:	202a      	movs	r0, #42	@ 0x2a
 800034c:	f7ff ffc4 	bl	80002d8 <LCD_command>
	LCD_dataw(0x0);  //upper 8 Bit sent to LCD       start addr
 8000350:	2000      	movs	r0, #0
 8000352:	f7ff ffcd 	bl	80002f0 <LCD_dataw>
	LCD_dataw(0x0);       //lower 8 Bit sent to LCD
 8000356:	2000      	movs	r0, #0
 8000358:	f7ff ffca 	bl	80002f0 <LCD_dataw>
	LCD_dataw(0x0);  //
 800035c:	2000      	movs	r0, #0
 800035e:	f7ff ffc7 	bl	80002f0 <LCD_dataw>
	LCD_dataw(0xF0);       // end addr
 8000362:	20f0      	movs	r0, #240	@ 0xf0
 8000364:	f7ff ffc4 	bl	80002f0 <LCD_dataw>
	LCD_command(0x2b);  //code for row address
 8000368:	202b      	movs	r0, #43	@ 0x2b
 800036a:	f7ff ffb5 	bl	80002d8 <LCD_command>
	LCD_dataw(0x0);  //
 800036e:	2000      	movs	r0, #0
 8000370:	f7ff ffbe 	bl	80002f0 <LCD_dataw>
	LCD_dataw(0x0);       //
 8000374:	2000      	movs	r0, #0
 8000376:	f7ff ffbb 	bl	80002f0 <LCD_dataw>
	LCD_dataw(0x1);  //
 800037a:	2001      	movs	r0, #1
 800037c:	f7ff ffb8 	bl	80002f0 <LCD_dataw>
	LCD_dataw(0x3F); //
 8000380:	203f      	movs	r0, #63	@ 0x3f
 8000382:	f7ff ffb5 	bl	80002f0 <LCD_dataw>
	LCD_command(0x37);  // p. 129                 317|318|319|0|1
 8000386:	2037      	movs	r0, #55	@ 0x37
 8000388:	f7ff ffa6 	bl	80002d8 <LCD_command>
	LCD_dataw(scr_with >> 8); //                   318|319| 0 |1|2
 800038c:	0a20      	lsrs	r0, r4, #8
 800038e:	f7ff ffaf 	bl	80002f0 <LCD_dataw>
	LCD_dataw(scr_with & 0xFF);//Start addr after shift-----^
 8000392:	b2e0      	uxtb	r0, r4
 8000394:	f7ff ffac 	bl	80002f0 <LCD_dataw>
}
 8000398:	bd10      	pop	{r4, pc}
 800039a:	bf00      	nop
 800039c:	58021000 	.word	0x58021000

080003a0 <Line>:
	LCD_dataw(color);

}


void Line(uint16_t x1, uint16_t y1, uint16_t y2, uint16_t color){	//vertical
 80003a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80003a4:	4604      	mov	r4, r0
 80003a6:	4688      	mov	r8, r1
 80003a8:	4617      	mov	r7, r2
 80003aa:	461d      	mov	r5, r3
	const uint32_t pixels = (y2 - y1 + 1);
 80003ac:	1a56      	subs	r6, r2, r1
 80003ae:	3601      	adds	r6, #1
	GPIOE->ODR &= ~LCD_CS;// Chip Select active
 80003b0:	4a1b      	ldr	r2, [pc, #108]	@ (8000420 <Line+0x80>)
 80003b2:	6953      	ldr	r3, [r2, #20]
 80003b4:	f023 0310 	bic.w	r3, r3, #16
 80003b8:	6153      	str	r3, [r2, #20]
	//delay_cycles(1);
	//define area where pixels will be changed/written
	LCD_command(0x2a);  //code for column address p 110
 80003ba:	202a      	movs	r0, #42	@ 0x2a
 80003bc:	f7ff ff8c 	bl	80002d8 <LCD_command>
	LCD_dataw(y1 >> 8);  //upper 8 Bit sent to LCD
 80003c0:	ea4f 2018 	mov.w	r0, r8, lsr #8
 80003c4:	f7ff ff94 	bl	80002f0 <LCD_dataw>
	LCD_dataw(y1 & 0xFF);       //lower 8 Bit sent to LCD
 80003c8:	fa5f f088 	uxtb.w	r0, r8
 80003cc:	f7ff ff90 	bl	80002f0 <LCD_dataw>
	LCD_dataw(y2 >> 8);  // start addr
 80003d0:	0a38      	lsrs	r0, r7, #8
 80003d2:	f7ff ff8d 	bl	80002f0 <LCD_dataw>
	LCD_dataw(y2 & 0xFF);       // end addr
 80003d6:	b2f8      	uxtb	r0, r7
 80003d8:	f7ff ff8a 	bl	80002f0 <LCD_dataw>

	LCD_command(0x2b);  //code for row address
 80003dc:	202b      	movs	r0, #43	@ 0x2b
 80003de:	f7ff ff7b 	bl	80002d8 <LCD_command>
	LCD_dataw(x1 >> 8);  //
 80003e2:	0a27      	lsrs	r7, r4, #8
 80003e4:	4638      	mov	r0, r7
 80003e6:	f7ff ff83 	bl	80002f0 <LCD_dataw>
	LCD_dataw(x1 & 0xFF);       //
 80003ea:	b2e4      	uxtb	r4, r4
 80003ec:	4620      	mov	r0, r4
 80003ee:	f7ff ff7f 	bl	80002f0 <LCD_dataw>
	LCD_dataw(x1 >> 8);  //
 80003f2:	4638      	mov	r0, r7
 80003f4:	f7ff ff7c 	bl	80002f0 <LCD_dataw>
	LCD_dataw(x1 & 0xFF);       //
 80003f8:	4620      	mov	r0, r4
 80003fa:	f7ff ff79 	bl	80002f0 <LCD_dataw>

	LCD_command(0x2c);  // Memory Write
 80003fe:	202c      	movs	r0, #44	@ 0x2c
 8000400:	f7ff ff6a 	bl	80002d8 <LCD_command>
	for(int i = 0; i < pixels; i++){		// fill the above defined space with
 8000404:	2400      	movs	r4, #0
 8000406:	e006      	b.n	8000416 <Line+0x76>
		LCD_dataw(color >> 8);				// color pixel by pixel towards LCD
 8000408:	0a28      	lsrs	r0, r5, #8
 800040a:	f7ff ff71 	bl	80002f0 <LCD_dataw>
		LCD_dataw(color & 0xFF);			// GDRAM write direction (can changed by command)
 800040e:	b2e8      	uxtb	r0, r5
 8000410:	f7ff ff6e 	bl	80002f0 <LCD_dataw>
	for(int i = 0; i < pixels; i++){		// fill the above defined space with
 8000414:	3401      	adds	r4, #1
 8000416:	42b4      	cmp	r4, r6
 8000418:	d3f6      	bcc.n	8000408 <Line+0x68>
	}
}
 800041a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800041e:	bf00      	nop
 8000420:	58021000 	.word	0x58021000

08000424 <Rect>:
	}
}



void Rect(uint16_t x1, uint16_t x2, uint16_t y1, uint16_t y2, uint16_t color){
 8000424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000428:	4607      	mov	r7, r0
 800042a:	460c      	mov	r4, r1
 800042c:	4691      	mov	r9, r2
 800042e:	4698      	mov	r8, r3
 8000430:	f8bd 5020 	ldrh.w	r5, [sp, #32]
	const uint32_t pixels = (x2 - x1 + 1) * (y2 - y1 + 1);
 8000434:	1a0b      	subs	r3, r1, r0
 8000436:	eba8 0602 	sub.w	r6, r8, r2
 800043a:	3601      	adds	r6, #1
 800043c:	fb03 6606 	mla	r6, r3, r6, r6
	GPIOE->ODR &= ~LCD_CS;// Chip Select active
 8000440:	4a1b      	ldr	r2, [pc, #108]	@ (80004b0 <Rect+0x8c>)
 8000442:	6953      	ldr	r3, [r2, #20]
 8000444:	f023 0310 	bic.w	r3, r3, #16
 8000448:	6153      	str	r3, [r2, #20]
	//define area where pixels will be changed/written
	LCD_command(0x2a);  //code for column address p 110
 800044a:	202a      	movs	r0, #42	@ 0x2a
 800044c:	f7ff ff44 	bl	80002d8 <LCD_command>
	LCD_dataw((y1 >> 8));  //upper 8 Bit sent to LCD
 8000450:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8000454:	f7ff ff4c 	bl	80002f0 <LCD_dataw>
	LCD_dataw((y1 & 0xFF));       //lower 8 Bit sent to LCD
 8000458:	fa5f f089 	uxtb.w	r0, r9
 800045c:	f7ff ff48 	bl	80002f0 <LCD_dataw>
	LCD_dataw((y2 >> 8));  // start addr
 8000460:	ea4f 2018 	mov.w	r0, r8, lsr #8
 8000464:	f7ff ff44 	bl	80002f0 <LCD_dataw>
	LCD_dataw((y2 & 0xFF));       // end addr
 8000468:	fa5f f088 	uxtb.w	r0, r8
 800046c:	f7ff ff40 	bl	80002f0 <LCD_dataw>

	LCD_command(0x2b);  //code for row address
 8000470:	202b      	movs	r0, #43	@ 0x2b
 8000472:	f7ff ff31 	bl	80002d8 <LCD_command>
	LCD_dataw(x1 >> 8);  //
 8000476:	0a38      	lsrs	r0, r7, #8
 8000478:	f7ff ff3a 	bl	80002f0 <LCD_dataw>
	LCD_dataw(x1 & 0xFF);       //
 800047c:	b2f8      	uxtb	r0, r7
 800047e:	f7ff ff37 	bl	80002f0 <LCD_dataw>
	LCD_dataw(x2 >> 8);  //
 8000482:	0a20      	lsrs	r0, r4, #8
 8000484:	f7ff ff34 	bl	80002f0 <LCD_dataw>
	LCD_dataw(x2 & 0xFF);       //
 8000488:	b2e0      	uxtb	r0, r4
 800048a:	f7ff ff31 	bl	80002f0 <LCD_dataw>

	LCD_command(0x2c);  // Memory Write
 800048e:	202c      	movs	r0, #44	@ 0x2c
 8000490:	f7ff ff22 	bl	80002d8 <LCD_command>
	for(int i = 0; i < pixels; i++){
 8000494:	2400      	movs	r4, #0
 8000496:	e006      	b.n	80004a6 <Rect+0x82>
		LCD_dataw(color >> 8);
 8000498:	0a28      	lsrs	r0, r5, #8
 800049a:	f7ff ff29 	bl	80002f0 <LCD_dataw>
		LCD_dataw(color & 0xFF);
 800049e:	b2e8      	uxtb	r0, r5
 80004a0:	f7ff ff26 	bl	80002f0 <LCD_dataw>
	for(int i = 0; i < pixels; i++){
 80004a4:	3401      	adds	r4, #1
 80004a6:	42b4      	cmp	r4, r6
 80004a8:	d3f6      	bcc.n	8000498 <Rect+0x74>
	}
}
 80004aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80004ae:	bf00      	nop
 80004b0:	58021000 	.word	0x58021000

080004b4 <LCD_write>:
#define LCD_RST  GPIO_ODR_OD3 //Shield Reset



 void LCD_write(const uint8_t data){ //
	GPIOE->ODR &= ~LCD_WR; // WR = 0
 80004b4:	4b05      	ldr	r3, [pc, #20]	@ (80004cc <LCD_write+0x18>)
 80004b6:	695a      	ldr	r2, [r3, #20]
 80004b8:	f022 0220 	bic.w	r2, r2, #32
 80004bc:	615a      	str	r2, [r3, #20]

    //DATA Pins                              0| 1| 2| 3| 4| 5| 6| 7
	//										D0|D1|D2|D3|D4|D5|D6|D7
	GPIOD->ODR = data;					// use "bitbanging"
 80004be:	4a04      	ldr	r2, [pc, #16]	@ (80004d0 <LCD_write+0x1c>)
 80004c0:	6150      	str	r0, [r2, #20]

    GPIOE->ODR |= LCD_WR; // send data after (rising edge)
 80004c2:	695a      	ldr	r2, [r3, #20]
 80004c4:	f042 0220 	orr.w	r2, r2, #32
 80004c8:	615a      	str	r2, [r3, #20]

}
 80004ca:	4770      	bx	lr
 80004cc:	58021000 	.word	0x58021000
 80004d0:	58020c00 	.word	0x58020c00

080004d4 <LCD_Init>:





void LCD_Init(void){
 80004d4:	b510      	push	{r4, lr}
 	//Reset TFT
 	GPIOE->ODR |= LCD_RST; //active low
 80004d6:	4c25      	ldr	r4, [pc, #148]	@ (800056c <LCD_Init+0x98>)
 80004d8:	6963      	ldr	r3, [r4, #20]
 80004da:	f043 0308 	orr.w	r3, r3, #8
 80004de:	6163      	str	r3, [r4, #20]
 	delay(5);
 80004e0:	2005      	movs	r0, #5
 80004e2:	f000 f9b3 	bl	800084c <delay>
 	GPIOE->ODR &= ~LCD_RST; //reset TFT
 80004e6:	6963      	ldr	r3, [r4, #20]
 80004e8:	f023 0308 	bic.w	r3, r3, #8
 80004ec:	6163      	str	r3, [r4, #20]
 	delay(15);
 80004ee:	200f      	movs	r0, #15
 80004f0:	f000 f9ac 	bl	800084c <delay>
 	GPIOE->ODR |= LCD_RST; // turn off rst
 80004f4:	6963      	ldr	r3, [r4, #20]
 80004f6:	f043 0308 	orr.w	r3, r3, #8
 80004fa:	6163      	str	r3, [r4, #20]
 	delay(15);
 80004fc:	200f      	movs	r0, #15
 80004fe:	f000 f9a5 	bl	800084c <delay>

 	//make right lvls for write
 	GPIOE->ODR |= LCD_CS; //Chip-Select Active Low Signal
 8000502:	6963      	ldr	r3, [r4, #20]
 8000504:	f043 0310 	orr.w	r3, r3, #16
 8000508:	6163      	str	r3, [r4, #20]
 	GPIOE->ODR |= LCD_WR;
 800050a:	6963      	ldr	r3, [r4, #20]
 800050c:	f043 0320 	orr.w	r3, r3, #32
 8000510:	6163      	str	r3, [r4, #20]
 	delay_u(20);
 8000512:	2014      	movs	r0, #20
 8000514:	f000 f9d6 	bl	80008c4 <delay_u>
 	GPIOE->ODR |= LCD_RD;
 8000518:	6963      	ldr	r3, [r4, #20]
 800051a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800051e:	6163      	str	r3, [r4, #20]
 	GPIOE->ODR &= ~LCD_CS;  //cs low to actv ears of controller
 8000520:	6963      	ldr	r3, [r4, #20]
 8000522:	f023 0310 	bic.w	r3, r3, #16
 8000526:	6163      	str	r3, [r4, #20]

 	LCD_command(0xC5);    //VCOM Control 1 : Colour Contrast Maybe;      need to test more
 8000528:	20c5      	movs	r0, #197	@ 0xc5
 800052a:	f7ff fed5 	bl	80002d8 <LCD_command>
 	LCD_dataw(0x54);       //VCOM H 1111111 0x7F
 800052e:	2054      	movs	r0, #84	@ 0x54
 8000530:	f7ff fede 	bl	80002f0 <LCD_dataw>
 	LCD_dataw(0x00);       //VCOM L 0000000
 8000534:	2000      	movs	r0, #0
 8000536:	f7ff fedb 	bl	80002f0 <LCD_dataw>

 	LCD_command(0x36);    //Memory Access Control  r/w scan direction and RGB/BGR color set p. 127
 800053a:	2036      	movs	r0, #54	@ 0x36
 800053c:	f7ff fecc 	bl	80002d8 <LCD_command>
 	LCD_dataw(0X48);		// 0x0 rst -> BGR on -> 0x8 RGB on   &  upside down screen
 8000540:	2048      	movs	r0, #72	@ 0x48
 8000542:	f7ff fed5 	bl	80002f0 <LCD_dataw>
 	LCD_command(0x3A);    //COLMOD: Pixel Format Set  p. 134
 8000546:	203a      	movs	r0, #58	@ 0x3a
 8000548:	f7ff fec6 	bl	80002d8 <LCD_command>
 	LCD_dataw(0x55);       //set 16 bit RGB and MCU controlled
 800054c:	2055      	movs	r0, #85	@ 0x55
 800054e:	f7ff fecf 	bl	80002f0 <LCD_dataw>
 	LCD_command(0x11);    //sleep out  p. 245
 8000552:	2011      	movs	r0, #17
 8000554:	f7ff fec0 	bl	80002d8 <LCD_command>
 	delay(10);                  //wait at least 5ms after sleepout
 8000558:	200a      	movs	r0, #10
 800055a:	f000 f977 	bl	800084c <delay>
 	LCD_command(0x29);    //Display on.
 800055e:	2029      	movs	r0, #41	@ 0x29
 8000560:	f7ff feba 	bl	80002d8 <LCD_command>
 	LCD_command(0x2c);    //Memory Write | DataSheet Page 245
 8000564:	202c      	movs	r0, #44	@ 0x2c
 8000566:	f7ff feb7 	bl	80002d8 <LCD_command>
 //	LCD_command_write(0x51);    // display brightness
 	//LCD_data_write(0xFF);       // brightness = 50%

 }
 800056a:	bd10      	pop	{r4, pc}
 800056c:	58021000 	.word	0x58021000

08000570 <board_voltage>:





void board_voltage(void){ // call at very first
 8000570:	b082      	sub	sp, #8
		volatile int b;


		//Instruction on p.329
	    RCC->APB4ENR |= 0b10;        //SYSCFGEN bit set  enable clk for hardware in moment of clk mux is switching clk source
 8000572:	4a11      	ldr	r2, [pc, #68]	@ (80005b8 <board_voltage+0x48>)
 8000574:	f8d2 30f4 	ldr.w	r3, [r2, #244]	@ 0xf4
 8000578:	f043 0302 	orr.w	r3, r3, #2
 800057c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
	  /*  a = PWR->CR3;             // save register in a; to change things step by step. wrong values cause register Lock
	    a = a & ~(0b11 << 1);     // LDO and SD Bits off
	    a = (a |= (0b1       |     // BYPASS bit to 1
	    		 (0b1 << 5) |     // 2,5V input for step down conv
				 (0b1 << 3)));     // slightly raise of Vcore -> more stable*/
	    PWR->CR3 = (PWR->CR3 &
 8000580:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000584:	68d3      	ldr	r3, [r2, #12]
	    			~(PWR_CR3_LDOEN))            |
					PWR_CR3_SMPSLEVEL_1          |
					PWR_CR3_SMPSEXTHP            |
					PWR_CR3_SMPSEN               |
 8000586:	f023 032f 	bic.w	r3, r3, #47	@ 0x2f
 800058a:	f043 032d 	orr.w	r3, r3, #45	@ 0x2d
	    PWR->CR3 = (PWR->CR3 &
 800058e:	60d3      	str	r3, [r2, #12]
					PWR_CR3_BYPASS;                 // neccesary for VOS0


	    //Instruction on p. 297
		PWR->D3CR |= (0b11 << 14);   //VOS1 Mode set
 8000590:	6993      	ldr	r3, [r2, #24]
 8000592:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000596:	6193      	str	r3, [r2, #24]
		//while(1){a = ()
		SYSCFG->PWRCR |= 0b1;        //VOS0 Mode set (Boost Mode) BYPASS active neccesary
 8000598:	f5a2 3211 	sub.w	r2, r2, #148480	@ 0x24400
 800059c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800059e:	f043 0301 	orr.w	r3, r3, #1
 80005a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
		while(1){b = (PWR->D3CR >> 13) & 0b1; if(b == 1){break;}}
 80005a4:	4b05      	ldr	r3, [pc, #20]	@ (80005bc <board_voltage+0x4c>)
 80005a6:	699b      	ldr	r3, [r3, #24]
 80005a8:	f3c3 3340 	ubfx	r3, r3, #13, #1
 80005ac:	9301      	str	r3, [sp, #4]
 80005ae:	9b01      	ldr	r3, [sp, #4]
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	d1f7      	bne.n	80005a4 <board_voltage+0x34>

}
 80005b4:	b002      	add	sp, #8
 80005b6:	4770      	bx	lr
 80005b8:	58024400 	.word	0x58024400
 80005bc:	58024800 	.word	0x58024800

080005c0 <board_oclk>:


void board_oclk(volatile int clksel){ // 0 HSI 440MHz  1 HSE 480MHz     call 2nd
 80005c0:	b084      	sub	sp, #16
 80005c2:	9001      	str	r0, [sp, #4]
	volatile int a;

	FLASH->ACR &= ~(0b1);  //Flash standard 7 wait cycles refere page 166 in RM -> 6 WS now
 80005c4:	4a5c      	ldr	r2, [pc, #368]	@ (8000738 <board_oclk+0x178>)
 80005c6:	6813      	ldr	r3, [r2, #0]
 80005c8:	f023 0301 	bic.w	r3, r3, #1
 80005cc:	6013      	str	r3, [r2, #0]


	RCC->CR &= ~(0b1 << 24);         // turn PLL1 off
 80005ce:	4b5b      	ldr	r3, [pc, #364]	@ (800073c <board_oclk+0x17c>)
 80005d0:	681a      	ldr	r2, [r3, #0]
 80005d2:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 80005d6:	601a      	str	r2, [r3, #0]

	RCC->D2CCIP2R |= 0b1 << 8;
 80005d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80005da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80005de:	655a      	str	r2, [r3, #84]	@ 0x54

	if(clksel == 1){             	// use HSE as source for PLL max clk >=480MHz
 80005e0:	9b01      	ldr	r3, [sp, #4]
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d04d      	beq.n	8000682 <board_oclk+0xc2>


	else{																	// use HSI as clk source -> max clk <=440MHz
	  //HSI selected by default (00)
		//clk input divider -> 16MHz input
		RCC->PLLCKSELR &= ~((0b1 << 9) | (0b1 << 17) | (0b1 << 25));    // PRE 32 -> 0 for DIVM 1,2,3
 80005e6:	4b55      	ldr	r3, [pc, #340]	@ (800073c <board_oclk+0x17c>)
 80005e8:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80005ea:	4a55      	ldr	r2, [pc, #340]	@ (8000740 <board_oclk+0x180>)
 80005ec:	400a      	ands	r2, r1
 80005ee:	629a      	str	r2, [r3, #40]	@ 0x28
		RCC->PLLCKSELR |= (0b1 << 6) | (0b1 << 14) | (0b1 << 22); // PRE = 4 for DIVM 1,2,3  HSI auto set as PLL input
 80005f0:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80005f2:	4a54      	ldr	r2, [pc, #336]	@ (8000744 <board_oclk+0x184>)
 80005f4:	430a      	orrs	r2, r1
 80005f6:	629a      	str	r2, [r3, #40]	@ 0x28

		RCC->PLLCFGR |= (0b11 << 2) | //PLL input clk range 8 - 16
 80005f8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80005fa:	f640 42cc 	movw	r2, #3276	@ 0xccc
 80005fe:	430a      	orrs	r2, r1
 8000600:	62da      	str	r2, [r3, #44]	@ 0x2c

		//Freq calculation   PLL1 = HSI/DIVM*(DIVN+(FRACN/2^13))/DIVP     p.436 RM

		//RCC->PLL1FRACR |= (0b1 << 15); //Frac = 4096 -> 456 ->460MHz clk   (2^13 -1 max)

		RCC->PLL1DIVR &= (0b1 << 31) | (0b1 << 23);  // all 0 without changing res Bits 31;23
 8000602:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000604:	4950      	ldr	r1, [pc, #320]	@ (8000748 <board_oclk+0x188>)
 8000606:	400a      	ands	r2, r1
 8000608:	631a      	str	r2, [r3, #48]	@ 0x30
		RCC->PLL1DIVR |= ((0b110110)   | //DIVN = 54  -> 880MHz
 800060a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800060c:	4a4f      	ldr	r2, [pc, #316]	@ (800074c <board_oclk+0x18c>)
 800060e:	4302      	orrs	r2, r0
 8000610:	631a      	str	r2, [r3, #48]	@ 0x30
						  (0b1 << 9)   | //DIVP = 2 -> 440MHz into CLK MUX
						  (0b11 << 16) | //DIVQ = 4 -> 220MHz
						  (0b11 << 24)); //DIVR = 4 -> 220MHz


		RCC->PLL2DIVR &= (0b1 << 31) | (0b1 << 23);  // all 0 without changing res Bits 31;23
 8000612:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000614:	400a      	ands	r2, r1
 8000616:	639a      	str	r2, [r3, #56]	@ 0x38
		RCC->PLL2DIVR |= ((0b111011)   | //DIVN = 60  -> 960MHz
 8000618:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800061a:	484d      	ldr	r0, [pc, #308]	@ (8000750 <board_oclk+0x190>)
 800061c:	4302      	orrs	r2, r0
 800061e:	639a      	str	r2, [r3, #56]	@ 0x38
						 (0b11 << 24));  //DIVR = 4 -> 230MHz




		RCC->PLL3DIVR &= (0b1 << 31) | (0b1 << 23);  // all 0 without changing res Bits 31;23
 8000620:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000622:	400a      	ands	r2, r1
 8000624:	641a      	str	r2, [r3, #64]	@ 0x40
		RCC->PLL3DIVR |= ((0b111011)   | //DIVN = 60  -> 960MHz
 8000626:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000628:	4302      	orrs	r2, r0
 800062a:	641a      	str	r2, [r3, #64]	@ 0x40
						 (0b11 << 16)  | //DIVQ = 4 -> 230MHz
						 (0b11 << 24));  //DIVR = 4 -> 230MHz



		RCC->CR |= (0b1 << 24);         // turn PLL1ON
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8000632:	601a      	str	r2, [r3, #0]

		while(1) // wait till Flag signaling PLL1 is on
		{a = (RCC->CR >> 25) & 0b1; if(a == 1){break;}}
 8000634:	4b41      	ldr	r3, [pc, #260]	@ (800073c <board_oclk+0x17c>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f3c3 6340 	ubfx	r3, r3, #25, #1
 800063c:	9303      	str	r3, [sp, #12]
 800063e:	9b03      	ldr	r3, [sp, #12]
 8000640:	2b01      	cmp	r3, #1
 8000642:	d1f7      	bne.n	8000634 <board_oclk+0x74>


		RCC->D1CFGR = (RCC->D1CFGR & ~(0b1 << 11)) | 0b1001000; // HPRE /2 & D1PPRE /2
 8000644:	4b3d      	ldr	r3, [pc, #244]	@ (800073c <board_oclk+0x17c>)
 8000646:	6999      	ldr	r1, [r3, #24]
 8000648:	4a42      	ldr	r2, [pc, #264]	@ (8000754 <board_oclk+0x194>)
 800064a:	400a      	ands	r2, r1
 800064c:	f042 0248 	orr.w	r2, r2, #72	@ 0x48
 8000650:	619a      	str	r2, [r3, #24]
		RCC->D2CFGR |= (0b10001 << 6); // D2PPRE & D2PPRE2 /2
 8000652:	69da      	ldr	r2, [r3, #28]
 8000654:	f442 6288 	orr.w	r2, r2, #1088	@ 0x440
 8000658:	61da      	str	r2, [r3, #28]
		RCC->D3CFGR |= (0b1 << 6); // D3PPRE /2
 800065a:	6a1a      	ldr	r2, [r3, #32]
 800065c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000660:	621a      	str	r2, [r3, #32]

		RCC->CFGR |= 0b11;
 8000662:	691a      	ldr	r2, [r3, #16]
 8000664:	f042 0203 	orr.w	r2, r2, #3
 8000668:	611a      	str	r2, [r3, #16]
		while(1)
		{a = (RCC->CFGR >> 3) & 0b11; if(a == 3){break;}}  // wait till SWS == 0b11000 (PLL1 == input)
 800066a:	4b34      	ldr	r3, [pc, #208]	@ (800073c <board_oclk+0x17c>)
 800066c:	691b      	ldr	r3, [r3, #16]
 800066e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8000672:	9303      	str	r3, [sp, #12]
 8000674:	9b03      	ldr	r3, [sp, #12]
 8000676:	2b03      	cmp	r3, #3
 8000678:	d1f7      	bne.n	800066a <board_oclk+0xaa>

		a = 0;
 800067a:	2300      	movs	r3, #0
 800067c:	9303      	str	r3, [sp, #12]
	}

}
 800067e:	b004      	add	sp, #16
 8000680:	4770      	bx	lr
			RCC->CR |= 0b1 << 16; 										//activate HSE
 8000682:	4a2e      	ldr	r2, [pc, #184]	@ (800073c <board_oclk+0x17c>)
 8000684:	6813      	ldr	r3, [r2, #0]
 8000686:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800068a:	6013      	str	r3, [r2, #0]
			while(1){a = (RCC->CR >> 17) & 0b1; if(a == 0b1){break;}}	// wait for HSE being active
 800068c:	4b2b      	ldr	r3, [pc, #172]	@ (800073c <board_oclk+0x17c>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8000694:	9303      	str	r3, [sp, #12]
 8000696:	9b03      	ldr	r3, [sp, #12]
 8000698:	2b01      	cmp	r3, #1
 800069a:	d1f7      	bne.n	800068c <board_oclk+0xcc>
			RCC->PLLCKSELR &= ~((0b1 << 9) | (0b1 << 17) | (0b1 << 25));    // PRE 32 -> 0 for DIVM 1,2,3
 800069c:	4b27      	ldr	r3, [pc, #156]	@ (800073c <board_oclk+0x17c>)
 800069e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80006a0:	4a27      	ldr	r2, [pc, #156]	@ (8000740 <board_oclk+0x180>)
 80006a2:	400a      	ands	r2, r1
 80006a4:	629a      	str	r2, [r3, #40]	@ 0x28
			RCC->PLLCKSELR |= (0b101 << 4) | (0b101 << 12) | (0b101 << 20) | 0b10; // PRE = 5 for DIVM 1,2,3  HSE sel as PLL input
 80006a6:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80006a8:	4a2b      	ldr	r2, [pc, #172]	@ (8000758 <board_oclk+0x198>)
 80006aa:	430a      	orrs	r2, r1
 80006ac:	629a      	str	r2, [r3, #40]	@ 0x28
		    RCC->PLLCFGR |= (0b10 << 2) | //PLL input frq range = 4 - 8 MHz
 80006ae:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80006b0:	f640 0288 	movw	r2, #2184	@ 0x888
 80006b4:	430a      	orrs	r2, r1
 80006b6:	62da      	str	r2, [r3, #44]	@ 0x2c
		    RCC->PLL1DIVR &= (0b1 << 31) | (0b1 << 23);  	// all 0 without changing res Bits 31;23
 80006b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80006ba:	4923      	ldr	r1, [pc, #140]	@ (8000748 <board_oclk+0x188>)
 80006bc:	400a      	ands	r2, r1
 80006be:	631a      	str	r2, [r3, #48]	@ 0x30
		    RCC->PLL1DIVR |= ((0b10111111)   | 				//DIVN = 192  -> 960MHz
 80006c0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80006c2:	4a26      	ldr	r2, [pc, #152]	@ (800075c <board_oclk+0x19c>)
 80006c4:	4302      	orrs	r2, r0
 80006c6:	631a      	str	r2, [r3, #48]	@ 0x30
		    RCC->PLL2DIVR &= (0b1 << 31) | (0b1 << 23);     // all 0 without changing res Bits 31;23
 80006c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80006ca:	400a      	ands	r2, r1
 80006cc:	639a      	str	r2, [r3, #56]	@ 0x38
		    RCC->PLL2DIVR |= ((0b10111111)   | 				//DIVN = 192  -> 960MHz
 80006ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80006d0:	4823      	ldr	r0, [pc, #140]	@ (8000760 <board_oclk+0x1a0>)
 80006d2:	4302      	orrs	r2, r0
 80006d4:	639a      	str	r2, [r3, #56]	@ 0x38
			RCC->PLL3DIVR &= (0b1 << 31) | (0b1 << 23);     // all 0 without changing res Bits 31;23
 80006d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80006d8:	400a      	ands	r2, r1
 80006da:	641a      	str	r2, [r3, #64]	@ 0x40
		    RCC->PLL3DIVR |= ((0b10111111)   |				//DIVN = 192  -> 960MHz
 80006dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80006de:	4302      	orrs	r2, r0
 80006e0:	641a      	str	r2, [r3, #64]	@ 0x40
		    RCC->CR |= (0b1 << 24);         // turn PLL1ON
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80006e8:	601a      	str	r2, [r3, #0]
		    {a = (RCC->CR >> 25) & 0b1; if(a == 1){break;}}
 80006ea:	4b14      	ldr	r3, [pc, #80]	@ (800073c <board_oclk+0x17c>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f3c3 6340 	ubfx	r3, r3, #25, #1
 80006f2:	9303      	str	r3, [sp, #12]
 80006f4:	9b03      	ldr	r3, [sp, #12]
 80006f6:	2b01      	cmp	r3, #1
 80006f8:	d1f7      	bne.n	80006ea <board_oclk+0x12a>
		    RCC->D1CFGR = (RCC->D1CFGR & ~(0b1 << 11)) | 0b1001000; // HPRE /2 & D1PPRE /2
 80006fa:	4b10      	ldr	r3, [pc, #64]	@ (800073c <board_oclk+0x17c>)
 80006fc:	6999      	ldr	r1, [r3, #24]
 80006fe:	4a15      	ldr	r2, [pc, #84]	@ (8000754 <board_oclk+0x194>)
 8000700:	400a      	ands	r2, r1
 8000702:	f042 0248 	orr.w	r2, r2, #72	@ 0x48
 8000706:	619a      	str	r2, [r3, #24]
		    RCC->D2CFGR |= (0b10001 << 6); // D2PPRE & D2PPRE2 /2
 8000708:	69da      	ldr	r2, [r3, #28]
 800070a:	f442 6288 	orr.w	r2, r2, #1088	@ 0x440
 800070e:	61da      	str	r2, [r3, #28]
		    RCC->D3CFGR |= (0b1 << 6); // D3PPRE /2
 8000710:	6a1a      	ldr	r2, [r3, #32]
 8000712:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000716:	621a      	str	r2, [r3, #32]
		    RCC->CFGR |= 0b11;  // set PLL1p as input frq for main clk
 8000718:	691a      	ldr	r2, [r3, #16]
 800071a:	f042 0203 	orr.w	r2, r2, #3
 800071e:	611a      	str	r2, [r3, #16]
		    {a = (RCC->CFGR >> 3) & 0b11; if(a == 3){break;}}  // wait till SWS == 0b11000 (PLL1 == input)
 8000720:	4b06      	ldr	r3, [pc, #24]	@ (800073c <board_oclk+0x17c>)
 8000722:	691b      	ldr	r3, [r3, #16]
 8000724:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8000728:	9303      	str	r3, [sp, #12]
 800072a:	9b03      	ldr	r3, [sp, #12]
 800072c:	2b03      	cmp	r3, #3
 800072e:	d1f7      	bne.n	8000720 <board_oclk+0x160>
			a = 0;
 8000730:	2300      	movs	r3, #0
 8000732:	9303      	str	r3, [sp, #12]
 8000734:	e7a3      	b.n	800067e <board_oclk+0xbe>
 8000736:	bf00      	nop
 8000738:	52002000 	.word	0x52002000
 800073c:	58024400 	.word	0x58024400
 8000740:	fdfdfdff 	.word	0xfdfdfdff
 8000744:	00404040 	.word	0x00404040
 8000748:	80800000 	.word	0x80800000
 800074c:	03030236 	.word	0x03030236
 8000750:	0303063b 	.word	0x0303063b
 8000754:	fffff7b7 	.word	0xfffff7b7
 8000758:	00505052 	.word	0x00505052
 800075c:	030302bf 	.word	0x030302bf
 8000760:	030306bf 	.word	0x030306bf

08000764 <board_start>:

// DATA Pins |0|1|2|3|4|5|6|7|     || D0|D1|D2|D3|D4|D5|D6|D7
// Function Pins                        RD|WR|RS|CS|RST
//                                      A3|C0|C3|B1|C2

void board_start(void){//    call 3rd
 8000764:	b410      	push	{r4}
	RCC->APB4ENR |= 0b10;        //SYSCFGEN bit set   also in board_voltage
 8000766:	4b29      	ldr	r3, [pc, #164]	@ (800080c <board_start+0xa8>)
 8000768:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 800076c:	f042 0202 	orr.w	r2, r2, #2
 8000770:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
	RCC->AHB4ENR |= 0b111 << 2;	    //clk for Ports C,D,E act
 8000774:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000778:	f042 021c 	orr.w	r2, r2, #28
 800077c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 // define pin type
	GPIOC->MODER &= ~(0b11 << (2 * 13)); // 00 = Input C13 blue PB
 8000780:	4823      	ldr	r0, [pc, #140]	@ (8000810 <board_start+0xac>)
 8000782:	6802      	ldr	r2, [r0, #0]
 8000784:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8000788:	6002      	str	r2, [r0, #0]
	GPIOD->MODER &= 0x5555; // 0 - 7
 800078a:	4922      	ldr	r1, [pc, #136]	@ (8000814 <board_start+0xb0>)
 800078c:	680a      	ldr	r2, [r1, #0]
 800078e:	f422 522a 	bic.w	r2, r2, #10880	@ 0x2a80
 8000792:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8000796:	0452      	lsls	r2, r2, #17
 8000798:	0c52      	lsrs	r2, r2, #17
 800079a:	600a      	str	r2, [r1, #0]
	GPIOE->MODER &= (0x1550);    // 2 - 6
 800079c:	4a1e      	ldr	r2, [pc, #120]	@ (8000818 <board_start+0xb4>)
 800079e:	6814      	ldr	r4, [r2, #0]
 80007a0:	f424 642a 	bic.w	r4, r4, #2720	@ 0xaa0
 80007a4:	f024 040f 	bic.w	r4, r4, #15
 80007a8:	04e4      	lsls	r4, r4, #19
 80007aa:	0ce4      	lsrs	r4, r4, #19
 80007ac:	6014      	str	r4, [r2, #0]

	GPIOC->PUPDR |= 0b11 << (2 * 13);  // Pull up
 80007ae:	68c4      	ldr	r4, [r0, #12]
 80007b0:	f044 6440 	orr.w	r4, r4, #201326592	@ 0xc000000
 80007b4:	60c4      	str	r4, [r0, #12]

	//define pin rising/falling edges precision/time
	GPIOD->OSPEEDR |= 0xFFFF;
 80007b6:	688c      	ldr	r4, [r1, #8]
 80007b8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80007bc:	4320      	orrs	r0, r4
 80007be:	6088      	str	r0, [r1, #8]
	GPIOE->OSPEEDR |= 0x3FF0;
 80007c0:	6890      	ldr	r0, [r2, #8]
 80007c2:	f643 71f0 	movw	r1, #16368	@ 0x3ff0
 80007c6:	4301      	orrs	r1, r0
 80007c8:	6091      	str	r1, [r2, #8]


	RCC->APB1LENR |= RCC_APB1LENR_TIM2EN;     // Timer clk on
 80007ca:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80007ce:	f042 0201 	orr.w	r2, r2, #1
 80007d2:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
	RCC->APB1LENR |= RCC_APB1LENR_TIM3EN;
 80007d6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80007da:	f042 0202 	orr.w	r2, r2, #2
 80007de:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8

	RCC->AHB2ENR |= RCC_AHB2ENR_RNGEN;        // bus clk for random number generator on
 80007e2:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 80007e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80007ea:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
	RNG->CR |= RNG_CR_RNGEN;                  // RNG on
 80007ee:	4a0b      	ldr	r2, [pc, #44]	@ (800081c <board_start+0xb8>)
 80007f0:	6813      	ldr	r3, [r2, #0]
 80007f2:	f043 0304 	orr.w	r3, r3, #4
 80007f6:	6013      	str	r3, [r2, #0]


	SCB->CPACR |= ((0b11 << 20) | (0b11 << 22));  //activate FPU refere ARM Manual (ARM DUI 0646B ID082615) 4-56
 80007f8:	4a09      	ldr	r2, [pc, #36]	@ (8000820 <board_start+0xbc>)
 80007fa:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80007fe:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000802:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

}
 8000806:	f85d 4b04 	ldr.w	r4, [sp], #4
 800080a:	4770      	bx	lr
 800080c:	58024400 	.word	0x58024400
 8000810:	58020800 	.word	0x58020800
 8000814:	58020c00 	.word	0x58020c00
 8000818:	58021000 	.word	0x58021000
 800081c:	48021800 	.word	0x48021800
 8000820:	e000ed00 	.word	0xe000ed00

08000824 <DWT_Init>:




void DWT_Init(void){   // call when u need
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // activate trace and debug
 8000824:	4a07      	ldr	r2, [pc, #28]	@ (8000844 <DWT_Init+0x20>)
 8000826:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
 800082a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800082e:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
    DWT->CYCCNT = 0;                                // clk cycle cnt = 0
 8000832:	4b05      	ldr	r3, [pc, #20]	@ (8000848 <DWT_Init+0x24>)
 8000834:	2200      	movs	r2, #0
 8000836:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;            // act DWT
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	f042 0201 	orr.w	r2, r2, #1
 800083e:	601a      	str	r2, [r3, #0]
}
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	e000ed00 	.word	0xe000ed00
 8000848:	e0001000 	.word	0xe0001000

0800084c <delay>:





void delay(volatile unsigned int ___1){                //Timer for ms
 800084c:	b082      	sub	sp, #8
 800084e:	9001      	str	r0, [sp, #4]
	 RCC->APB1LENR |= RCC_APB1LENR_TIM2EN;             // enable clk for Timer 2
 8000850:	4a12      	ldr	r2, [pc, #72]	@ (800089c <delay+0x50>)
 8000852:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 8000856:	f043 0301 	orr.w	r3, r3, #1
 800085a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
	 TIM2->DIER = TIM_DIER_UIE;                        //Update-Interrupt on
 800085e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000862:	2201      	movs	r2, #1
 8000864:	60da      	str	r2, [r3, #12]
	 TIM2->CNT = 0;
 8000866:	2100      	movs	r1, #0
 8000868:	6259      	str	r1, [r3, #36]	@ 0x24
	 TIM2->PSC = 240000 - 1;                           // devides counting clock (~4,3MHz max) 0 means AHB clk
 800086a:	480d      	ldr	r0, [pc, #52]	@ (80008a0 <delay+0x54>)
 800086c:	6298      	str	r0, [r3, #40]	@ 0x28
	 TIM2->ARR = ___1;                                 // define how long is counted
 800086e:	9801      	ldr	r0, [sp, #4]
 8000870:	62d8      	str	r0, [r3, #44]	@ 0x2c
	 tim2Intrpt_g = 0;                                 // reset for "infinite" sleep loop
 8000872:	480c      	ldr	r0, [pc, #48]	@ (80008a4 <delay+0x58>)
 8000874:	7001      	strb	r1, [r0, #0]
	 TIM2->CR1 = TIM_CR1_CEN;                          // Timer start
 8000876:	601a      	str	r2, [r3, #0]
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000878:	4b0b      	ldr	r3, [pc, #44]	@ (80008a8 <delay+0x5c>)
 800087a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800087e:	601a      	str	r2, [r3, #0]

	 NVIC_EnableIRQ(TIM2_IRQn);                        // enable Interrupt Handler

	 do {
		 __WFI();                                      // wait for interrupt -> sleep mode
 8000880:	bf30      	wfi
	 } while (!tim2Intrpt_g);
 8000882:	4b08      	ldr	r3, [pc, #32]	@ (80008a4 <delay+0x58>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d0fa      	beq.n	8000880 <delay+0x34>

	 TIM2->CR1 &= ~TIM_CR1_CEN;                        //Timer off
 800088a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800088e:	6813      	ldr	r3, [r2, #0]
 8000890:	f023 0301 	bic.w	r3, r3, #1
 8000894:	6013      	str	r3, [r2, #0]
}
 8000896:	b002      	add	sp, #8
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	58024400 	.word	0x58024400
 80008a0:	0003a97f 	.word	0x0003a97f
 80008a4:	24000027 	.word	0x24000027
 80008a8:	e000e100 	.word	0xe000e100

080008ac <TIM2_IRQHandler>:


void TIM2_IRQHandler(void){                            // Interrupt (Handler) makes cpu work here
	 tim2Intrpt_g = 1;                                 // stop sleep loop
 80008ac:	4b04      	ldr	r3, [pc, #16]	@ (80008c0 <TIM2_IRQHandler+0x14>)
 80008ae:	2201      	movs	r2, #1
 80008b0:	701a      	strb	r2, [r3, #0]
	 TIM2->SR &= ~TIM_SR_UIF;                          // Update Interrupt Flag = 0 -> stops generating interrupts
 80008b2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008b6:	6913      	ldr	r3, [r2, #16]
 80008b8:	f023 0301 	bic.w	r3, r3, #1
 80008bc:	6113      	str	r3, [r2, #16]
}
 80008be:	4770      	bx	lr
 80008c0:	24000027 	.word	0x24000027

080008c4 <delay_u>:



void delay_u(volatile int ___2){          //Timer for TFT output freq
 80008c4:	b082      	sub	sp, #8
 80008c6:	9001      	str	r0, [sp, #4]
	 RCC->APB1LENR |= RCC_APB1LENR_TIM3EN;
 80008c8:	4a11      	ldr	r2, [pc, #68]	@ (8000910 <delay_u+0x4c>)
 80008ca:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 80008ce:	f043 0302 	orr.w	r3, r3, #2
 80008d2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
	 TIM3->DIER = TIM_DIER_UIE;                         //Update-Interrupt on
 80008d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000914 <delay_u+0x50>)
 80008d8:	2201      	movs	r2, #1
 80008da:	60da      	str	r2, [r3, #12]
	 TIM3->CNT = 0;
 80008dc:	2100      	movs	r1, #0
 80008de:	6259      	str	r1, [r3, #36]	@ 0x24
	 TIM3->PSC = 240 - 1;
 80008e0:	20ef      	movs	r0, #239	@ 0xef
 80008e2:	6298      	str	r0, [r3, #40]	@ 0x28
	 TIM3->ARR = ___2;                                  //1 = 231,82ns
 80008e4:	9801      	ldr	r0, [sp, #4]
 80008e6:	62d8      	str	r0, [r3, #44]	@ 0x2c
	 tim3Intrpt_g = 0;
 80008e8:	480b      	ldr	r0, [pc, #44]	@ (8000918 <delay_u+0x54>)
 80008ea:	7001      	strb	r1, [r0, #0]
	 TIM3->CR1 = TIM_CR1_CEN;                          //Timer start
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	4b0b      	ldr	r3, [pc, #44]	@ (800091c <delay_u+0x58>)
 80008f0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80008f4:	601a      	str	r2, [r3, #0]

	 NVIC_EnableIRQ(TIM3_IRQn);

 do {
	 __WFI();
 80008f6:	bf30      	wfi
 } while (!tim3Intrpt_g);
 80008f8:	4b07      	ldr	r3, [pc, #28]	@ (8000918 <delay_u+0x54>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d0fa      	beq.n	80008f6 <delay_u+0x32>

 	 TIM3->CR1 &= ~TIM_CR1_CEN;                        //Timer off
 8000900:	4a04      	ldr	r2, [pc, #16]	@ (8000914 <delay_u+0x50>)
 8000902:	6813      	ldr	r3, [r2, #0]
 8000904:	f023 0301 	bic.w	r3, r3, #1
 8000908:	6013      	str	r3, [r2, #0]
}
 800090a:	b002      	add	sp, #8
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	58024400 	.word	0x58024400
 8000914:	40000400 	.word	0x40000400
 8000918:	24000026 	.word	0x24000026
 800091c:	e000e100 	.word	0xe000e100

08000920 <TIM3_IRQHandler>:


void TIM3_IRQHandler(void){
	 tim3Intrpt_g = 1;
 8000920:	4b04      	ldr	r3, [pc, #16]	@ (8000934 <TIM3_IRQHandler+0x14>)
 8000922:	2201      	movs	r2, #1
 8000924:	701a      	strb	r2, [r3, #0]
	 TIM3->SR &= ~TIM_SR_UIF;
 8000926:	4a04      	ldr	r2, [pc, #16]	@ (8000938 <TIM3_IRQHandler+0x18>)
 8000928:	6913      	ldr	r3, [r2, #16]
 800092a:	f023 0301 	bic.w	r3, r3, #1
 800092e:	6113      	str	r3, [r2, #16]
}
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	24000026 	.word	0x24000026
 8000938:	40000400 	.word	0x40000400

0800093c <RandomNG>:



int32_t RandomNG(void){
	//new random value after 216 periods of AHB clk if the output FIFO is empty RM p. 1412
	RNG->CR |= (0b1 << 2); //| (0b1 << 5) | ;        // enable RNG intrpt funct ________________________________________________act once at start?
 800093c:	4b17      	ldr	r3, [pc, #92]	@ (800099c <RandomNG+0x60>)
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	f042 0204 	orr.w	r2, r2, #4
 8000944:	601a      	str	r2, [r3, #0]

	 NVIC_DisableIRQ(RNG_IRQn);*/
	//    if ((RNG->SR & RNG_SR_DRDY) != 0b0){  // if value is valid
	  //       rval = RNG->DR;                  // read value resets DRDY Flag
	   // }
	    if(((RNG->SR >> 6) & 0b1) == 1){   // invalid data detected
 8000946:	685b      	ldr	r3, [r3, #4]
 8000948:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800094c:	d005      	beq.n	800095a <RandomNG+0x1e>
	    	SECS = ((RNG->SR >> 2) & 0b1);
 800094e:	4b13      	ldr	r3, [pc, #76]	@ (800099c <RandomNG+0x60>)
 8000950:	685b      	ldr	r3, [r3, #4]
 8000952:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000956:	4a12      	ldr	r2, [pc, #72]	@ (80009a0 <RandomNG+0x64>)
 8000958:	7013      	strb	r3, [r2, #0]
	    }
	    if(((RNG->SR >> 5) & 0b1) == 1){   // invalid clk detected
 800095a:	4b10      	ldr	r3, [pc, #64]	@ (800099c <RandomNG+0x60>)
 800095c:	685b      	ldr	r3, [r3, #4]
 800095e:	f013 0f20 	tst.w	r3, #32
 8000962:	d005      	beq.n	8000970 <RandomNG+0x34>
	    	CECS = ((RNG->SR >> 1) & 0b1);
 8000964:	4b0d      	ldr	r3, [pc, #52]	@ (800099c <RandomNG+0x60>)
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800096c:	4a0d      	ldr	r2, [pc, #52]	@ (80009a4 <RandomNG+0x68>)
 800096e:	7013      	strb	r3, [r2, #0]
		    if(((RNG->SR >> 5) & 0b1) == 1){   // invalid clk detected
		    	CECS = ((RNG->SR >> 1) & 0b1);
		    	return 0;
		    }
	    }*/
	    rval = RNG->DR;                  // read value resets DRDY Flag
 8000970:	4b0a      	ldr	r3, [pc, #40]	@ (800099c <RandomNG+0x60>)
 8000972:	689a      	ldr	r2, [r3, #8]
 8000974:	4b0c      	ldr	r3, [pc, #48]	@ (80009a8 <RandomNG+0x6c>)
 8000976:	601a      	str	r2, [r3, #0]

	 if((SECS == 0b0) && (CECS == 0b0) && (rval != 0)){
 8000978:	4b09      	ldr	r3, [pc, #36]	@ (80009a0 <RandomNG+0x64>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	b92b      	cbnz	r3, 800098a <RandomNG+0x4e>
 800097e:	4b09      	ldr	r3, [pc, #36]	@ (80009a4 <RandomNG+0x68>)
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	b913      	cbnz	r3, 800098a <RandomNG+0x4e>
 8000984:	4b08      	ldr	r3, [pc, #32]	@ (80009a8 <RandomNG+0x6c>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	b92b      	cbnz	r3, 8000996 <RandomNG+0x5a>
		 return rval;

	 }else{
		 // put srand function here just in case SECS or CECS are 1
		 RNG->CR &= ~RNG_CR_RNGEN;
 800098a:	4a04      	ldr	r2, [pc, #16]	@ (800099c <RandomNG+0x60>)
 800098c:	6813      	ldr	r3, [r2, #0]
 800098e:	f023 0304 	bic.w	r3, r3, #4
 8000992:	6013      	str	r3, [r2, #0]
	 }
}
 8000994:	4770      	bx	lr
		 return rval;
 8000996:	4b04      	ldr	r3, [pc, #16]	@ (80009a8 <RandomNG+0x6c>)
 8000998:	6818      	ldr	r0, [r3, #0]
 800099a:	4770      	bx	lr
 800099c:	48021800 	.word	0x48021800
 80009a0:	24000025 	.word	0x24000025
 80009a4:	24000024 	.word	0x24000024
 80009a8:	24000020 	.word	0x24000020

080009ac <hwswflpy>:




_Bool hwswflpy(void){
	return ((GPIOC->IDR >> 13) & 0b1);    // read out input of blue push button
 80009ac:	4b02      	ldr	r3, [pc, #8]	@ (80009b8 <hwswflpy+0xc>)
 80009ae:	6918      	ldr	r0, [r3, #16]
}
 80009b0:	f3c0 3040 	ubfx	r0, r0, #13, #1
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	58020800 	.word	0x58020800

080009bc <hit_tstf>:


void hit_tstf(Tubesaver *tubes, uint8_t flpy_h, dummy2 *tbposholder){
	static uint8_t lifes = 4;												// 3 lifes -> decrements only lifes - 1 times
	static unsigned int score;
	for(uint8_t i = 0; i < 4; i++){                 					  	//refresh every tubepos in the tubemap
 80009bc:	2300      	movs	r3, #0
 80009be:	2b03      	cmp	r3, #3
 80009c0:	d82f      	bhi.n	8000a22 <hit_tstf+0x66>
void hit_tstf(Tubesaver *tubes, uint8_t flpy_h, dummy2 *tbposholder){
 80009c2:	b530      	push	{r4, r5, lr}
 80009c4:	e00c      	b.n	80009e0 <hit_tstf+0x24>
		if((tubes[i].x > 0) && (tubes[i].x <= LCD_width)){
			tubes[i].x--;
		}
		if((tubes[i].x == xposofst + flpy_width) ){									// if 1st px of flpy is equal to 1st line of tube make the test
 80009c6:	f830 e00e 	ldrh.w	lr, [r0, lr]
 80009ca:	4c16      	ldr	r4, [pc, #88]	@ (8000a24 <hit_tstf+0x68>)
 80009cc:	f894 c000 	ldrb.w	ip, [r4]
 80009d0:	f10c 0c04 	add.w	ip, ip, #4
 80009d4:	45e6      	cmp	lr, ip
 80009d6:	d015      	beq.n	8000a04 <hit_tstf+0x48>
	for(uint8_t i = 0; i < 4; i++){                 					  	//refresh every tubepos in the tubemap
 80009d8:	3301      	adds	r3, #1
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	2b03      	cmp	r3, #3
 80009de:	d81f      	bhi.n	8000a20 <hit_tstf+0x64>
		if((tubes[i].x > 0) && (tubes[i].x <= LCD_width)){
 80009e0:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 80009e4:	ea4f 0e4c 	mov.w	lr, ip, lsl #1
 80009e8:	eb00 054c 	add.w	r5, r0, ip, lsl #1
 80009ec:	f830 c01c 	ldrh.w	ip, [r0, ip, lsl #1]
 80009f0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80009f4:	fa1f fc8c 	uxth.w	ip, ip
 80009f8:	f5bc 7f9f 	cmp.w	ip, #318	@ 0x13e
 80009fc:	d8e3      	bhi.n	80009c6 <hit_tstf+0xa>
			tubes[i].x--;
 80009fe:	f820 c00e 	strh.w	ip, [r0, lr]
 8000a02:	e7e0      	b.n	80009c6 <hit_tstf+0xa>
			tbposholder->lencntact = 1;
 8000a04:	2401      	movs	r4, #1
 8000a06:	7014      	strb	r4, [r2, #0]
			tbposholder->tubemapnumber = i;
 8000a08:	7053      	strb	r3, [r2, #1]
			if((flpy_h <= tubes[i].gaph)  || (flpy_h >= tubes[i].gapl)){	// test if flpy is outside the gap hight     LCD upside down all values fliped
 8000a0a:	78ec      	ldrb	r4, [r5, #3]
 8000a0c:	428c      	cmp	r4, r1
 8000a0e:	d2e3      	bcs.n	80009d8 <hit_tstf+0x1c>
 8000a10:	78ac      	ldrb	r4, [r5, #2]
 8000a12:	428c      	cmp	r4, r1
 8000a14:	d9e0      	bls.n	80009d8 <hit_tstf+0x1c>
						__WFI();
					}
				}
			} else{

				score++;
 8000a16:	4d04      	ldr	r5, [pc, #16]	@ (8000a28 <hit_tstf+0x6c>)
 8000a18:	682c      	ldr	r4, [r5, #0]
 8000a1a:	3401      	adds	r4, #1
 8000a1c:	602c      	str	r4, [r5, #0]
 8000a1e:	e7db      	b.n	80009d8 <hit_tstf+0x1c>
		}
	}



}
 8000a20:	bd30      	pop	{r4, r5, pc}
 8000a22:	4770      	bx	lr
 8000a24:	24000030 	.word	0x24000030
 8000a28:	2400002c 	.word	0x2400002c

08000a2c <tuberand>:





void tuberand(gappos *gap){  // call RNG to work;    create 2 rand values with defined space inbetween
 8000a2c:	b510      	push	{r4, lr}
 8000a2e:	4604      	mov	r4, r0
//min !must! be in range of LCD hight = 0 to (240 - 1)
                                           //
	uint32_t val = RandomNG();            //                                                                ____________________________________
 8000a30:	f7ff ff84 	bl	800093c <RandomNG>
    //                            max    min      + 1     //                                                                \                 /                |
	gap->gaphigh = (val % (LCD_height - tubespace + 1));   	// shrink val to LCD writeable space  vall % 190 ->  (2^32 - 1) - {[(2^32 - 1) / 190] - residual of} * 190  = (0,...,239)
 8000a34:	4b06      	ldr	r3, [pc, #24]	@ (8000a50 <tuberand+0x24>)
 8000a36:	781a      	ldrb	r2, [r3, #0]
 8000a38:	f1c2 03f0 	rsb	r3, r2, #240	@ 0xf0
 8000a3c:	fbb0 f1f3 	udiv	r1, r0, r3
 8000a40:	fb03 0311 	mls	r3, r3, r1, r0
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	7063      	strb	r3, [r4, #1]
	gap->gaplow = gap->gaphigh + tubespace;					// calculate lower gap end
 8000a48:	441a      	add	r2, r3
 8000a4a:	7022      	strb	r2, [r4, #0]

}
 8000a4c:	bd10      	pop	{r4, pc}
 8000a4e:	bf00      	nop
 8000a50:	24000031 	.word	0x24000031

08000a54 <flappy_poso>:

	flappy_poso(xpos1,ypos1,yposold);
}


void flappy_poso(uint16_t xpos1, int16_t *ypos1, uint8_t yposold){
 8000a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a58:	b082      	sub	sp, #8
 8000a5a:	460e      	mov	r6, r1
 8000a5c:	4615      	mov	r5, r2

	if(xpos1 > (LCD_width - xposofst)){          // compensate distance between left edge and flpy xpos
 8000a5e:	4b67      	ldr	r3, [pc, #412]	@ (8000bfc <flappy_poso+0x1a8>)
 8000a60:	781c      	ldrb	r4, [r3, #0]
 8000a62:	f240 133f 	movw	r3, #319	@ 0x13f
 8000a66:	1b1b      	subs	r3, r3, r4
 8000a68:	4298      	cmp	r0, r3
 8000a6a:	dd32      	ble.n	8000ad2 <flappy_poso+0x7e>
		xpos1 = xpos1 + xposofst - LCD_width ;
 8000a6c:	4404      	add	r4, r0
 8000a6e:	b2a4      	uxth	r4, r4
 8000a70:	f2a4 143f 	subw	r4, r4, #319	@ 0x13f
 8000a74:	b2a4      	uxth	r4, r4
	}else{
		xpos1 = xpos1 + xposofst;
	}


	switch (xpos1){												// draw at x = 0 forbidden
 8000a76:	f5b4 7f9f 	cmp.w	r4, #318	@ 0x13e
 8000a7a:	d07a      	beq.n	8000b72 <flappy_poso+0x11e>
 8000a7c:	d82c      	bhi.n	8000ad8 <flappy_poso+0x84>
 8000a7e:	2c01      	cmp	r4, #1
 8000a80:	d059      	beq.n	8000b36 <flappy_poso+0xe2>
 8000a82:	f240 133d 	movw	r3, #317	@ 0x13d
 8000a86:	429c      	cmp	r4, r3
 8000a88:	f040 80a0 	bne.w	8000bcc <flappy_poso+0x178>
		Line(319,yposold,yposold + 3,BLACK);
		Rect(1,3,yposold,yposold + 3,BLACK);	// del flpy
		Line(xpos1 + 3,*ypos1,*ypos1 + 3,WHITE);
		break;
	case 317://_______________________________________________________________________________________ 317|318|319|1
		Rect(xpos1 - 1,xpos1 + 3,yposold,yposold + 3,BLACK);    // del first line of previous rect
 8000a8c:	1ce1      	adds	r1, r4, #3
 8000a8e:	1e60      	subs	r0, r4, #1
 8000a90:	23a4      	movs	r3, #164	@ 0xa4
 8000a92:	9300      	str	r3, [sp, #0]
 8000a94:	1ceb      	adds	r3, r5, #3
 8000a96:	462a      	mov	r2, r5
 8000a98:	b289      	uxth	r1, r1
 8000a9a:	b280      	uxth	r0, r0
 8000a9c:	f7ff fcc2 	bl	8000424 <Rect>
		Rect(xpos1, xpos1 + 2,*ypos1,*ypos1 + 3,WHITE);			//
 8000aa0:	f9b6 2000 	ldrsh.w	r2, [r6]
 8000aa4:	b292      	uxth	r2, r2
 8000aa6:	1cd3      	adds	r3, r2, #3
 8000aa8:	1ca1      	adds	r1, r4, #2
 8000aaa:	f64f 75ff 	movw	r5, #65535	@ 0xffff
 8000aae:	9500      	str	r5, [sp, #0]
 8000ab0:	b29b      	uxth	r3, r3
 8000ab2:	b289      	uxth	r1, r1
 8000ab4:	4620      	mov	r0, r4
 8000ab6:	f7ff fcb5 	bl	8000424 <Rect>
		Line(LCD_width - xpos1 - 1,*ypos1,*ypos1 + 3,WHITE);		// draw new line at px pos 1
 8000aba:	f9b6 1000 	ldrsh.w	r1, [r6]
 8000abe:	b289      	uxth	r1, r1
 8000ac0:	1cca      	adds	r2, r1, #3
 8000ac2:	f5c4 709f 	rsb	r0, r4, #318	@ 0x13e
 8000ac6:	462b      	mov	r3, r5
 8000ac8:	b292      	uxth	r2, r2
 8000aca:	b280      	uxth	r0, r0
 8000acc:	f7ff fc68 	bl	80003a0 <Line>
		break;
 8000ad0:	e04c      	b.n	8000b6c <flappy_poso+0x118>
		xpos1 = xpos1 + xposofst;
 8000ad2:	4404      	add	r4, r0
 8000ad4:	b2a4      	uxth	r4, r4
 8000ad6:	e7ce      	b.n	8000a76 <flappy_poso+0x22>
	switch (xpos1){												// draw at x = 0 forbidden
 8000ad8:	f240 133f 	movw	r3, #319	@ 0x13f
 8000adc:	429c      	cmp	r4, r3
 8000ade:	d175      	bne.n	8000bcc <flappy_poso+0x178>
		Line(1,yposold,yposold + 3, BLACK);                         // del Line at x = 1 from 317
		Rect(xpos1,xpos1 + 1,*ypos1,*ypos1 + 3,WHITE);
		Rect(1,LCD_width - xpos1 + 1,*ypos1,*ypos1 + 3,WHITE);			// new at px pos 2
		break;
	case 319://_______________________________________________________________________________________ 319|1|2|3
		Rect(xpos1 - 1,xpos1,yposold,yposold + 3,BLACK);
 8000ae0:	1cef      	adds	r7, r5, #3
 8000ae2:	1e60      	subs	r0, r4, #1
 8000ae4:	f04f 08a4 	mov.w	r8, #164	@ 0xa4
 8000ae8:	f8cd 8000 	str.w	r8, [sp]
 8000aec:	463b      	mov	r3, r7
 8000aee:	462a      	mov	r2, r5
 8000af0:	4621      	mov	r1, r4
 8000af2:	b280      	uxth	r0, r0
 8000af4:	f7ff fc96 	bl	8000424 <Rect>
		Rect(1,2,yposold,yposold + 3,BLACK);     				// del
 8000af8:	f8cd 8000 	str.w	r8, [sp]
 8000afc:	463b      	mov	r3, r7
 8000afe:	462a      	mov	r2, r5
 8000b00:	2102      	movs	r1, #2
 8000b02:	2001      	movs	r0, #1
 8000b04:	f7ff fc8e 	bl	8000424 <Rect>
		Line(xpos1,*ypos1,*ypos1 + 3,WHITE);
 8000b08:	f9b6 1000 	ldrsh.w	r1, [r6]
 8000b0c:	b289      	uxth	r1, r1
 8000b0e:	1cca      	adds	r2, r1, #3
 8000b10:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000b14:	b292      	uxth	r2, r2
 8000b16:	4620      	mov	r0, r4
 8000b18:	f7ff fc42 	bl	80003a0 <Line>
		Rect(1,3,*ypos1,*ypos1 + 3,WHITE);		// new at px pos 3
 8000b1c:	f9b6 2000 	ldrsh.w	r2, [r6]
 8000b20:	b292      	uxth	r2, r2
 8000b22:	1cd3      	adds	r3, r2, #3
 8000b24:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000b28:	9100      	str	r1, [sp, #0]
 8000b2a:	b29b      	uxth	r3, r3
 8000b2c:	2103      	movs	r1, #3
 8000b2e:	2001      	movs	r0, #1
 8000b30:	f7ff fc78 	bl	8000424 <Rect>
		break;
 8000b34:	e01a      	b.n	8000b6c <flappy_poso+0x118>
		Line(319,yposold,yposold + 3,BLACK);
 8000b36:	1cef      	adds	r7, r5, #3
 8000b38:	23a4      	movs	r3, #164	@ 0xa4
 8000b3a:	463a      	mov	r2, r7
 8000b3c:	4629      	mov	r1, r5
 8000b3e:	f240 103f 	movw	r0, #319	@ 0x13f
 8000b42:	f7ff fc2d 	bl	80003a0 <Line>
		Rect(1,3,yposold,yposold + 3,BLACK);	// del flpy
 8000b46:	23a4      	movs	r3, #164	@ 0xa4
 8000b48:	9300      	str	r3, [sp, #0]
 8000b4a:	463b      	mov	r3, r7
 8000b4c:	462a      	mov	r2, r5
 8000b4e:	2103      	movs	r1, #3
 8000b50:	2001      	movs	r0, #1
 8000b52:	f7ff fc67 	bl	8000424 <Rect>
		Line(xpos1 + 3,*ypos1,*ypos1 + 3,WHITE);
 8000b56:	f9b6 1000 	ldrsh.w	r1, [r6]
 8000b5a:	b289      	uxth	r1, r1
 8000b5c:	1cca      	adds	r2, r1, #3
 8000b5e:	1ce0      	adds	r0, r4, #3
 8000b60:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000b64:	b292      	uxth	r2, r2
 8000b66:	b280      	uxth	r0, r0
 8000b68:	f7ff fc1a 	bl	80003a0 <Line>
	default:
	    Rect(xpos1 - 1,xpos1 + 2,yposold,yposold + 3,BLACK);	// del flpy
		Rect(xpos1,xpos1 + 3,*ypos1,*ypos1 + 3,WHITE);

	}
}
 8000b6c:	b002      	add	sp, #8
 8000b6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		Rect(xpos1 - 1,xpos1 + 2,yposold,yposold + 3,BLACK);     	// del
 8000b72:	1cef      	adds	r7, r5, #3
 8000b74:	1ca1      	adds	r1, r4, #2
 8000b76:	1e60      	subs	r0, r4, #1
 8000b78:	f04f 08a4 	mov.w	r8, #164	@ 0xa4
 8000b7c:	f8cd 8000 	str.w	r8, [sp]
 8000b80:	463b      	mov	r3, r7
 8000b82:	462a      	mov	r2, r5
 8000b84:	b289      	uxth	r1, r1
 8000b86:	b280      	uxth	r0, r0
 8000b88:	f7ff fc4c 	bl	8000424 <Rect>
		Line(1,yposold,yposold + 3, BLACK);                         // del Line at x = 1 from 317
 8000b8c:	4643      	mov	r3, r8
 8000b8e:	463a      	mov	r2, r7
 8000b90:	4629      	mov	r1, r5
 8000b92:	2001      	movs	r0, #1
 8000b94:	f7ff fc04 	bl	80003a0 <Line>
		Rect(xpos1,xpos1 + 1,*ypos1,*ypos1 + 3,WHITE);
 8000b98:	f9b6 2000 	ldrsh.w	r2, [r6]
 8000b9c:	b292      	uxth	r2, r2
 8000b9e:	1cd3      	adds	r3, r2, #3
 8000ba0:	1c61      	adds	r1, r4, #1
 8000ba2:	f64f 75ff 	movw	r5, #65535	@ 0xffff
 8000ba6:	9500      	str	r5, [sp, #0]
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	b289      	uxth	r1, r1
 8000bac:	4620      	mov	r0, r4
 8000bae:	f7ff fc39 	bl	8000424 <Rect>
		Rect(1,LCD_width - xpos1 + 1,*ypos1,*ypos1 + 3,WHITE);			// new at px pos 2
 8000bb2:	f9b6 2000 	ldrsh.w	r2, [r6]
 8000bb6:	b292      	uxth	r2, r2
 8000bb8:	1cd3      	adds	r3, r2, #3
 8000bba:	f5c4 71a0 	rsb	r1, r4, #320	@ 0x140
 8000bbe:	9500      	str	r5, [sp, #0]
 8000bc0:	b29b      	uxth	r3, r3
 8000bc2:	b289      	uxth	r1, r1
 8000bc4:	2001      	movs	r0, #1
 8000bc6:	f7ff fc2d 	bl	8000424 <Rect>
		break;
 8000bca:	e7cf      	b.n	8000b6c <flappy_poso+0x118>
	    Rect(xpos1 - 1,xpos1 + 2,yposold,yposold + 3,BLACK);	// del flpy
 8000bcc:	1ca1      	adds	r1, r4, #2
 8000bce:	1e60      	subs	r0, r4, #1
 8000bd0:	23a4      	movs	r3, #164	@ 0xa4
 8000bd2:	9300      	str	r3, [sp, #0]
 8000bd4:	1ceb      	adds	r3, r5, #3
 8000bd6:	462a      	mov	r2, r5
 8000bd8:	b289      	uxth	r1, r1
 8000bda:	b280      	uxth	r0, r0
 8000bdc:	f7ff fc22 	bl	8000424 <Rect>
		Rect(xpos1,xpos1 + 3,*ypos1,*ypos1 + 3,WHITE);
 8000be0:	f9b6 2000 	ldrsh.w	r2, [r6]
 8000be4:	b292      	uxth	r2, r2
 8000be6:	1cd3      	adds	r3, r2, #3
 8000be8:	1ce1      	adds	r1, r4, #3
 8000bea:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000bee:	9000      	str	r0, [sp, #0]
 8000bf0:	b29b      	uxth	r3, r3
 8000bf2:	b289      	uxth	r1, r1
 8000bf4:	4620      	mov	r0, r4
 8000bf6:	f7ff fc15 	bl	8000424 <Rect>
}
 8000bfa:	e7b7      	b.n	8000b6c <flappy_poso+0x118>
 8000bfc:	24000030 	.word	0x24000030

08000c00 <flappy>:


dummy flappy(void){
 8000c00:	b500      	push	{lr}
 8000c02:	b083      	sub	sp, #12
	static const uint8_t uses[10] = {10,0, 6,0, 3,0, 2,0, 1,0}; // rise Ary "0" slow down rise proce
	static uint8_t callcoun1 = 10;

	dummy movup;
	movup.iput = hwswflpy();  						  //chk for ipt
 8000c04:	f7ff fed2 	bl	80009ac <hwswflpy>
 8000c08:	f88d 0001 	strb.w	r0, [sp, #1]
	movup.rise = 0;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	f88d 3000 	strb.w	r3, [sp]
	if(movup.iput && (callcoun1 > 6)){		    	  // if c13 pressed & timeout over -> gain alt fast
 8000c12:	b318      	cbz	r0, 8000c5c <flappy+0x5c>
 8000c14:	4b1c      	ldr	r3, [pc, #112]	@ (8000c88 <flappy+0x88>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	2b06      	cmp	r3, #6
 8000c1a:	d91f      	bls.n	8000c5c <flappy+0x5c>
		callcoun1 = 0;
 8000c1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000c88 <flappy+0x88>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	701a      	strb	r2, [r3, #0]
		movup.rise =  uses[callcoun1];
 8000c22:	230a      	movs	r3, #10
 8000c24:	f88d 3000 	strb.w	r3, [sp]
		movup.rise =  uses[callcoun1];
	}else if((!movup.iput) && callcoun1 <= 10){        	// if not pressed rise just little to reach smooth movement between rise and fall
		movup.rise =  uses[callcoun1];
	}

	callcoun1++;    							   // increase cycle counter
 8000c28:	4a17      	ldr	r2, [pc, #92]	@ (8000c88 <flappy+0x88>)
 8000c2a:	7813      	ldrb	r3, [r2, #0]
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	7013      	strb	r3, [r2, #0]
	if(callcoun1 > 9){							   // res counter after timeout
 8000c32:	2b09      	cmp	r3, #9
 8000c34:	d902      	bls.n	8000c3c <flappy+0x3c>
		callcoun1 = 10;
 8000c36:	4613      	mov	r3, r2
 8000c38:	220a      	movs	r2, #10
 8000c3a:	701a      	strb	r2, [r3, #0]
	}
	return movup;
 8000c3c:	f8bd 3000 	ldrh.w	r3, [sp]
 8000c40:	f8ad 3004 	strh.w	r3, [sp, #4]
 8000c44:	2000      	movs	r0, #0
 8000c46:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000c4a:	f363 0007 	bfi	r0, r3, #0, #8
 8000c4e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8000c52:	f363 200f 	bfi	r0, r3, #8, #8

}
 8000c56:	b003      	add	sp, #12
 8000c58:	f85d fb04 	ldr.w	pc, [sp], #4
	}else if(movup.iput && (callcoun1 <= 6)){			// if c13 pressed & timeout act
 8000c5c:	b140      	cbz	r0, 8000c70 <flappy+0x70>
 8000c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c88 <flappy+0x88>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	2b06      	cmp	r3, #6
 8000c64:	d804      	bhi.n	8000c70 <flappy+0x70>
		movup.rise =  uses[callcoun1];
 8000c66:	4a09      	ldr	r2, [pc, #36]	@ (8000c8c <flappy+0x8c>)
 8000c68:	56d3      	ldrsb	r3, [r2, r3]
 8000c6a:	f88d 3000 	strb.w	r3, [sp]
 8000c6e:	e7db      	b.n	8000c28 <flappy+0x28>
	}else if((!movup.iput) && callcoun1 <= 10){        	// if not pressed rise just little to reach smooth movement between rise and fall
 8000c70:	2800      	cmp	r0, #0
 8000c72:	d1d9      	bne.n	8000c28 <flappy+0x28>
 8000c74:	4b04      	ldr	r3, [pc, #16]	@ (8000c88 <flappy+0x88>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	2b0a      	cmp	r3, #10
 8000c7a:	d8d5      	bhi.n	8000c28 <flappy+0x28>
		movup.rise =  uses[callcoun1];
 8000c7c:	4a03      	ldr	r2, [pc, #12]	@ (8000c8c <flappy+0x8c>)
 8000c7e:	56d3      	ldrsb	r3, [r2, r3]
 8000c80:	f88d 3000 	strb.w	r3, [sp]
 8000c84:	e7d0      	b.n	8000c28 <flappy+0x28>
 8000c86:	bf00      	nop
 8000c88:	24000000 	.word	0x24000000
 8000c8c:	08001084 	.word	0x08001084

08000c90 <bird>:

void bird(volatile dummy *bck){      // accelerated (by call cyc -> time) fallspeed
	static uint16_t callcoun2;
	//uint16_t t;

	if(bck->iput){                // no fall, when jump
 8000c90:	7843      	ldrb	r3, [r0, #1]
 8000c92:	b113      	cbz	r3, 8000c9a <bird+0xa>
		callcoun2 = 0;
 8000c94:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd0 <bird+0x40>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	801a      	strh	r2, [r3, #0]
	}

	callcoun2++;
 8000c9a:	4a0d      	ldr	r2, [pc, #52]	@ (8000cd0 <bird+0x40>)
 8000c9c:	8813      	ldrh	r3, [r2, #0]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	b29b      	uxth	r3, r3
 8000ca2:	8013      	strh	r3, [r2, #0]
	if(callcoun2 > 35){        // set max fallspeed
 8000ca4:	2b23      	cmp	r3, #35	@ 0x23
 8000ca6:	d902      	bls.n	8000cae <bird+0x1e>
		callcoun2 = 35;
 8000ca8:	4613      	mov	r3, r2
 8000caa:	2223      	movs	r2, #35	@ 0x23
 8000cac:	801a      	strh	r2, [r3, #0]
	}
	//uint8_t axa = (callcoun2 * callcoun2) / (faspeed * 90);		// calculate final fallspeed         !!!chck on screen!!!
	bck->rise -= (callcoun2 * callcoun2) / (faspeed * 90);		// calculate final fallspeed         !!!chck on screen!!! axa;
 8000cae:	7802      	ldrb	r2, [r0, #0]
 8000cb0:	4b07      	ldr	r3, [pc, #28]	@ (8000cd0 <bird+0x40>)
 8000cb2:	881b      	ldrh	r3, [r3, #0]
 8000cb4:	fb03 f303 	mul.w	r3, r3, r3
 8000cb8:	4906      	ldr	r1, [pc, #24]	@ (8000cd4 <bird+0x44>)
 8000cba:	fb81 c103 	smull	ip, r1, r1, r3
 8000cbe:	4419      	add	r1, r3
 8000cc0:	17db      	asrs	r3, r3, #31
 8000cc2:	eba3 2321 	sub.w	r3, r3, r1, asr #8
 8000cc6:	4413      	add	r3, r2
 8000cc8:	b25b      	sxtb	r3, r3
 8000cca:	7003      	strb	r3, [r0, #0]

}
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	24000028 	.word	0x24000028
 8000cd4:	f2b9d649 	.word	0xf2b9d649

08000cd8 <flappy_pos>:
void flappy_pos(volatile uint16_t xpos1, int16_t *ypos1, dummy2 *tbposholder, Tubesaver *tubes){//, volatile int16_t ypos1){// flpy pos could be negative -> signed val for y needed
 8000cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	460c      	mov	r4, r1
 8000cde:	4616      	mov	r6, r2
 8000ce0:	461d      	mov	r5, r3
 8000ce2:	f8ad 0006 	strh.w	r0, [sp, #6]
	 uint8_t yposold = *ypos1;
 8000ce6:	f9b1 7000 	ldrsh.w	r7, [r1]
 8000cea:	b2ff      	uxtb	r7, r7
	dummy volatile bck = flappy();						// get back info of gained altitude(rise); if ipt occoured
 8000cec:	f7ff ff88 	bl	8000c00 <flappy>
 8000cf0:	f8ad 000c 	strh.w	r0, [sp, #12]
	bird(&bck);
 8000cf4:	a803      	add	r0, sp, #12
 8000cf6:	f7ff ffcb 	bl	8000c90 <bird>
	*ypos1 = *ypos1 + bck.rise;							// adds rised px
 8000cfa:	8823      	ldrh	r3, [r4, #0]
 8000cfc:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8000d00:	b240      	sxtb	r0, r0
 8000d02:	fa13 f080 	uxtah	r0, r3, r0
 8000d06:	b200      	sxth	r0, r0
 8000d08:	8020      	strh	r0, [r4, #0]
	if(*ypos1 <= 0){                    			// limits for highest/lowest pos of flpy    without limits flpy would appear on opposite edge
 8000d0a:	2800      	cmp	r0, #0
 8000d0c:	dd04      	ble.n	8000d18 <flappy_pos+0x40>
	}else if(*ypos1 >= LCD_height - 3){
 8000d0e:	28eb      	cmp	r0, #235	@ 0xeb
 8000d10:	dd04      	ble.n	8000d1c <flappy_pos+0x44>
		*ypos1 = LCD_height - 3;
 8000d12:	23ec      	movs	r3, #236	@ 0xec
 8000d14:	8023      	strh	r3, [r4, #0]
 8000d16:	e001      	b.n	8000d1c <flappy_pos+0x44>
		*ypos1 = 0;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	8023      	strh	r3, [r4, #0]
	}if((tbposholder->lencntact)){
 8000d1c:	7833      	ldrb	r3, [r6, #0]
 8000d1e:	b17b      	cbz	r3, 8000d40 <flappy_pos+0x68>
		tubes[tbposholder->tubemapnumber].tublength--;
 8000d20:	7873      	ldrb	r3, [r6, #1]
 8000d22:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000d26:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8000d2a:	791a      	ldrb	r2, [r3, #4]
 8000d2c:	3a01      	subs	r2, #1
 8000d2e:	711a      	strb	r2, [r3, #4]
		if((tubes[tbposholder->tubemapnumber].tublength == 0)){
 8000d30:	7873      	ldrb	r3, [r6, #1]
 8000d32:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000d36:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8000d3a:	792b      	ldrb	r3, [r5, #4]
 8000d3c:	b94b      	cbnz	r3, 8000d52 <flappy_pos+0x7a>
			tbposholder->lencntact = 0;
 8000d3e:	7033      	strb	r3, [r6, #0]
	flappy_poso(xpos1,ypos1,yposold);
 8000d40:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8000d44:	463a      	mov	r2, r7
 8000d46:	4621      	mov	r1, r4
 8000d48:	b280      	uxth	r0, r0
 8000d4a:	f7ff fe83 	bl	8000a54 <flappy_poso>
}
 8000d4e:	b005      	add	sp, #20
 8000d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
		}else if((*ypos1 > (tubes[tbposholder->tubemapnumber].gapl - 3)) && (tubes[tbposholder->tubemapnumber].tublength > 0)){
 8000d52:	78ab      	ldrb	r3, [r5, #2]
 8000d54:	1e99      	subs	r1, r3, #2
 8000d56:	f9b4 2000 	ldrsh.w	r2, [r4]
 8000d5a:	4291      	cmp	r1, r2
 8000d5c:	dc02      	bgt.n	8000d64 <flappy_pos+0x8c>
			*ypos1 = (tubes[tbposholder->tubemapnumber].gapl - 3);
 8000d5e:	3b03      	subs	r3, #3
 8000d60:	8023      	strh	r3, [r4, #0]
 8000d62:	e7ed      	b.n	8000d40 <flappy_pos+0x68>
		}else if((*ypos1 < (tubes[tbposholder->tubemapnumber].gaph)) && (tubes[tbposholder->tubemapnumber].tublength > 0)){
 8000d64:	78eb      	ldrb	r3, [r5, #3]
 8000d66:	429a      	cmp	r2, r3
 8000d68:	daea      	bge.n	8000d40 <flappy_pos+0x68>
			*ypos1 = tubes[tbposholder->tubemapnumber].gaph ;
 8000d6a:	8023      	strh	r3, [r4, #0]
 8000d6c:	e7e8      	b.n	8000d40 <flappy_pos+0x68>
	...

08000d70 <gamecyc>:
}




void gamecyc(void){							// declare structs with vars that should be available in all functions
 8000d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d72:	b08d      	sub	sp, #52	@ 0x34
		volatile unsigned int score;
	}scoreboard;


	uint32_t twraw;
	int16_t ypos1 = flpy_start;
 8000d74:	2377      	movs	r3, #119	@ 0x77
 8000d76:	f8ad 301e 	strh.w	r3, [sp, #30]

	gappos gap;
	dummy2 tbposholder;

	counters.tbcoun = 0;																	// count number of empty lines drawn
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
	counters.tblen = 10;																	// counter for width of a tube
 8000d80:	220a      	movs	r2, #10
 8000d82:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
	uint16_t tblenset = 10;																	// set the max val tblen can reach - the max width of a tube
	counters.tubecoun = 0;																	// count number of tubes stored in the ary
 8000d86:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c

	scoreboard.lifes = 3;
 8000d8a:	2203      	movs	r2, #3
 8000d8c:	f88d 2020 	strb.w	r2, [sp, #32]
	scoreboard.score = 0;
 8000d90:	9309      	str	r3, [sp, #36]	@ 0x24

	tbposholder.lencntact = 0;
 8000d92:	f88d 3018 	strb.w	r3, [sp, #24]
	//tbposholder.lencnt = 0;
	tbposholder.tubemapnumber = 0;
 8000d96:	f88d 3019 	strb.w	r3, [sp, #25]

    tubespace = 100;
 8000d9a:	4a80      	ldr	r2, [pc, #512]	@ (8000f9c <gamecyc+0x22c>)
 8000d9c:	2164      	movs	r1, #100	@ 0x64
 8000d9e:	7011      	strb	r1, [r2, #0]
    xposofst = 59;
 8000da0:	4a7f      	ldr	r2, [pc, #508]	@ (8000fa0 <gamecyc+0x230>)
 8000da2:	213b      	movs	r1, #59	@ 0x3b
 8000da4:	7011      	strb	r1, [r2, #0]
    Tubesaver tubemap[4];
    for(int i = 0; i < 4; i++){
 8000da6:	e00e      	b.n	8000dc6 <gamecyc+0x56>
    	tubemap[i].gaph = 0;
 8000da8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8000dac:	a90c      	add	r1, sp, #48	@ 0x30
 8000dae:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8000db2:	2100      	movs	r1, #0
 8000db4:	f802 1c2d 	strb.w	r1, [r2, #-45]
    	tubemap[i].gapl = 0;
 8000db8:	f802 1c2e 	strb.w	r1, [r2, #-46]
    	tubemap[i].x = 0;
 8000dbc:	f822 1c30 	strh.w	r1, [r2, #-48]
    	tubemap[i].tublength = 0;
 8000dc0:	f802 1c2c 	strb.w	r1, [r2, #-44]
    for(int i = 0; i < 4; i++){
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	2b03      	cmp	r3, #3
 8000dc8:	ddee      	ble.n	8000da8 <gamecyc+0x38>
    }
    //uint8_t ys = flpy_start;
    scr_area(0b1,0x13F,0);      //def first line as dummy to keep screen scrollable without artifcts
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f240 113f 	movw	r1, #319	@ 0x13f
 8000dd0:	2001      	movs	r0, #1
 8000dd2:	f7ff fa99 	bl	8000308 <scr_area>
    Line(0,0,LCD_height,GREEN);
 8000dd6:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000dda:	22ef      	movs	r2, #239	@ 0xef
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4608      	mov	r0, r1
 8000de0:	f7ff fade 	bl	80003a0 <Line>
	uint16_t tblenset = 10;																	// set the max val tblen can reach - the max width of a tube
 8000de4:	250a      	movs	r5, #10
	for(;;){
			for(uint16_t i = 1;i < LCD_width + 1; i++){//
 8000de6:	2401      	movs	r4, #1
 8000de8:	f5b4 7fa0 	cmp.w	r4, #320	@ 0x140
 8000dec:	d2fb      	bcs.n	8000de6 <gamecyc+0x76>

				//Line(i,0,LCD_height,BLACK);


				flappy_pos(i, &ypos1, &tbposholder, tubemap);											// calculate and draw flappys pos
 8000dee:	466b      	mov	r3, sp
 8000df0:	aa06      	add	r2, sp, #24
 8000df2:	f10d 011e 	add.w	r1, sp, #30
 8000df6:	4620      	mov	r0, r4
 8000df8:	f7ff ff6e 	bl	8000cd8 <flappy_pos>
				LCD_Scroll(i);
 8000dfc:	4620      	mov	r0, r4
 8000dfe:	f7ff fa9d 	bl	800033c <LCD_Scroll>
				hit_tstf(tubemap, ypos1, &tbposholder);											// calculate flpy hits a tube + scoreboard +
 8000e02:	aa06      	add	r2, sp, #24
 8000e04:	f89d 101e 	ldrb.w	r1, [sp, #30]
 8000e08:	4668      	mov	r0, sp
 8000e0a:	f7ff fdd7 	bl	80009bc <hit_tstf>
				delay_u(3480);
 8000e0e:	f640 5098 	movw	r0, #3480	@ 0xd98
 8000e12:	f7ff fd57 	bl	80008c4 <delay_u>
				//delay_u(1740);
				counters.tbcoun++;
 8000e16:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	b29b      	uxth	r3, r3
 8000e1e:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
				counters.tblen++;																//
 8000e22:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 8000e26:	3201      	adds	r2, #1
 8000e28:	b292      	uxth	r2, r2
 8000e2a:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
				if(counters.tbcoun == tubedistance + tblenset){									// every 80 cycles after end of previous tubepair new generation of a tube pair
 8000e2e:	f105 0150 	add.w	r1, r5, #80	@ 0x50
 8000e32:	428b      	cmp	r3, r1
 8000e34:	d016      	beq.n	8000e64 <gamecyc+0xf4>
					Line(i,gap.gaphigh,gap.gaplow,BLACK);										// fill the gap with black
					counters.tbcoun = 0;                                      					// count passed empty rotations
					counters.tblen = 0;                                    						// make tube thickness function start
					counters.tubecoun++;                             							// write next time into second space of the struct arry
				}
				else if(counters.tblen <= tblenset){											// create tube thickness
 8000e36:	42aa      	cmp	r2, r5
 8000e38:	d978      	bls.n	8000f2c <gamecyc+0x1bc>
					Line(i,0,tubemap[counters.tubecoun - 1].gapl, tubecolor);						//
					Line(i,tubemap[counters.tubecoun - 1].gaph,LCD_height, tubecolor);				//
					Line(i,gap.gaphigh,gap.gaplow,BLACK);										// only fill parts, that havn't been already written with tubes
				}else if((counters.tblen > tblenset) & counters.tubecoun >= 4){					// max 4 tube starting lines are displayed
 8000e3a:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 8000e3e:	2b03      	cmp	r3, #3
 8000e40:	f240 809a 	bls.w	8000f78 <gamecyc+0x208>
																								// get new val for tube thickness
					counters.tubecoun = 0;
 8000e44:	2100      	movs	r1, #0
 8000e46:	f88d 102c 	strb.w	r1, [sp, #44]	@ 0x2c
					Line(i,0,LCD_height,BLACK);
 8000e4a:	23a4      	movs	r3, #164	@ 0xa4
 8000e4c:	22ef      	movs	r2, #239	@ 0xef
 8000e4e:	4620      	mov	r0, r4
 8000e50:	f7ff faa6 	bl	80003a0 <Line>
				}

				 //hit_tstf(tubemap, ypos1);


				if(i == LCD_width){i = 0; if(tubespace > 50){tubespace--;}} 					 // make tubespace smaller over time
 8000e54:	f240 133f 	movw	r3, #319	@ 0x13f
 8000e58:	429c      	cmp	r4, r3
 8000e5a:	f000 8094 	beq.w	8000f86 <gamecyc+0x216>
			for(uint16_t i = 1;i < LCD_width + 1; i++){//
 8000e5e:	3401      	adds	r4, #1
 8000e60:	b2a4      	uxth	r4, r4
 8000e62:	e7c1      	b.n	8000de8 <gamecyc+0x78>
					twraw = RandomNG();															// save new raw random tube length
 8000e64:	f7ff fd6a 	bl	800093c <RandomNG>
					if ((twraw % 10) < 9) {														// 90% chance for shrinking width to 3 - 20
 8000e68:	4b4e      	ldr	r3, [pc, #312]	@ (8000fa4 <gamecyc+0x234>)
 8000e6a:	fba3 2300 	umull	r2, r3, r3, r0
 8000e6e:	08db      	lsrs	r3, r3, #3
 8000e70:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000e74:	eba0 0343 	sub.w	r3, r0, r3, lsl #1
 8000e78:	2b08      	cmp	r3, #8
 8000e7a:	d847      	bhi.n	8000f0c <gamecyc+0x19c>
						tblenset = (twraw % (20)) + 3;
 8000e7c:	4b49      	ldr	r3, [pc, #292]	@ (8000fa4 <gamecyc+0x234>)
 8000e7e:	fba3 2300 	umull	r2, r3, r3, r0
 8000e82:	091b      	lsrs	r3, r3, #4
 8000e84:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000e88:	eba0 0383 	sub.w	r3, r0, r3, lsl #2
 8000e8c:	b29d      	uxth	r5, r3
 8000e8e:	3503      	adds	r5, #3
 8000e90:	b2ad      	uxth	r5, r5
					tuberand(&gap);																// gappos gappos = tuberand(&gap);
 8000e92:	a807      	add	r0, sp, #28
 8000e94:	f7ff fdca 	bl	8000a2c <tuberand>
					tubemap[counters.tubecoun].gaph = gap.gaphigh;								// save new tube pair data
 8000e98:	f89d 602c 	ldrb.w	r6, [sp, #44]	@ 0x2c
 8000e9c:	f89d 201d 	ldrb.w	r2, [sp, #29]
 8000ea0:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8000ea4:	a90c      	add	r1, sp, #48	@ 0x30
 8000ea6:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8000eaa:	f803 2c2d 	strb.w	r2, [r3, #-45]
					tubemap[counters.tubecoun].gapl = gap.gaplow;								//
 8000eae:	f89d 101c 	ldrb.w	r1, [sp, #28]
 8000eb2:	f803 1c2e 	strb.w	r1, [r3, #-46]
					tubemap[counters.tubecoun].x = 319;											// save start pos
 8000eb6:	f240 113f 	movw	r1, #319	@ 0x13f
 8000eba:	f823 1c30 	strh.w	r1, [r3, #-48]
					tubemap[counters.tubecoun].tublength = tblenset + flpy_width + 2;
 8000ebe:	1da9      	adds	r1, r5, #6
 8000ec0:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8000ec4:	a80c      	add	r0, sp, #48	@ 0x30
 8000ec6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000eca:	f803 1c2c 	strb.w	r1, [r3, #-44]
					Line(i,0,gap.gaphigh, tubecolor);												// draw first pair tube lines
 8000ece:	f248 1360 	movw	r3, #33120	@ 0x8160
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	4620      	mov	r0, r4
 8000ed6:	f7ff fa63 	bl	80003a0 <Line>
					Line(i,gap.gaplow,239, tubecolor);											//
 8000eda:	f248 1360 	movw	r3, #33120	@ 0x8160
 8000ede:	22ef      	movs	r2, #239	@ 0xef
 8000ee0:	f89d 101c 	ldrb.w	r1, [sp, #28]
 8000ee4:	4620      	mov	r0, r4
 8000ee6:	f7ff fa5b 	bl	80003a0 <Line>
					Line(i,gap.gaphigh,gap.gaplow,BLACK);										// fill the gap with black
 8000eea:	23a4      	movs	r3, #164	@ 0xa4
 8000eec:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8000ef0:	f89d 101d 	ldrb.w	r1, [sp, #29]
 8000ef4:	4620      	mov	r0, r4
 8000ef6:	f7ff fa53 	bl	80003a0 <Line>
					counters.tbcoun = 0;                                      					// count passed empty rotations
 8000efa:	2300      	movs	r3, #0
 8000efc:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
					counters.tblen = 0;                                    						// make tube thickness function start
 8000f00:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
					counters.tubecoun++;                             							// write next time into second space of the struct arry
 8000f04:	3601      	adds	r6, #1
 8000f06:	f88d 602c 	strb.w	r6, [sp, #44]	@ 0x2c
 8000f0a:	e7a3      	b.n	8000e54 <gamecyc+0xe4>
						tblenset = (twraw % (LCD_width - 4)) + 1;								// shrink from 1 - 315
 8000f0c:	4b26      	ldr	r3, [pc, #152]	@ (8000fa8 <gamecyc+0x238>)
 8000f0e:	fba3 2300 	umull	r2, r3, r3, r0
 8000f12:	1ac2      	subs	r2, r0, r3
 8000f14:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8000f18:	0a1b      	lsrs	r3, r3, #8
 8000f1a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000f1e:	ebc3 1383 	rsb	r3, r3, r3, lsl #6
 8000f22:	1ac3      	subs	r3, r0, r3
 8000f24:	b29d      	uxth	r5, r3
 8000f26:	3501      	adds	r5, #1
 8000f28:	b2ad      	uxth	r5, r5
 8000f2a:	e7b2      	b.n	8000e92 <gamecyc+0x122>
					Line(i,0,tubemap[counters.tubecoun - 1].gapl, tubecolor);						//
 8000f2c:	f89d 602c 	ldrb.w	r6, [sp, #44]	@ 0x2c
 8000f30:	3e01      	subs	r6, #1
 8000f32:	0077      	lsls	r7, r6, #1
 8000f34:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 8000f38:	ab0c      	add	r3, sp, #48	@ 0x30
 8000f3a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8000f3e:	f248 1360 	movw	r3, #33120	@ 0x8160
 8000f42:	f812 2c2e 	ldrb.w	r2, [r2, #-46]
 8000f46:	2100      	movs	r1, #0
 8000f48:	4620      	mov	r0, r4
 8000f4a:	f7ff fa29 	bl	80003a0 <Line>
					Line(i,tubemap[counters.tubecoun - 1].gaph,LCD_height, tubecolor);				//
 8000f4e:	4437      	add	r7, r6
 8000f50:	ab0c      	add	r3, sp, #48	@ 0x30
 8000f52:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 8000f56:	f248 1360 	movw	r3, #33120	@ 0x8160
 8000f5a:	22ef      	movs	r2, #239	@ 0xef
 8000f5c:	f817 1c2d 	ldrb.w	r1, [r7, #-45]
 8000f60:	4620      	mov	r0, r4
 8000f62:	f7ff fa1d 	bl	80003a0 <Line>
					Line(i,gap.gaphigh,gap.gaplow,BLACK);										// only fill parts, that havn't been already written with tubes
 8000f66:	23a4      	movs	r3, #164	@ 0xa4
 8000f68:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8000f6c:	f89d 101d 	ldrb.w	r1, [sp, #29]
 8000f70:	4620      	mov	r0, r4
 8000f72:	f7ff fa15 	bl	80003a0 <Line>
 8000f76:	e76d      	b.n	8000e54 <gamecyc+0xe4>
					Line(i,0,LCD_height,BLACK);
 8000f78:	23a4      	movs	r3, #164	@ 0xa4
 8000f7a:	22ef      	movs	r2, #239	@ 0xef
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	4620      	mov	r0, r4
 8000f80:	f7ff fa0e 	bl	80003a0 <Line>
 8000f84:	e766      	b.n	8000e54 <gamecyc+0xe4>
				if(i == LCD_width){i = 0; if(tubespace > 50){tubespace--;}} 					 // make tubespace smaller over time
 8000f86:	4b05      	ldr	r3, [pc, #20]	@ (8000f9c <gamecyc+0x22c>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	2b32      	cmp	r3, #50	@ 0x32
 8000f8c:	d904      	bls.n	8000f98 <gamecyc+0x228>
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	4a02      	ldr	r2, [pc, #8]	@ (8000f9c <gamecyc+0x22c>)
 8000f92:	7013      	strb	r3, [r2, #0]
 8000f94:	2400      	movs	r4, #0
 8000f96:	e762      	b.n	8000e5e <gamecyc+0xee>
 8000f98:	2400      	movs	r4, #0
 8000f9a:	e760      	b.n	8000e5e <gamecyc+0xee>
 8000f9c:	24000031 	.word	0x24000031
 8000fa0:	24000030 	.word	0x24000030
 8000fa4:	cccccccd 	.word	0xcccccccd
 8000fa8:	a01a01a1 	.word	0xa01a01a1

08000fac <main>:
int main() {
 8000fac:	b508      	push	{r3, lr}
    DWT_Init();
 8000fae:	f7ff fc39 	bl	8000824 <DWT_Init>
    board_voltage();
 8000fb2:	f7ff fadd 	bl	8000570 <board_voltage>
	board_oclk(1);      // 1 means HSE -> 480MHz clk freq
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	f7ff fb02 	bl	80005c0 <board_oclk>
	board_start();
 8000fbc:	f7ff fbd2 	bl	8000764 <board_start>
    LCD_Init();
 8000fc0:	f7ff fa88 	bl	80004d4 <LCD_Init>
    delay(1000);
 8000fc4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fc8:	f7ff fc40 	bl	800084c <delay>
    gamecyc();
 8000fcc:	f7ff fed0 	bl	8000d70 <gamecyc>

08000fd0 <Reset_Handler>:
*/

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
 Reset_Handler:   ldr   r0, =_estack
 8000fd0:	480d      	ldr	r0, [pc, #52]	@ (8001008 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fd2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fd4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fd8:	480c      	ldr	r0, [pc, #48]	@ (800100c <LoopForever+0x6>)
  ldr r1, =_edata
 8000fda:	490d      	ldr	r1, [pc, #52]	@ (8001010 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fdc:	4a0d      	ldr	r2, [pc, #52]	@ (8001014 <LoopForever+0xe>)
  movs r3, #0
 8000fde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fe0:	e002      	b.n	8000fe8 <LoopCopyDataInit>

08000fe2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fe2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fe4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fe6:	3304      	adds	r3, #4

08000fe8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fe8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fec:	d3f9      	bcc.n	8000fe2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fee:	4a0a      	ldr	r2, [pc, #40]	@ (8001018 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ff0:	4c0a      	ldr	r4, [pc, #40]	@ (800101c <LoopForever+0x16>)
  movs r3, #0
 8000ff2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ff4:	e001      	b.n	8000ffa <LoopFillZerobss>

08000ff6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ff6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ff8:	3204      	adds	r2, #4

08000ffa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ffa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ffc:	d3fb      	bcc.n	8000ff6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ffe:	f000 f811 	bl	8001024 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001002:	f7ff ffd3 	bl	8000fac <main>

08001006 <LoopForever>:

LoopForever:
  b LoopForever
 8001006:	e7fe      	b.n	8001006 <LoopForever>
 Reset_Handler:   ldr   r0, =_estack
 8001008:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800100c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001010:	24000004 	.word	0x24000004
  ldr r2, =_sidata
 8001014:	08001098 	.word	0x08001098
  ldr r2, =_sbss
 8001018:	24000004 	.word	0x24000004
  ldr r4, =_ebss
 800101c:	24000034 	.word	0x24000034

08001020 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001020:	e7fe      	b.n	8001020 <ADC1_2_IRQHandler>
	...

08001024 <__libc_init_array>:
 8001024:	b570      	push	{r4, r5, r6, lr}
 8001026:	4d0d      	ldr	r5, [pc, #52]	@ (800105c <__libc_init_array+0x38>)
 8001028:	4c0d      	ldr	r4, [pc, #52]	@ (8001060 <__libc_init_array+0x3c>)
 800102a:	1b64      	subs	r4, r4, r5
 800102c:	10a4      	asrs	r4, r4, #2
 800102e:	2600      	movs	r6, #0
 8001030:	42a6      	cmp	r6, r4
 8001032:	d109      	bne.n	8001048 <__libc_init_array+0x24>
 8001034:	4d0b      	ldr	r5, [pc, #44]	@ (8001064 <__libc_init_array+0x40>)
 8001036:	4c0c      	ldr	r4, [pc, #48]	@ (8001068 <__libc_init_array+0x44>)
 8001038:	f000 f818 	bl	800106c <_init>
 800103c:	1b64      	subs	r4, r4, r5
 800103e:	10a4      	asrs	r4, r4, #2
 8001040:	2600      	movs	r6, #0
 8001042:	42a6      	cmp	r6, r4
 8001044:	d105      	bne.n	8001052 <__libc_init_array+0x2e>
 8001046:	bd70      	pop	{r4, r5, r6, pc}
 8001048:	f855 3b04 	ldr.w	r3, [r5], #4
 800104c:	4798      	blx	r3
 800104e:	3601      	adds	r6, #1
 8001050:	e7ee      	b.n	8001030 <__libc_init_array+0xc>
 8001052:	f855 3b04 	ldr.w	r3, [r5], #4
 8001056:	4798      	blx	r3
 8001058:	3601      	adds	r6, #1
 800105a:	e7f2      	b.n	8001042 <__libc_init_array+0x1e>
 800105c:	08001090 	.word	0x08001090
 8001060:	08001090 	.word	0x08001090
 8001064:	08001090 	.word	0x08001090
 8001068:	08001094 	.word	0x08001094

0800106c <_init>:
 800106c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800106e:	bf00      	nop
 8001070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001072:	bc08      	pop	{r3}
 8001074:	469e      	mov	lr, r3
 8001076:	4770      	bx	lr

08001078 <_fini>:
 8001078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800107a:	bf00      	nop
 800107c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800107e:	bc08      	pop	{r3}
 8001080:	469e      	mov	lr, r3
 8001082:	4770      	bx	lr
