
H755_ILI9341_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a00  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000c98  08000ca0  00001ca0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000c98  08000c98  00001ca0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000c98  08000c98  00001ca0  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000c98  08000ca0  00001ca0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c98  08000c98  00001c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000c9c  08000c9c  00001c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  24000000  24000000  00001ca0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  24000000  08000ca0  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000028  08000ca0  00002028  2**0
                  ALLOC
 11 .ARM.attributes 0000002c  00000000  00000000  00001ca0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000036a4  00000000  00000000  00001ccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000862  00000000  00000000  00005370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 000008e8  00000000  00000000  00005bd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000148  00000000  00000000  000064c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001bc  00000000  00000000  00006608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002acdc  00000000  00000000  000067c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000370d  00000000  00000000  000314a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f3616  00000000  00000000  00034bad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001281c3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000002b8  00000000  00000000  00128208  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  001284c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000000 	.word	0x24000000
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08000c80 	.word	0x08000c80

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000004 	.word	0x24000004
 80002d4:	08000c80 	.word	0x08000c80

080002d8 <scr_area>:
#define LCD_RST  GPIO_ODR_OD3 //Shield Reset




void scr_area(uint16_t topcorn, uint16_t Area, uint16_t bottomcorn){
 80002d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}



void LCD_command_write(const uint8_t command){
  //  p. 11
  GPIOE->ODR &= ~LCD_RS;
 80002da:	4c1b      	ldr	r4, [pc, #108]	@ (8000348 <scr_area+0x70>)
void scr_area(uint16_t topcorn, uint16_t Area, uint16_t bottomcorn){
 80002dc:	4607      	mov	r7, r0

  LCD_write(command);
 80002de:	2033      	movs	r0, #51	@ 0x33
void scr_area(uint16_t topcorn, uint16_t Area, uint16_t bottomcorn){
 80002e0:	460e      	mov	r6, r1
  GPIOE->ODR &= ~LCD_RS;
 80002e2:	6963      	ldr	r3, [r4, #20]
void scr_area(uint16_t topcorn, uint16_t Area, uint16_t bottomcorn){
 80002e4:	4615      	mov	r5, r2
  GPIOE->ODR &= ~LCD_RS;
 80002e6:	f023 0304 	bic.w	r3, r3, #4
 80002ea:	6163      	str	r3, [r4, #20]
  LCD_write(command);
 80002ec:	f000 f96a 	bl	80005c4 <LCD_write>
}

void LCD_data_write(const uint8_t data){
  //  p. 11
	GPIOE->ODR |= LCD_RS;
 80002f0:	6963      	ldr	r3, [r4, #20]

  LCD_write(data);
 80002f2:	0a38      	lsrs	r0, r7, #8
	GPIOE->ODR |= LCD_RS;
 80002f4:	f043 0304 	orr.w	r3, r3, #4
 80002f8:	6163      	str	r3, [r4, #20]
  LCD_write(data);
 80002fa:	f000 f963 	bl	80005c4 <LCD_write>
	GPIOE->ODR |= LCD_RS;
 80002fe:	6963      	ldr	r3, [r4, #20]
  LCD_write(data);
 8000300:	b2f8      	uxtb	r0, r7
	GPIOE->ODR |= LCD_RS;
 8000302:	f043 0304 	orr.w	r3, r3, #4
 8000306:	6163      	str	r3, [r4, #20]
  LCD_write(data);
 8000308:	f000 f95c 	bl	80005c4 <LCD_write>
	GPIOE->ODR |= LCD_RS;
 800030c:	6963      	ldr	r3, [r4, #20]
  LCD_write(data);
 800030e:	0a30      	lsrs	r0, r6, #8
	GPIOE->ODR |= LCD_RS;
 8000310:	f043 0304 	orr.w	r3, r3, #4
 8000314:	6163      	str	r3, [r4, #20]
  LCD_write(data);
 8000316:	f000 f955 	bl	80005c4 <LCD_write>
	GPIOE->ODR |= LCD_RS;
 800031a:	6963      	ldr	r3, [r4, #20]
  LCD_write(data);
 800031c:	b2f0      	uxtb	r0, r6
	GPIOE->ODR |= LCD_RS;
 800031e:	f043 0304 	orr.w	r3, r3, #4
 8000322:	6163      	str	r3, [r4, #20]
  LCD_write(data);
 8000324:	f000 f94e 	bl	80005c4 <LCD_write>
	GPIOE->ODR |= LCD_RS;
 8000328:	6963      	ldr	r3, [r4, #20]
  LCD_write(data);
 800032a:	0a28      	lsrs	r0, r5, #8
	GPIOE->ODR |= LCD_RS;
 800032c:	f043 0304 	orr.w	r3, r3, #4
 8000330:	6163      	str	r3, [r4, #20]
  LCD_write(data);
 8000332:	f000 f947 	bl	80005c4 <LCD_write>
	GPIOE->ODR |= LCD_RS;
 8000336:	6963      	ldr	r3, [r4, #20]
  LCD_write(data);
 8000338:	b2e8      	uxtb	r0, r5
	GPIOE->ODR |= LCD_RS;
 800033a:	f043 0304 	orr.w	r3, r3, #4
 800033e:	6163      	str	r3, [r4, #20]
}
 8000340:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  LCD_write(data);
 8000344:	f000 b93e 	b.w	80005c4 <LCD_write>
 8000348:	58021000 	.word	0x58021000

0800034c <LCD_Scroll>:
	GPIOE->ODR &= ~LCD_CS;// Chip Select active
 800034c:	4936      	ldr	r1, [pc, #216]	@ (8000428 <LCD_Scroll+0xdc>)

// inline cause function to be integrated directly in funct where it was called -> speed optimized -> higher accuracy
// inline cause invisibility in other source files whe def in a source file
#include <stdint.h>
inline void delay_cycles(uint32_t cycles){     // Timer in cpu clk cycl
    uint32_t start = DWT->CYCCNT;              // register space for cycle counts    takes val of start
 800034e:	4a37      	ldr	r2, [pc, #220]	@ (800042c <LCD_Scroll+0xe0>)
void LCD_Scroll(const uint16_t scr_with){ //shifting the starting RAM addr negative
 8000350:	b538      	push	{r3, r4, r5, lr}
	GPIOE->ODR &= ~LCD_CS;// Chip Select active
 8000352:	694b      	ldr	r3, [r1, #20]
void LCD_Scroll(const uint16_t scr_with){ //shifting the starting RAM addr negative
 8000354:	4605      	mov	r5, r0
	GPIOE->ODR &= ~LCD_CS;// Chip Select active
 8000356:	f023 0310 	bic.w	r3, r3, #16
 800035a:	614b      	str	r3, [r1, #20]
 800035c:	6851      	ldr	r1, [r2, #4]
    while ((DWT->CYCCNT - start) < cycles){    // wait till specif numb of cycles passed
 800035e:	6853      	ldr	r3, [r2, #4]
 8000360:	4299      	cmp	r1, r3
 8000362:	d103      	bne.n	800036c <LCD_Scroll+0x20>
        __NOP();                               // make it not optimizeable
 8000364:	bf00      	nop
    while ((DWT->CYCCNT - start) < cycles){    // wait till specif numb of cycles passed
 8000366:	6853      	ldr	r3, [r2, #4]
 8000368:	4299      	cmp	r1, r3
 800036a:	d0fb      	beq.n	8000364 <LCD_Scroll+0x18>
  GPIOE->ODR &= ~LCD_RS;
 800036c:	4c2e      	ldr	r4, [pc, #184]	@ (8000428 <LCD_Scroll+0xdc>)
  LCD_write(command);
 800036e:	202a      	movs	r0, #42	@ 0x2a
  GPIOE->ODR &= ~LCD_RS;
 8000370:	6963      	ldr	r3, [r4, #20]
 8000372:	f023 0304 	bic.w	r3, r3, #4
 8000376:	6163      	str	r3, [r4, #20]
  LCD_write(command);
 8000378:	f000 f924 	bl	80005c4 <LCD_write>
	GPIOE->ODR |= LCD_RS;
 800037c:	6963      	ldr	r3, [r4, #20]
  LCD_write(data);
 800037e:	2000      	movs	r0, #0
	GPIOE->ODR |= LCD_RS;
 8000380:	f043 0304 	orr.w	r3, r3, #4
 8000384:	6163      	str	r3, [r4, #20]
  LCD_write(data);
 8000386:	f000 f91d 	bl	80005c4 <LCD_write>
	GPIOE->ODR |= LCD_RS;
 800038a:	6963      	ldr	r3, [r4, #20]
  LCD_write(data);
 800038c:	2000      	movs	r0, #0
	GPIOE->ODR |= LCD_RS;
 800038e:	f043 0304 	orr.w	r3, r3, #4
 8000392:	6163      	str	r3, [r4, #20]
  LCD_write(data);
 8000394:	f000 f916 	bl	80005c4 <LCD_write>
	GPIOE->ODR |= LCD_RS;
 8000398:	6963      	ldr	r3, [r4, #20]
  LCD_write(data);
 800039a:	2000      	movs	r0, #0
	GPIOE->ODR |= LCD_RS;
 800039c:	f043 0304 	orr.w	r3, r3, #4
 80003a0:	6163      	str	r3, [r4, #20]
  LCD_write(data);
 80003a2:	f000 f90f 	bl	80005c4 <LCD_write>
	GPIOE->ODR |= LCD_RS;
 80003a6:	6963      	ldr	r3, [r4, #20]
  LCD_write(data);
 80003a8:	20f0      	movs	r0, #240	@ 0xf0
	GPIOE->ODR |= LCD_RS;
 80003aa:	f043 0304 	orr.w	r3, r3, #4
 80003ae:	6163      	str	r3, [r4, #20]
  LCD_write(data);
 80003b0:	f000 f908 	bl	80005c4 <LCD_write>
  GPIOE->ODR &= ~LCD_RS;
 80003b4:	6963      	ldr	r3, [r4, #20]
  LCD_write(command);
 80003b6:	202b      	movs	r0, #43	@ 0x2b
  GPIOE->ODR &= ~LCD_RS;
 80003b8:	f023 0304 	bic.w	r3, r3, #4
 80003bc:	6163      	str	r3, [r4, #20]
  LCD_write(command);
 80003be:	f000 f901 	bl	80005c4 <LCD_write>
	GPIOE->ODR |= LCD_RS;
 80003c2:	6963      	ldr	r3, [r4, #20]
  LCD_write(data);
 80003c4:	2000      	movs	r0, #0
	GPIOE->ODR |= LCD_RS;
 80003c6:	f043 0304 	orr.w	r3, r3, #4
 80003ca:	6163      	str	r3, [r4, #20]
  LCD_write(data);
 80003cc:	f000 f8fa 	bl	80005c4 <LCD_write>
	GPIOE->ODR |= LCD_RS;
 80003d0:	6963      	ldr	r3, [r4, #20]
  LCD_write(data);
 80003d2:	2000      	movs	r0, #0
	GPIOE->ODR |= LCD_RS;
 80003d4:	f043 0304 	orr.w	r3, r3, #4
 80003d8:	6163      	str	r3, [r4, #20]
  LCD_write(data);
 80003da:	f000 f8f3 	bl	80005c4 <LCD_write>
	GPIOE->ODR |= LCD_RS;
 80003de:	6963      	ldr	r3, [r4, #20]
  LCD_write(data);
 80003e0:	2001      	movs	r0, #1
	GPIOE->ODR |= LCD_RS;
 80003e2:	f043 0304 	orr.w	r3, r3, #4
 80003e6:	6163      	str	r3, [r4, #20]
  LCD_write(data);
 80003e8:	f000 f8ec 	bl	80005c4 <LCD_write>
	GPIOE->ODR |= LCD_RS;
 80003ec:	6963      	ldr	r3, [r4, #20]
  LCD_write(data);
 80003ee:	2040      	movs	r0, #64	@ 0x40
	GPIOE->ODR |= LCD_RS;
 80003f0:	f043 0304 	orr.w	r3, r3, #4
 80003f4:	6163      	str	r3, [r4, #20]
  LCD_write(data);
 80003f6:	f000 f8e5 	bl	80005c4 <LCD_write>
  GPIOE->ODR &= ~LCD_RS;
 80003fa:	6963      	ldr	r3, [r4, #20]
  LCD_write(command);
 80003fc:	2037      	movs	r0, #55	@ 0x37
  GPIOE->ODR &= ~LCD_RS;
 80003fe:	f023 0304 	bic.w	r3, r3, #4
 8000402:	6163      	str	r3, [r4, #20]
  LCD_write(command);
 8000404:	f000 f8de 	bl	80005c4 <LCD_write>
	GPIOE->ODR |= LCD_RS;
 8000408:	6963      	ldr	r3, [r4, #20]
  LCD_write(data);
 800040a:	0a28      	lsrs	r0, r5, #8
	GPIOE->ODR |= LCD_RS;
 800040c:	f043 0304 	orr.w	r3, r3, #4
 8000410:	6163      	str	r3, [r4, #20]
  LCD_write(data);
 8000412:	f000 f8d7 	bl	80005c4 <LCD_write>
	GPIOE->ODR |= LCD_RS;
 8000416:	6963      	ldr	r3, [r4, #20]
  LCD_write(data);
 8000418:	b2e8      	uxtb	r0, r5
	GPIOE->ODR |= LCD_RS;
 800041a:	f043 0304 	orr.w	r3, r3, #4
 800041e:	6163      	str	r3, [r4, #20]
}
 8000420:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  LCD_write(data);
 8000424:	f000 b8ce 	b.w	80005c4 <LCD_write>
 8000428:	58021000 	.word	0x58021000
 800042c:	e0001000 	.word	0xe0001000

08000430 <LCD_command_write>:
  GPIOE->ODR &= ~LCD_RS;
 8000430:	4a03      	ldr	r2, [pc, #12]	@ (8000440 <LCD_command_write+0x10>)
 8000432:	6953      	ldr	r3, [r2, #20]
 8000434:	f023 0304 	bic.w	r3, r3, #4
 8000438:	6153      	str	r3, [r2, #20]
  LCD_write(command);
 800043a:	f000 b8c3 	b.w	80005c4 <LCD_write>
 800043e:	bf00      	nop
 8000440:	58021000 	.word	0x58021000

08000444 <LCD_data_write>:
	GPIOE->ODR |= LCD_RS;
 8000444:	4a03      	ldr	r2, [pc, #12]	@ (8000454 <LCD_data_write+0x10>)
 8000446:	6953      	ldr	r3, [r2, #20]
 8000448:	f043 0304 	orr.w	r3, r3, #4
 800044c:	6153      	str	r3, [r2, #20]
  LCD_write(data);
 800044e:	f000 b8b9 	b.w	80005c4 <LCD_write>
 8000452:	bf00      	nop
 8000454:	58021000 	.word	0x58021000

08000458 <Line>:
	LCD_data_write(color);

}


void Line(uint16_t x1, uint16_t y1, uint16_t y2, uint16_t color){
 8000458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint32_t pixels = (y2 - y1 + 1);
	const int a = 44;
	GPIOE->ODR &= ~LCD_CS;// Chip Select active
 800045c:	f8df 915c 	ldr.w	r9, [pc, #348]	@ 80005bc <Line+0x164>
void Line(uint16_t x1, uint16_t y1, uint16_t y2, uint16_t color){
 8000460:	461d      	mov	r5, r3
 8000462:	4604      	mov	r4, r0
  LCD_write(command);
 8000464:	202a      	movs	r0, #42	@ 0x2a
	GPIOE->ODR &= ~LCD_CS;// Chip Select active
 8000466:	f8d9 3014 	ldr.w	r3, [r9, #20]
void Line(uint16_t x1, uint16_t y1, uint16_t y2, uint16_t color){
 800046a:	4617      	mov	r7, r2
 800046c:	4688      	mov	r8, r1
	const uint32_t pixels = (y2 - y1 + 1);
 800046e:	1a56      	subs	r6, r2, r1
	GPIOE->ODR &= ~LCD_CS;// Chip Select active
 8000470:	f023 0310 	bic.w	r3, r3, #16
 8000474:	f8c9 3014 	str.w	r3, [r9, #20]
  GPIOE->ODR &= ~LCD_RS;
 8000478:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800047c:	f023 0304 	bic.w	r3, r3, #4
 8000480:	f8c9 3014 	str.w	r3, [r9, #20]
  LCD_write(command);
 8000484:	f000 f89e 	bl	80005c4 <LCD_write>
	GPIOE->ODR |= LCD_RS;
 8000488:	f8d9 3014 	ldr.w	r3, [r9, #20]
  LCD_write(data);
 800048c:	ea4f 2018 	mov.w	r0, r8, lsr #8
	GPIOE->ODR |= LCD_RS;
 8000490:	f043 0304 	orr.w	r3, r3, #4
 8000494:	f8c9 3014 	str.w	r3, [r9, #20]
  LCD_write(data);
 8000498:	f000 f894 	bl	80005c4 <LCD_write>
	GPIOE->ODR |= LCD_RS;
 800049c:	f8d9 3014 	ldr.w	r3, [r9, #20]
  LCD_write(data);
 80004a0:	fa5f f088 	uxtb.w	r0, r8
	GPIOE->ODR |= LCD_RS;
 80004a4:	f043 0304 	orr.w	r3, r3, #4
 80004a8:	f8c9 3014 	str.w	r3, [r9, #20]
  LCD_write(data);
 80004ac:	f000 f88a 	bl	80005c4 <LCD_write>
	GPIOE->ODR |= LCD_RS;
 80004b0:	f8d9 3014 	ldr.w	r3, [r9, #20]
  LCD_write(data);
 80004b4:	0a38      	lsrs	r0, r7, #8
	GPIOE->ODR |= LCD_RS;
 80004b6:	f043 0304 	orr.w	r3, r3, #4
 80004ba:	f8c9 3014 	str.w	r3, [r9, #20]
  LCD_write(data);
 80004be:	f000 f881 	bl	80005c4 <LCD_write>
	GPIOE->ODR |= LCD_RS;
 80004c2:	f8d9 3014 	ldr.w	r3, [r9, #20]
  LCD_write(data);
 80004c6:	b2f8      	uxtb	r0, r7
	GPIOE->ODR |= LCD_RS;
 80004c8:	f043 0304 	orr.w	r3, r3, #4
	LCD_data_write(y1 & 0xFF);       //lower 8 Bit sent to LCD
	LCD_data_write(y2 >> 8);  // start addr
	LCD_data_write(y2 & 0xFF);       // end addr

	LCD_command_write(0x2b);  //code for row address
	LCD_data_write(x1 >> 8);  //
 80004cc:	0a27      	lsrs	r7, r4, #8
	LCD_data_write(x1 & 0xFF);       //
 80004ce:	b2e4      	uxtb	r4, r4
	GPIOE->ODR |= LCD_RS;
 80004d0:	f8c9 3014 	str.w	r3, [r9, #20]
  LCD_write(data);
 80004d4:	f000 f876 	bl	80005c4 <LCD_write>
  GPIOE->ODR &= ~LCD_RS;
 80004d8:	f8d9 3014 	ldr.w	r3, [r9, #20]
  LCD_write(command);
 80004dc:	202b      	movs	r0, #43	@ 0x2b
  GPIOE->ODR &= ~LCD_RS;
 80004de:	f023 0304 	bic.w	r3, r3, #4
 80004e2:	f8c9 3014 	str.w	r3, [r9, #20]
  LCD_write(command);
 80004e6:	f000 f86d 	bl	80005c4 <LCD_write>
	GPIOE->ODR |= LCD_RS;
 80004ea:	f8d9 3014 	ldr.w	r3, [r9, #20]
  LCD_write(data);
 80004ee:	4638      	mov	r0, r7
	GPIOE->ODR |= LCD_RS;
 80004f0:	f043 0304 	orr.w	r3, r3, #4
 80004f4:	f8c9 3014 	str.w	r3, [r9, #20]
  LCD_write(data);
 80004f8:	f000 f864 	bl	80005c4 <LCD_write>
	GPIOE->ODR |= LCD_RS;
 80004fc:	f8d9 3014 	ldr.w	r3, [r9, #20]
  LCD_write(data);
 8000500:	4620      	mov	r0, r4
	GPIOE->ODR |= LCD_RS;
 8000502:	f043 0304 	orr.w	r3, r3, #4
 8000506:	f8c9 3014 	str.w	r3, [r9, #20]
  LCD_write(data);
 800050a:	f000 f85b 	bl	80005c4 <LCD_write>
	GPIOE->ODR |= LCD_RS;
 800050e:	f8d9 3014 	ldr.w	r3, [r9, #20]
  LCD_write(data);
 8000512:	4638      	mov	r0, r7
	GPIOE->ODR |= LCD_RS;
 8000514:	f043 0304 	orr.w	r3, r3, #4
 8000518:	f8c9 3014 	str.w	r3, [r9, #20]
  LCD_write(data);
 800051c:	f000 f852 	bl	80005c4 <LCD_write>
	GPIOE->ODR |= LCD_RS;
 8000520:	f8d9 3014 	ldr.w	r3, [r9, #20]
  LCD_write(data);
 8000524:	4620      	mov	r0, r4
	GPIOE->ODR |= LCD_RS;
 8000526:	f043 0304 	orr.w	r3, r3, #4
 800052a:	f8c9 3014 	str.w	r3, [r9, #20]
  LCD_write(data);
 800052e:	f000 f849 	bl	80005c4 <LCD_write>
  GPIOE->ODR &= ~LCD_RS;
 8000532:	f8d9 3014 	ldr.w	r3, [r9, #20]
  LCD_write(command);
 8000536:	202c      	movs	r0, #44	@ 0x2c
  GPIOE->ODR &= ~LCD_RS;
 8000538:	f023 0304 	bic.w	r3, r3, #4
 800053c:	f8c9 3014 	str.w	r3, [r9, #20]
  LCD_write(command);
 8000540:	f000 f840 	bl	80005c4 <LCD_write>
	LCD_data_write(x1 >> 8);  //
	LCD_data_write(x1 & 0xFF);       //

	LCD_command_write(0x2c);  // Memory Write
	for(int i = 0; i < pixels; i++){
 8000544:	1c73      	adds	r3, r6, #1
 8000546:	d036      	beq.n	80005b6 <Line+0x15e>
		LCD_data_write(color >> 8);
 8000548:	0a2f      	lsrs	r7, r5, #8
	for(int i = 0; i < pixels; i++){
 800054a:	2400      	movs	r4, #0
		delay_cycles(a);
		LCD_data_write(color & 0xFF);
 800054c:	b2ed      	uxtb	r5, r5
    uint32_t start = DWT->CYCCNT;              // register space for cycle counts    takes val of start
 800054e:	f8df 8070 	ldr.w	r8, [pc, #112]	@ 80005c0 <Line+0x168>
	GPIOE->ODR |= LCD_RS;
 8000552:	f8d9 3014 	ldr.w	r3, [r9, #20]
  LCD_write(data);
 8000556:	4638      	mov	r0, r7
	GPIOE->ODR |= LCD_RS;
 8000558:	f043 0304 	orr.w	r3, r3, #4
 800055c:	f8c9 3014 	str.w	r3, [r9, #20]
  LCD_write(data);
 8000560:	f000 f830 	bl	80005c4 <LCD_write>
 8000564:	f8d8 3004 	ldr.w	r3, [r8, #4]
    while ((DWT->CYCCNT - start) < cycles){    // wait till specif numb of cycles passed
 8000568:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800056c:	1ad2      	subs	r2, r2, r3
 800056e:	2a2b      	cmp	r2, #43	@ 0x2b
 8000570:	d805      	bhi.n	800057e <Line+0x126>
        __NOP();                               // make it not optimizeable
 8000572:	bf00      	nop
    while ((DWT->CYCCNT - start) < cycles){    // wait till specif numb of cycles passed
 8000574:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8000578:	1ad2      	subs	r2, r2, r3
 800057a:	2a2b      	cmp	r2, #43	@ 0x2b
 800057c:	d9f9      	bls.n	8000572 <Line+0x11a>
	GPIOE->ODR |= LCD_RS;
 800057e:	f8d9 3014 	ldr.w	r3, [r9, #20]
  LCD_write(data);
 8000582:	4628      	mov	r0, r5
	GPIOE->ODR |= LCD_RS;
 8000584:	f043 0304 	orr.w	r3, r3, #4
 8000588:	f8c9 3014 	str.w	r3, [r9, #20]
  LCD_write(data);
 800058c:	f000 f81a 	bl	80005c4 <LCD_write>
    uint32_t start = DWT->CYCCNT;              // register space for cycle counts    takes val of start
 8000590:	f8d8 3004 	ldr.w	r3, [r8, #4]
    while ((DWT->CYCCNT - start) < cycles){    // wait till specif numb of cycles passed
 8000594:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8000598:	1ad2      	subs	r2, r2, r3
 800059a:	2a2b      	cmp	r2, #43	@ 0x2b
 800059c:	d805      	bhi.n	80005aa <Line+0x152>
        __NOP();                               // make it not optimizeable
 800059e:	bf00      	nop
    while ((DWT->CYCCNT - start) < cycles){    // wait till specif numb of cycles passed
 80005a0:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80005a4:	1ad2      	subs	r2, r2, r3
 80005a6:	2a2b      	cmp	r2, #43	@ 0x2b
 80005a8:	d9f9      	bls.n	800059e <Line+0x146>
	for(int i = 0; i < pixels; i++){
 80005aa:	42a6      	cmp	r6, r4
 80005ac:	f104 0301 	add.w	r3, r4, #1
 80005b0:	d001      	beq.n	80005b6 <Line+0x15e>
 80005b2:	461c      	mov	r4, r3
 80005b4:	e7cd      	b.n	8000552 <Line+0xfa>
		delay_cycles(a);
	}
}
 80005b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80005ba:	bf00      	nop
 80005bc:	58021000 	.word	0x58021000
 80005c0:	e0001000 	.word	0xe0001000

080005c4 <LCD_write>:
#define LCD_RST  GPIO_ODR_OD3 //Shield Reset



 void LCD_write(const uint8_t data){ // inline cause less overhead maybe
	GPIOE->ODR &= ~LCD_WR; // WR = 0
 80005c4:	4b05      	ldr	r3, [pc, #20]	@ (80005dc <LCD_write+0x18>)
	// Function Pins                        RD|WR|RS|CS|RST
	//                                      A3|C0|C3|E4|C2
    //
    //

	GPIOD->ODR = data;
 80005c6:	4906      	ldr	r1, [pc, #24]	@ (80005e0 <LCD_write+0x1c>)
	GPIOE->ODR &= ~LCD_WR; // WR = 0
 80005c8:	695a      	ldr	r2, [r3, #20]
 80005ca:	f022 0220 	bic.w	r2, r2, #32
 80005ce:	615a      	str	r2, [r3, #20]
	GPIOD->ODR = data;
 80005d0:	6148      	str	r0, [r1, #20]
        GPIOA->BSRR = (clearMaskA << 16) | setMaskA;
    }
*/

   // delay_cycles(1); //necces for make TFT working
    GPIOE->ODR |= LCD_WR; // send data after (rising edge)
 80005d2:	695a      	ldr	r2, [r3, #20]
 80005d4:	f042 0220 	orr.w	r2, r2, #32
 80005d8:	615a      	str	r2, [r3, #20]
   // delay_cycles(1);
}
 80005da:	4770      	bx	lr
 80005dc:	58021000 	.word	0x58021000
 80005e0:	58020c00 	.word	0x58020c00

080005e4 <LCD_Init>:





void LCD_Init(void){
 80005e4:	b510      	push	{r4, lr}
 	//Reset TFT
 	GPIOE->ODR |= LCD_RST; //active low
 80005e6:	4c26      	ldr	r4, [pc, #152]	@ (8000680 <LCD_Init+0x9c>)
 	delay(5);
 80005e8:	2005      	movs	r0, #5
 	GPIOE->ODR |= LCD_RST; //active low
 80005ea:	6963      	ldr	r3, [r4, #20]
 80005ec:	f043 0308 	orr.w	r3, r3, #8
 80005f0:	6163      	str	r3, [r4, #20]
 	delay(5);
 80005f2:	f000 f999 	bl	8000928 <delay>
 	GPIOE->ODR &= ~LCD_RST; //reset TFT
 80005f6:	6963      	ldr	r3, [r4, #20]
 	delay(15);
 80005f8:	200f      	movs	r0, #15
 	GPIOE->ODR &= ~LCD_RST; //reset TFT
 80005fa:	f023 0308 	bic.w	r3, r3, #8
 80005fe:	6163      	str	r3, [r4, #20]
 	delay(15);
 8000600:	f000 f992 	bl	8000928 <delay>
 	GPIOE->ODR |= LCD_RST; // turn off rst
 8000604:	6963      	ldr	r3, [r4, #20]
 	delay(15);
 8000606:	200f      	movs	r0, #15
 	GPIOE->ODR |= LCD_RST; // turn off rst
 8000608:	f043 0308 	orr.w	r3, r3, #8
 800060c:	6163      	str	r3, [r4, #20]
 	delay(15);
 800060e:	f000 f98b 	bl	8000928 <delay>

 	//The below is just preparation for Write Cycle Seq
 	GPIOE->ODR |= LCD_CS; //Chip-Select Active Low Signal
 8000612:	6963      	ldr	r3, [r4, #20]
 	GPIOE->ODR |= LCD_WR;
 	delay_u(2000);
 8000614:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 	GPIOE->ODR |= LCD_CS; //Chip-Select Active Low Signal
 8000618:	f043 0310 	orr.w	r3, r3, #16
 800061c:	6163      	str	r3, [r4, #20]
 	GPIOE->ODR |= LCD_WR;
 800061e:	6963      	ldr	r3, [r4, #20]
 8000620:	f043 0320 	orr.w	r3, r3, #32
 8000624:	6163      	str	r3, [r4, #20]
 	delay_u(2000);
 8000626:	f000 f9bb 	bl	80009a0 <delay_u>
 	GPIOE->ODR |= LCD_RD;
 800062a:	6963      	ldr	r3, [r4, #20]
 	GPIOE->ODR &= ~LCD_CS;  //cs low to actv ears of controller

 	LCD_command_write(0xC5);    //Test this Out | VCOM Control 1 : Colour Contrast Maybe
 800062c:	20c5      	movs	r0, #197	@ 0xc5
 	GPIOE->ODR |= LCD_RD;
 800062e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000632:	6163      	str	r3, [r4, #20]
 	GPIOE->ODR &= ~LCD_CS;  //cs low to actv ears of controller
 8000634:	6963      	ldr	r3, [r4, #20]
 8000636:	f023 0310 	bic.w	r3, r3, #16
 800063a:	6163      	str	r3, [r4, #20]
 	LCD_command_write(0xC5);    //Test this Out | VCOM Control 1 : Colour Contrast Maybe
 800063c:	f7ff fef8 	bl	8000430 <LCD_command_write>
 	LCD_data_write(0x54);       //VCOM H 1111111 0x7F
 8000640:	2054      	movs	r0, #84	@ 0x54
 8000642:	f7ff feff 	bl	8000444 <LCD_data_write>
 	LCD_data_write(0x00);       //VCOM L 0000000
 8000646:	2000      	movs	r0, #0
 8000648:	f7ff fefc 	bl	8000444 <LCD_data_write>

 	LCD_command_write(0x36);    //Memory Access Control | DataSheet Page 127
 800064c:	2036      	movs	r0, #54	@ 0x36
 800064e:	f7ff feef 	bl	8000430 <LCD_command_write>
 	///LCD_data_write(0x48);    //Adjust this value to get right color and starting point of x and y
 	LCD_data_write(0b100);  //
 8000652:	2004      	movs	r0, #4
 8000654:	f7ff fef6 	bl	8000444 <LCD_data_write>
 	LCD_command_write(0x3A);    //COLMOD: Pixel Format Set  p. 134
 8000658:	203a      	movs	r0, #58	@ 0x3a
 800065a:	f7ff fee9 	bl	8000430 <LCD_command_write>
 	LCD_data_write(0x55);       //16 Bit RGB and MCU
 800065e:	2055      	movs	r0, #85	@ 0x55
 8000660:	f7ff fef0 	bl	8000444 <LCD_data_write>
 	LCD_command_write(0x11);    //Sleep Out  p. 245
 8000664:	2011      	movs	r0, #17
 8000666:	f7ff fee3 	bl	8000430 <LCD_command_write>
 	delay(10);                  //wait at least 5ms after sleepout
 800066a:	200a      	movs	r0, #10
 800066c:	f000 f95c 	bl	8000928 <delay>
 	LCD_command_write(0x29);    //Display on.
 8000670:	2029      	movs	r0, #41	@ 0x29
 8000672:	f7ff fedd 	bl	8000430 <LCD_command_write>
 	LCD_command_write(0x2c);    //Memory Write | DataSheet Page 245
 8000676:	202c      	movs	r0, #44	@ 0x2c
 //	LCD_command_write(0x51);    // display brightness
 	//LCD_data_write(0xFF);       // brightness = 50%

 }
 8000678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 	LCD_command_write(0x2c);    //Memory Write | DataSheet Page 245
 800067c:	f7ff bed8 	b.w	8000430 <LCD_command_write>
 8000680:	58021000 	.word	0x58021000

08000684 <board_voltage>:
void board_voltage(void){
		volatile int b;


		//Instruction on p.329
	    RCC->APB4ENR |= 0b10;        //SYSCFGEN bit set  en clk for hw in moment of clk mux changeing
 8000684:	4810      	ldr	r0, [pc, #64]	@ (80006c8 <board_voltage+0x44>)
void board_voltage(void){
 8000686:	b082      	sub	sp, #8
	  /*  a = PWR->CR3;             // save register in a; to change things step by step. wrong values cause register Lock
	    a = a & ~(0b11 << 1);     // LDO and SD Bits off
	    a = (a |= (0b1       |     // BYPASS bit to 1
	    		 (0b1 << 5) |     // 2,5V input for step down conv
				 (0b1 << 3)));     // slightly raise of Vcore -> more stable*/
	    PWR->CR3 = (PWR->CR3 &
 8000688:	4a10      	ldr	r2, [pc, #64]	@ (80006cc <board_voltage+0x48>)
	    RCC->APB4ENR |= 0b10;        //SYSCFGEN bit set  en clk for hw in moment of clk mux changeing
 800068a:	f8d0 30f4 	ldr.w	r3, [r0, #244]	@ 0xf4


	    //Instruction on p. 297
		PWR->D3CR |= (0b11 << 14);   //VOS1 Mode set
		//while(1){a = ()
		SYSCFG->PWRCR |= 0b1;        //VOS0 Mode set (Boost Mode) BYPASS active neccesary
 800068e:	4910      	ldr	r1, [pc, #64]	@ (80006d0 <board_voltage+0x4c>)
	    RCC->APB4ENR |= 0b10;        //SYSCFGEN bit set  en clk for hw in moment of clk mux changeing
 8000690:	f043 0302 	orr.w	r3, r3, #2
 8000694:	f8c0 30f4 	str.w	r3, [r0, #244]	@ 0xf4
	    PWR->CR3 = (PWR->CR3 &
 8000698:	68d3      	ldr	r3, [r2, #12]
					PWR_CR3_SMPSEN               |
 800069a:	f023 032f 	bic.w	r3, r3, #47	@ 0x2f
 800069e:	f043 032d 	orr.w	r3, r3, #45	@ 0x2d
	    PWR->CR3 = (PWR->CR3 &
 80006a2:	60d3      	str	r3, [r2, #12]
		PWR->D3CR |= (0b11 << 14);   //VOS1 Mode set
 80006a4:	6993      	ldr	r3, [r2, #24]
 80006a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006aa:	6193      	str	r3, [r2, #24]
		SYSCFG->PWRCR |= 0b1;        //VOS0 Mode set (Boost Mode) BYPASS active neccesary
 80006ac:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 80006ae:	f043 0301 	orr.w	r3, r3, #1
 80006b2:	62cb      	str	r3, [r1, #44]	@ 0x2c
		while(1){b = (PWR->D3CR >> 13) & 0b1; if(b == 1){break;}}
 80006b4:	6993      	ldr	r3, [r2, #24]
 80006b6:	f3c3 3340 	ubfx	r3, r3, #13, #1
 80006ba:	9301      	str	r3, [sp, #4]
 80006bc:	9b01      	ldr	r3, [sp, #4]
 80006be:	2b01      	cmp	r3, #1
 80006c0:	d1f8      	bne.n	80006b4 <board_voltage+0x30>

}
 80006c2:	b002      	add	sp, #8
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	58024400 	.word	0x58024400
 80006cc:	58024800 	.word	0x58024800
 80006d0:	58000400 	.word	0x58000400

080006d4 <board_oclk>:


void board_oclk(volatile int clksel){
 80006d4:	b410      	push	{r4}
	volatile int a;

	FLASH->ACR &= ~(0b1);  //Flash standard 7 wait cycles refere page 166 in RM -> 6 WS now
 80006d6:	495a      	ldr	r1, [pc, #360]	@ (8000840 <board_oclk+0x16c>)
void board_oclk(volatile int clksel){
 80006d8:	b085      	sub	sp, #20


	RCC->CR &= ~(0b1 << 24);         // turn PLL1 off
 80006da:	4b5a      	ldr	r3, [pc, #360]	@ (8000844 <board_oclk+0x170>)
void board_oclk(volatile int clksel){
 80006dc:	9001      	str	r0, [sp, #4]
	FLASH->ACR &= ~(0b1);  //Flash standard 7 wait cycles refere page 166 in RM -> 6 WS now
 80006de:	680a      	ldr	r2, [r1, #0]
 80006e0:	f022 0201 	bic.w	r2, r2, #1
 80006e4:	600a      	str	r2, [r1, #0]
	RCC->CR &= ~(0b1 << 24);         // turn PLL1 off
 80006e6:	681a      	ldr	r2, [r3, #0]
 80006e8:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 80006ec:	601a      	str	r2, [r3, #0]

	RCC->D2CCIP2R |= 0b1 << 8;
 80006ee:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80006f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80006f4:	655a      	str	r2, [r3, #84]	@ 0x54

	if(clksel == 1){
 80006f6:	9a01      	ldr	r2, [sp, #4]
 80006f8:	2a01      	cmp	r2, #1
 80006fa:	d04c      	beq.n	8000796 <board_oclk+0xc2>


	else{
	  //HSI selected by default (00)
		//clk input divider -> 16MHz input
		RCC->PLLCKSELR &= ~((0b1 << 9) | (0b1 << 17) | (0b1 << 25));    // PRE 32 -> 0 for DIVM 1,2,3
 80006fc:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
		RCC->PLLCKSELR |= (0b1 << 6) | (0b1 << 14) | (0b1 << 22); // PRE = 4 for DIVM 1,2,3  HSI auto set as PLL input

		RCC->PLLCFGR |= (0b11 << 2) | //PLL input clk range 8 - 16
 80006fe:	f640 40cc 	movw	r0, #3276	@ 0xccc
		RCC->PLLCKSELR &= ~((0b1 << 9) | (0b1 << 17) | (0b1 << 25));    // PRE 32 -> 0 for DIVM 1,2,3
 8000702:	4951      	ldr	r1, [pc, #324]	@ (8000848 <board_oclk+0x174>)
		RCC->PLLCKSELR |= (0b1 << 6) | (0b1 << 14) | (0b1 << 22); // PRE = 4 for DIVM 1,2,3  HSI auto set as PLL input
 8000704:	4a51      	ldr	r2, [pc, #324]	@ (800084c <board_oclk+0x178>)
		RCC->PLLCKSELR &= ~((0b1 << 9) | (0b1 << 17) | (0b1 << 25));    // PRE 32 -> 0 for DIVM 1,2,3
 8000706:	4021      	ands	r1, r4
						  (0b11 << 16) | //DIVQ = 4 -> 220MHz
						  (0b11 << 24)); //DIVR = 4 -> 220MHz


		RCC->PLL2DIVR &= (0b1 << 31) | (0b1 << 23);  // all 0 without changing res Bits 31;23
		RCC->PLL2DIVR |= ((0b111011)   | //DIVN = 60  -> 960MHz
 8000708:	4c51      	ldr	r4, [pc, #324]	@ (8000850 <board_oclk+0x17c>)
		RCC->PLLCKSELR &= ~((0b1 << 9) | (0b1 << 17) | (0b1 << 25));    // PRE 32 -> 0 for DIVM 1,2,3
 800070a:	6299      	str	r1, [r3, #40]	@ 0x28
		RCC->PLLCKSELR |= (0b1 << 6) | (0b1 << 14) | (0b1 << 22); // PRE = 4 for DIVM 1,2,3  HSI auto set as PLL input
 800070c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800070e:	430a      	orrs	r2, r1
		RCC->PLL1DIVR &= (0b1 << 31) | (0b1 << 23);  // all 0 without changing res Bits 31;23
 8000710:	4950      	ldr	r1, [pc, #320]	@ (8000854 <board_oclk+0x180>)
		RCC->PLLCKSELR |= (0b1 << 6) | (0b1 << 14) | (0b1 << 22); // PRE = 4 for DIVM 1,2,3  HSI auto set as PLL input
 8000712:	629a      	str	r2, [r3, #40]	@ 0x28
		RCC->PLLCFGR |= (0b11 << 2) | //PLL input clk range 8 - 16
 8000714:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000716:	4310      	orrs	r0, r2
		RCC->PLL1DIVR |= ((0b110110)   | //DIVN = 54  -> 880MHz
 8000718:	4a4f      	ldr	r2, [pc, #316]	@ (8000858 <board_oclk+0x184>)
		RCC->PLLCFGR |= (0b11 << 2) | //PLL input clk range 8 - 16
 800071a:	62d8      	str	r0, [r3, #44]	@ 0x2c
		RCC->PLL1DIVR &= (0b1 << 31) | (0b1 << 23);  // all 0 without changing res Bits 31;23
 800071c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800071e:	4008      	ands	r0, r1
 8000720:	6318      	str	r0, [r3, #48]	@ 0x30
		RCC->PLL1DIVR |= ((0b110110)   | //DIVN = 54  -> 880MHz
 8000722:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8000724:	4302      	orrs	r2, r0
 8000726:	631a      	str	r2, [r3, #48]	@ 0x30
		RCC->PLL2DIVR &= (0b1 << 31) | (0b1 << 23);  // all 0 without changing res Bits 31;23
 8000728:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800072a:	400a      	ands	r2, r1
 800072c:	639a      	str	r2, [r3, #56]	@ 0x38
		RCC->PLL2DIVR |= ((0b111011)   | //DIVN = 60  -> 960MHz
 800072e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000730:	4322      	orrs	r2, r4
 8000732:	639a      	str	r2, [r3, #56]	@ 0x38
						 (0b11 << 24)); //DIVR = 4 -> 230MHz




		RCC->PLL3DIVR &= (0b1 << 31) | (0b1 << 23);  // all 0 without changing res Bits 31;23
 8000734:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000736:	400a      	ands	r2, r1
 8000738:	641a      	str	r2, [r3, #64]	@ 0x40
		RCC->PLL3DIVR |= ((0b111011)   | //DIVN = 60  -> 960MHz
 800073a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800073c:	4322      	orrs	r2, r4
 800073e:	641a      	str	r2, [r3, #64]	@ 0x40
						 (0b11 << 16) | //DIVQ = 4 -> 230MHz
						 (0b11 << 24)); //DIVR = 4 -> 230MHz



		RCC->CR |= (0b1 << 24);         // turn PLL1ON
 8000740:	681a      	ldr	r2, [r3, #0]
 8000742:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8000746:	601a      	str	r2, [r3, #0]

		while(1) // wait till Flag signaling PLL1 is on
		{a = (RCC->CR >> 25) & 0b1; if(a == 1){break;}}
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	f3c2 6240 	ubfx	r2, r2, #25, #1
 800074e:	9203      	str	r2, [sp, #12]
 8000750:	9a03      	ldr	r2, [sp, #12]
 8000752:	2a01      	cmp	r2, #1
 8000754:	d1f8      	bne.n	8000748 <board_oclk+0x74>


		RCC->D1CFGR = (RCC->D1CFGR & ~(0b1 << 11)) | 0b1001000; // HPRE /2 & D1PPRE /2
 8000756:	6998      	ldr	r0, [r3, #24]
 8000758:	4940      	ldr	r1, [pc, #256]	@ (800085c <board_oclk+0x188>)
		RCC->D2CFGR |= (0b10001 << 6); // D2PPRE & D2PPRE2 /2
		RCC->D3CFGR |= (0b1 << 6); // D3PPRE /2

		RCC->CFGR |= 0b11;
		while(1)
		{a = (RCC->CFGR >> 3) & 0b11; if(a == 3){break;}}  // wait till SWS == 0b11000 (PLL1 == input)
 800075a:	4a3a      	ldr	r2, [pc, #232]	@ (8000844 <board_oclk+0x170>)
		RCC->D1CFGR = (RCC->D1CFGR & ~(0b1 << 11)) | 0b1001000; // HPRE /2 & D1PPRE /2
 800075c:	4001      	ands	r1, r0
 800075e:	f041 0148 	orr.w	r1, r1, #72	@ 0x48
 8000762:	6199      	str	r1, [r3, #24]
		RCC->D2CFGR |= (0b10001 << 6); // D2PPRE & D2PPRE2 /2
 8000764:	69d9      	ldr	r1, [r3, #28]
 8000766:	f441 6188 	orr.w	r1, r1, #1088	@ 0x440
 800076a:	61d9      	str	r1, [r3, #28]
		RCC->D3CFGR |= (0b1 << 6); // D3PPRE /2
 800076c:	6a19      	ldr	r1, [r3, #32]
 800076e:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 8000772:	6219      	str	r1, [r3, #32]
		RCC->CFGR |= 0b11;
 8000774:	6919      	ldr	r1, [r3, #16]
 8000776:	f041 0103 	orr.w	r1, r1, #3
 800077a:	6119      	str	r1, [r3, #16]
		{a = (RCC->CFGR >> 3) & 0b11; if(a == 3){break;}}  // wait till SWS == 0b11000 (PLL1 == input)
 800077c:	6913      	ldr	r3, [r2, #16]
 800077e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8000782:	9303      	str	r3, [sp, #12]
 8000784:	9b03      	ldr	r3, [sp, #12]
 8000786:	2b03      	cmp	r3, #3
 8000788:	d1f8      	bne.n	800077c <board_oclk+0xa8>

		a = 0;
 800078a:	2300      	movs	r3, #0
 800078c:	9303      	str	r3, [sp, #12]
	}

}
 800078e:	b005      	add	sp, #20
 8000790:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000794:	4770      	bx	lr
			RCC->CR |= 0b1 << 16;
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800079c:	601a      	str	r2, [r3, #0]
			while(1){a = (RCC->CR >> 17) & 0b1; if(a == 0b1){break;}}
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	f3c2 4240 	ubfx	r2, r2, #17, #1
 80007a4:	9203      	str	r2, [sp, #12]
 80007a6:	9a03      	ldr	r2, [sp, #12]
 80007a8:	2a01      	cmp	r2, #1
 80007aa:	d1f8      	bne.n	800079e <board_oclk+0xca>
			RCC->PLLCKSELR &= ~((0b1 << 9) | (0b1 << 17) | (0b1 << 25));    // PRE 32 -> 0 for DIVM 1,2,3
 80007ac:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
		    RCC->PLLCFGR |= (0b10 << 2) | //PLL input frq range = 4 - 8 MHz
 80007ae:	f640 0288 	movw	r2, #2184	@ 0x888
			RCC->PLLCKSELR &= ~((0b1 << 9) | (0b1 << 17) | (0b1 << 25));    // PRE 32 -> 0 for DIVM 1,2,3
 80007b2:	4825      	ldr	r0, [pc, #148]	@ (8000848 <board_oclk+0x174>)
			RCC->PLLCKSELR |= (0b101 << 4) | (0b101 << 12) | (0b101 << 20) | 0b10; // PRE = 5 for DIVM 1,2,3  HSE sel as PLL input
 80007b4:	492a      	ldr	r1, [pc, #168]	@ (8000860 <board_oclk+0x18c>)
			RCC->PLLCKSELR &= ~((0b1 << 9) | (0b1 << 17) | (0b1 << 25));    // PRE 32 -> 0 for DIVM 1,2,3
 80007b6:	4020      	ands	r0, r4
		    RCC->PLL2DIVR |= ((0b10111111)   | //DIVN = 60  -> 960MHz
 80007b8:	4c2a      	ldr	r4, [pc, #168]	@ (8000864 <board_oclk+0x190>)
			RCC->PLLCKSELR &= ~((0b1 << 9) | (0b1 << 17) | (0b1 << 25));    // PRE 32 -> 0 for DIVM 1,2,3
 80007ba:	6298      	str	r0, [r3, #40]	@ 0x28
			RCC->PLLCKSELR |= (0b101 << 4) | (0b101 << 12) | (0b101 << 20) | 0b10; // PRE = 5 for DIVM 1,2,3  HSE sel as PLL input
 80007bc:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80007be:	4301      	orrs	r1, r0
		    RCC->PLL1DIVR &= (0b1 << 31) | (0b1 << 23);  // all 0 without changing res Bits 31;23
 80007c0:	4824      	ldr	r0, [pc, #144]	@ (8000854 <board_oclk+0x180>)
			RCC->PLLCKSELR |= (0b101 << 4) | (0b101 << 12) | (0b101 << 20) | 0b10; // PRE = 5 for DIVM 1,2,3  HSE sel as PLL input
 80007c2:	6299      	str	r1, [r3, #40]	@ 0x28
		    RCC->PLLCFGR |= (0b10 << 2) | //PLL input frq range = 4 - 8 MHz
 80007c4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80007c6:	430a      	orrs	r2, r1
		    RCC->PLL1DIVR |= ((0b10111111)   | //DIVN = 54  -> 880MHz
 80007c8:	4927      	ldr	r1, [pc, #156]	@ (8000868 <board_oclk+0x194>)
		    RCC->PLLCFGR |= (0b10 << 2) | //PLL input frq range = 4 - 8 MHz
 80007ca:	62da      	str	r2, [r3, #44]	@ 0x2c
		    RCC->PLL1DIVR &= (0b1 << 31) | (0b1 << 23);  // all 0 without changing res Bits 31;23
 80007cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80007ce:	4002      	ands	r2, r0
 80007d0:	631a      	str	r2, [r3, #48]	@ 0x30
		    RCC->PLL1DIVR |= ((0b10111111)   | //DIVN = 54  -> 880MHz
 80007d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80007d4:	4311      	orrs	r1, r2
		    {a = (RCC->CR >> 25) & 0b1; if(a == 1){break;}}
 80007d6:	4a1b      	ldr	r2, [pc, #108]	@ (8000844 <board_oclk+0x170>)
		    RCC->PLL1DIVR |= ((0b10111111)   | //DIVN = 54  -> 880MHz
 80007d8:	6319      	str	r1, [r3, #48]	@ 0x30
		    RCC->PLL2DIVR &= (0b1 << 31) | (0b1 << 23);  // all 0 without changing res Bits 31;23
 80007da:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80007dc:	4001      	ands	r1, r0
 80007de:	6399      	str	r1, [r3, #56]	@ 0x38
		    RCC->PLL2DIVR |= ((0b10111111)   | //DIVN = 60  -> 960MHz
 80007e0:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80007e2:	4321      	orrs	r1, r4
 80007e4:	6399      	str	r1, [r3, #56]	@ 0x38
			RCC->PLL3DIVR &= (0b1 << 31) | (0b1 << 23);  // all 0 without changing res Bits 31;23
 80007e6:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80007e8:	4001      	ands	r1, r0
 80007ea:	6419      	str	r1, [r3, #64]	@ 0x40
		    RCC->PLL3DIVR |= ((0b10111111)   | //DIVN = 60  -> 960MHz
 80007ec:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80007ee:	4321      	orrs	r1, r4
 80007f0:	6419      	str	r1, [r3, #64]	@ 0x40
		    RCC->CR |= (0b1 << 24);         // turn PLL1ON
 80007f2:	6819      	ldr	r1, [r3, #0]
 80007f4:	f041 7180 	orr.w	r1, r1, #16777216	@ 0x1000000
 80007f8:	6019      	str	r1, [r3, #0]
		    {a = (RCC->CR >> 25) & 0b1; if(a == 1){break;}}
 80007fa:	6813      	ldr	r3, [r2, #0]
 80007fc:	f3c3 6340 	ubfx	r3, r3, #25, #1
 8000800:	9303      	str	r3, [sp, #12]
 8000802:	9b03      	ldr	r3, [sp, #12]
 8000804:	2b01      	cmp	r3, #1
 8000806:	d1f8      	bne.n	80007fa <board_oclk+0x126>
		    RCC->D1CFGR = (RCC->D1CFGR & ~(0b1 << 11)) | 0b1001000; // HPRE /2 & D1PPRE /2
 8000808:	6990      	ldr	r0, [r2, #24]
 800080a:	f6a3 034a 	subw	r3, r3, #2122	@ 0x84a
		    {a = (RCC->CFGR >> 3) & 0b11; if(a == 3){break;}}  // wait till SWS == 0b11000 (PLL1 == input)
 800080e:	490d      	ldr	r1, [pc, #52]	@ (8000844 <board_oclk+0x170>)
		    RCC->D1CFGR = (RCC->D1CFGR & ~(0b1 << 11)) | 0b1001000; // HPRE /2 & D1PPRE /2
 8000810:	4003      	ands	r3, r0
 8000812:	f043 0348 	orr.w	r3, r3, #72	@ 0x48
 8000816:	6193      	str	r3, [r2, #24]
		    RCC->D2CFGR |= (0b10001 << 6); // D2PPRE & D2PPRE2 /2
 8000818:	69d3      	ldr	r3, [r2, #28]
 800081a:	f443 6388 	orr.w	r3, r3, #1088	@ 0x440
 800081e:	61d3      	str	r3, [r2, #28]
		    RCC->D3CFGR |= (0b1 << 6); // D3PPRE /2
 8000820:	6a13      	ldr	r3, [r2, #32]
 8000822:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000826:	6213      	str	r3, [r2, #32]
		    RCC->CFGR |= 0b11;  // set PLL1p as input frq for main clk
 8000828:	6913      	ldr	r3, [r2, #16]
 800082a:	f043 0303 	orr.w	r3, r3, #3
 800082e:	6113      	str	r3, [r2, #16]
		    {a = (RCC->CFGR >> 3) & 0b11; if(a == 3){break;}}  // wait till SWS == 0b11000 (PLL1 == input)
 8000830:	690b      	ldr	r3, [r1, #16]
 8000832:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8000836:	9303      	str	r3, [sp, #12]
 8000838:	9b03      	ldr	r3, [sp, #12]
 800083a:	2b03      	cmp	r3, #3
 800083c:	d1f8      	bne.n	8000830 <board_oclk+0x15c>
 800083e:	e7a4      	b.n	800078a <board_oclk+0xb6>
 8000840:	52002000 	.word	0x52002000
 8000844:	58024400 	.word	0x58024400
 8000848:	fdfdfdff 	.word	0xfdfdfdff
 800084c:	00404040 	.word	0x00404040
 8000850:	0303063b 	.word	0x0303063b
 8000854:	80800000 	.word	0x80800000
 8000858:	03030236 	.word	0x03030236
 800085c:	fffff7b7 	.word	0xfffff7b7
 8000860:	00505052 	.word	0x00505052
 8000864:	030306bf 	.word	0x030306bf
 8000868:	030302bf 	.word	0x030302bf

0800086c <board_start>:
// DATA Pins |0|1|2|3|4|5|6|7|     || G9|D15|G14|E13|E14|E11|A8|G12
// Function Pins                        RD|WR|RS|CS|RST
//                                      A3|C0|C3|B1|C2

void board_start(void){
	RCC->AHB4ENR |= 0b11 << 3;	    //clk for Ports D,E act
 800086c:	4b1f      	ldr	r3, [pc, #124]	@ (80008ec <board_start+0x80>)
 // define pin type
	GPIOD->MODER &= 0x5555; // 0 - 7
 800086e:	4920      	ldr	r1, [pc, #128]	@ (80008f0 <board_start+0x84>)
	RCC->AHB4ENR |= 0b11 << 3;	    //clk for Ports D,E act
 8000870:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
	GPIOE->MODER &= (0x1550);    // 2 - 6
 8000874:	4a1f      	ldr	r2, [pc, #124]	@ (80008f4 <board_start+0x88>)
	RCC->AHB4ENR |= 0b11 << 3;	    //clk for Ports D,E act
 8000876:	f040 0018 	orr.w	r0, r0, #24
void board_start(void){
 800087a:	b410      	push	{r4}
	RCC->AHB4ENR |= 0b11 << 3;	    //clk for Ports D,E act
 800087c:	f8c3 00e0 	str.w	r0, [r3, #224]	@ 0xe0
	GPIOD->MODER &= 0x5555; // 0 - 7
 8000880:	f245 5455 	movw	r4, #21845	@ 0x5555
 8000884:	6808      	ldr	r0, [r1, #0]
 8000886:	4020      	ands	r0, r4
	GPIOE->MODER &= (0x1550);    // 2 - 6
 8000888:	f241 5450 	movw	r4, #5456	@ 0x1550
	GPIOD->MODER &= 0x5555; // 0 - 7
 800088c:	6008      	str	r0, [r1, #0]
	GPIOE->MODER &= (0x1550);    // 2 - 6
 800088e:	6810      	ldr	r0, [r2, #0]
 8000890:	4020      	ands	r0, r4

	//define pin rising/falling edges precision/time
	GPIOD->OSPEEDR |= 0xFFFF;
 8000892:	f64f 74ff 	movw	r4, #65535	@ 0xffff
	GPIOE->MODER &= (0x1550);    // 2 - 6
 8000896:	6010      	str	r0, [r2, #0]
	GPIOD->OSPEEDR |= 0xFFFF;
 8000898:	6888      	ldr	r0, [r1, #8]
 800089a:	4304      	orrs	r4, r0
	GPIOE->OSPEEDR |= 0x3FF0;
 800089c:	f643 70f0 	movw	r0, #16368	@ 0x3ff0
	GPIOD->OSPEEDR |= 0xFFFF;
 80008a0:	608c      	str	r4, [r1, #8]
	GPIOE->OSPEEDR |= 0x3FF0;
 80008a2:	6891      	ldr	r1, [r2, #8]
	RNG->CR |= RNG_CR_RNGEN;                  // RNG on



	SCB->CPACR |= ((0b11 << 20) | (0b11 << 22));  //activate FPU refere ARM Manual (ARM DUI 0646B ID082615) 4-56
}
 80008a4:	f85d 4b04 	ldr.w	r4, [sp], #4
	GPIOE->OSPEEDR |= 0x3FF0;
 80008a8:	4308      	orrs	r0, r1
	RNG->CR |= RNG_CR_RNGEN;                  // RNG on
 80008aa:	4913      	ldr	r1, [pc, #76]	@ (80008f8 <board_start+0x8c>)
	GPIOE->OSPEEDR |= 0x3FF0;
 80008ac:	6090      	str	r0, [r2, #8]
	RCC->APB1LENR |= RCC_APB1LENR_TIM2EN;     // Timer clk on
 80008ae:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80008b2:	f042 0201 	orr.w	r2, r2, #1
 80008b6:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
	RCC->APB1LENR |= RCC_APB1LENR_TIM3EN;
 80008ba:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80008be:	f042 0202 	orr.w	r2, r2, #2
 80008c2:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
	RCC->AHB2ENR |= RCC_AHB2ENR_RNGEN;        // bus clk for random number generator on
 80008c6:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 80008ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80008ce:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
	RNG->CR |= RNG_CR_RNGEN;                  // RNG on
 80008d2:	680b      	ldr	r3, [r1, #0]
	SCB->CPACR |= ((0b11 << 20) | (0b11 << 22));  //activate FPU refere ARM Manual (ARM DUI 0646B ID082615) 4-56
 80008d4:	4a09      	ldr	r2, [pc, #36]	@ (80008fc <board_start+0x90>)
	RNG->CR |= RNG_CR_RNGEN;                  // RNG on
 80008d6:	f043 0304 	orr.w	r3, r3, #4
 80008da:	600b      	str	r3, [r1, #0]
	SCB->CPACR |= ((0b11 << 20) | (0b11 << 22));  //activate FPU refere ARM Manual (ARM DUI 0646B ID082615) 4-56
 80008dc:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80008e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
}
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	58024400 	.word	0x58024400
 80008f0:	58020c00 	.word	0x58020c00
 80008f4:	58021000 	.word	0x58021000
 80008f8:	48021800 	.word	0x48021800
 80008fc:	e000ed00 	.word	0xe000ed00

08000900 <DWT_Init>:




void DWT_Init(void){
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // activate trace and debug
 8000900:	4907      	ldr	r1, [pc, #28]	@ (8000920 <DWT_Init+0x20>)
    DWT->CYCCNT = 0;                                // clk cycle cnt = 0
 8000902:	2000      	movs	r0, #0
 8000904:	4b07      	ldr	r3, [pc, #28]	@ (8000924 <DWT_Init+0x24>)
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // activate trace and debug
 8000906:	f8d1 20fc 	ldr.w	r2, [r1, #252]	@ 0xfc
 800090a:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800090e:	f8c1 20fc 	str.w	r2, [r1, #252]	@ 0xfc
    DWT->CYCCNT = 0;                                // clk cycle cnt = 0
 8000912:	6058      	str	r0, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;            // act DWT
 8000914:	681a      	ldr	r2, [r3, #0]
 8000916:	f042 0201 	orr.w	r2, r2, #1
 800091a:	601a      	str	r2, [r3, #0]
}
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	e000ed00 	.word	0xe000ed00
 8000924:	e0001000 	.word	0xe0001000

08000928 <delay>:





void delay(volatile unsigned int ___1){                //Timer for ms
 8000928:	b410      	push	{r4}
	 RCC->APB1LENR |= RCC_APB1LENR_TIM2EN;             // en clk for TIM
 800092a:	4c13      	ldr	r4, [pc, #76]	@ (8000978 <delay+0x50>)
void delay(volatile unsigned int ___1){                //Timer for ms
 800092c:	b083      	sub	sp, #12
	 TIM2->DIER = TIM_DIER_UIE;                        //Update-Interrupt on
 800092e:	2101      	movs	r1, #1
 8000930:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
void delay(volatile unsigned int ___1){                //Timer for ms
 8000934:	9001      	str	r0, [sp, #4]
	 TIM2->CNT = 0;
 8000936:	2000      	movs	r0, #0
	 RCC->APB1LENR |= RCC_APB1LENR_TIM2EN;             // en clk for TIM
 8000938:	f8d4 20e8 	ldr.w	r2, [r4, #232]	@ 0xe8
 800093c:	430a      	orrs	r2, r1
 800093e:	f8c4 20e8 	str.w	r2, [r4, #232]	@ 0xe8
	 TIM2->PSC = 240000 - 1;                           // devides counting clock (~4,3MHz max) 0 means AHB clk
 8000942:	4a0e      	ldr	r2, [pc, #56]	@ (800097c <delay+0x54>)
	 TIM2->DIER = TIM_DIER_UIE;                        //Update-Interrupt on
 8000944:	60d9      	str	r1, [r3, #12]
	 TIM2->CNT = 0;
 8000946:	6258      	str	r0, [r3, #36]	@ 0x24
	 TIM2->PSC = 240000 - 1;                           // devides counting clock (~4,3MHz max) 0 means AHB clk
 8000948:	629a      	str	r2, [r3, #40]	@ 0x28
	 TIM2->ARR = ___1;                                 // define how long is counted
 800094a:	9c01      	ldr	r4, [sp, #4]
	 tim2Intrpt_g = 0;                                 // reset for "infinite" sleep loop
 800094c:	4a0c      	ldr	r2, [pc, #48]	@ (8000980 <delay+0x58>)
	 TIM2->ARR = ___1;                                 // define how long is counted
 800094e:	62dc      	str	r4, [r3, #44]	@ 0x2c
	 tim2Intrpt_g = 0;                                 // reset for "infinite" sleep loop
 8000950:	7010      	strb	r0, [r2, #0]
	 TIM2->CR1 = TIM_CR1_CEN;                          // Timer start
 8000952:	6019      	str	r1, [r3, #0]
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000954:	4b0b      	ldr	r3, [pc, #44]	@ (8000984 <delay+0x5c>)
 8000956:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 800095a:	6019      	str	r1, [r3, #0]

	 NVIC_EnableIRQ(TIM2_IRQn);                        // en Interrupt Handler

	 do {
		 __WFI();                                      // wait for interrupt -> sleep mode
 800095c:	bf30      	wfi
	 } while (!tim2Intrpt_g);
 800095e:	7813      	ldrb	r3, [r2, #0]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d0fb      	beq.n	800095c <delay+0x34>

	 TIM2->CR1 &= ~TIM_CR1_CEN;                        //Timer off
 8000964:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000968:	6813      	ldr	r3, [r2, #0]
 800096a:	f023 0301 	bic.w	r3, r3, #1
 800096e:	6013      	str	r3, [r2, #0]
}
 8000970:	b003      	add	sp, #12
 8000972:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000976:	4770      	bx	lr
 8000978:	58024400 	.word	0x58024400
 800097c:	0003a97f 	.word	0x0003a97f
 8000980:	24000024 	.word	0x24000024
 8000984:	e000e100 	.word	0xe000e100

08000988 <TIM2_IRQHandler>:


void TIM2_IRQHandler(void){                            // Interrupt (Handler) makes cpu work here
	 tim2Intrpt_g = 1;                                 // stop sleep loop
	 TIM2->SR &= ~TIM_SR_UIF;                          // Update Interrupt Flag = 0 -> stops generating interrupts
 8000988:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
	 tim2Intrpt_g = 1;                                 // stop sleep loop
 800098c:	4b03      	ldr	r3, [pc, #12]	@ (800099c <TIM2_IRQHandler+0x14>)
 800098e:	2101      	movs	r1, #1
 8000990:	7019      	strb	r1, [r3, #0]
	 TIM2->SR &= ~TIM_SR_UIF;                          // Update Interrupt Flag = 0 -> stops generating interrupts
 8000992:	6913      	ldr	r3, [r2, #16]
 8000994:	f023 0301 	bic.w	r3, r3, #1
 8000998:	6113      	str	r3, [r2, #16]
}
 800099a:	4770      	bx	lr
 800099c:	24000024 	.word	0x24000024

080009a0 <delay_u>:



void delay_u(volatile int ___2){          //Timer for TFT output freq
 80009a0:	b410      	push	{r4}
	 RCC->APB1LENR |= RCC_APB1LENR_TIM3EN;
 80009a2:	4c13      	ldr	r4, [pc, #76]	@ (80009f0 <delay_u+0x50>)
void delay_u(volatile int ___2){          //Timer for TFT output freq
 80009a4:	b083      	sub	sp, #12
	 TIM3->DIER = TIM_DIER_UIE;                         //Update-Interrupt on
 80009a6:	4b13      	ldr	r3, [pc, #76]	@ (80009f4 <delay_u+0x54>)
 80009a8:	2101      	movs	r1, #1
void delay_u(volatile int ___2){          //Timer for TFT output freq
 80009aa:	9001      	str	r0, [sp, #4]
	 TIM3->CNT = 0;
 80009ac:	2000      	movs	r0, #0
	 RCC->APB1LENR |= RCC_APB1LENR_TIM3EN;
 80009ae:	f8d4 20e8 	ldr.w	r2, [r4, #232]	@ 0xe8
 80009b2:	f042 0202 	orr.w	r2, r2, #2
 80009b6:	f8c4 20e8 	str.w	r2, [r4, #232]	@ 0xe8
	 TIM3->PSC = 57 - 1;
 80009ba:	2238      	movs	r2, #56	@ 0x38
	 TIM3->DIER = TIM_DIER_UIE;                         //Update-Interrupt on
 80009bc:	60d9      	str	r1, [r3, #12]
	 TIM3->CNT = 0;
 80009be:	6258      	str	r0, [r3, #36]	@ 0x24
	 TIM3->PSC = 57 - 1;
 80009c0:	629a      	str	r2, [r3, #40]	@ 0x28
	 TIM3->ARR = ___2;                                  //1 = 231,82ns
 80009c2:	9c01      	ldr	r4, [sp, #4]
	 tim3Intrpt_g = 0;
 80009c4:	4a0c      	ldr	r2, [pc, #48]	@ (80009f8 <delay_u+0x58>)
	 TIM3->ARR = ___2;                                  //1 = 231,82ns
 80009c6:	62dc      	str	r4, [r3, #44]	@ 0x2c
	 tim3Intrpt_g = 0;
 80009c8:	7010      	strb	r0, [r2, #0]
	 TIM3->CR1 = TIM_CR1_CEN;                          //Timer start
 80009ca:	6019      	str	r1, [r3, #0]
 80009cc:	4b0b      	ldr	r3, [pc, #44]	@ (80009fc <delay_u+0x5c>)
 80009ce:	f04f 5100 	mov.w	r1, #536870912	@ 0x20000000
 80009d2:	6019      	str	r1, [r3, #0]

	 NVIC_EnableIRQ(TIM3_IRQn);

 do {
	 __WFI();
 80009d4:	bf30      	wfi
 } while (!tim3Intrpt_g);
 80009d6:	7813      	ldrb	r3, [r2, #0]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d0fb      	beq.n	80009d4 <delay_u+0x34>

 	 TIM3->CR1 &= ~TIM_CR1_CEN;                        //Timer aus
 80009dc:	4a05      	ldr	r2, [pc, #20]	@ (80009f4 <delay_u+0x54>)
 80009de:	6813      	ldr	r3, [r2, #0]
 80009e0:	f023 0301 	bic.w	r3, r3, #1
 80009e4:	6013      	str	r3, [r2, #0]
}
 80009e6:	b003      	add	sp, #12
 80009e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	58024400 	.word	0x58024400
 80009f4:	40000400 	.word	0x40000400
 80009f8:	24000023 	.word	0x24000023
 80009fc:	e000e100 	.word	0xe000e100

08000a00 <TIM3_IRQHandler>:


void TIM3_IRQHandler(void){
	 tim3Intrpt_g = 1;
	 TIM3->SR &= ~TIM_SR_UIF;
 8000a00:	4a04      	ldr	r2, [pc, #16]	@ (8000a14 <TIM3_IRQHandler+0x14>)
	 tim3Intrpt_g = 1;
 8000a02:	2101      	movs	r1, #1
 8000a04:	4b04      	ldr	r3, [pc, #16]	@ (8000a18 <TIM3_IRQHandler+0x18>)
 8000a06:	7019      	strb	r1, [r3, #0]
	 TIM3->SR &= ~TIM_SR_UIF;
 8000a08:	6913      	ldr	r3, [r2, #16]
 8000a0a:	f023 0301 	bic.w	r3, r3, #1
 8000a0e:	6113      	str	r3, [r2, #16]
}
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	40000400 	.word	0x40000400
 8000a18:	24000023 	.word	0x24000023

08000a1c <RandomNG>:



int32_t RandomNG(void){
	//new random value after 216 periods of AHB clk if the output FIFO is empty RM p. 1412
	RNG->CR |= (0b1 << 2); //| (0b1 << 5) | ;        // en RNG intrpt funct ________________________________________________act once at start?
 8000a1c:	4b20      	ldr	r3, [pc, #128]	@ (8000aa0 <RandomNG+0x84>)
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	f042 0204 	orr.w	r2, r2, #4
 8000a24:	601a      	str	r2, [r3, #0]

	 NVIC_DisableIRQ(RNG_IRQn);*/
	//    if ((RNG->SR & RNG_SR_DRDY) != 0b0){  // if value is valid
	  //       rval = RNG->DR;                  // read value resets DRDY Flag
	   // }
	    if(((RNG->SR >> 6) & 0b1) == 1){   // invalid data detected
 8000a26:	685a      	ldr	r2, [r3, #4]
 8000a28:	0651      	lsls	r1, r2, #25
 8000a2a:	d504      	bpl.n	8000a36 <RandomNG+0x1a>
	    	SECS = ((RNG->SR >> 2) & 0b1);
 8000a2c:	685b      	ldr	r3, [r3, #4]
 8000a2e:	4a1d      	ldr	r2, [pc, #116]	@ (8000aa4 <RandomNG+0x88>)
 8000a30:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000a34:	7013      	strb	r3, [r2, #0]
	    }
	    if(((RNG->SR >> 5) & 0b1) == 1){   // invalid clk detected
 8000a36:	4b1a      	ldr	r3, [pc, #104]	@ (8000aa0 <RandomNG+0x84>)
 8000a38:	685a      	ldr	r2, [r3, #4]
 8000a3a:	0692      	lsls	r2, r2, #26
 8000a3c:	d504      	bpl.n	8000a48 <RandomNG+0x2c>
	    	CECS = ((RNG->SR >> 1) & 0b1);
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	4a19      	ldr	r2, [pc, #100]	@ (8000aa8 <RandomNG+0x8c>)
 8000a42:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000a46:	7013      	strb	r3, [r2, #0]
	    }

	    while((RNG->SR & 0b1) == 0){
 8000a48:	4b15      	ldr	r3, [pc, #84]	@ (8000aa0 <RandomNG+0x84>)
 8000a4a:	e005      	b.n	8000a58 <RandomNG+0x3c>
		    if(((RNG->SR >> 6) & 0b1) == 1){   // invalid data detected
 8000a4c:	685a      	ldr	r2, [r3, #4]
 8000a4e:	0650      	lsls	r0, r2, #25
 8000a50:	d416      	bmi.n	8000a80 <RandomNG+0x64>
		    	SECS = ((RNG->SR >> 2) & 0b1);
		    	return 0;
		    }
		    if(((RNG->SR >> 5) & 0b1) == 1){   // invalid clk detected
 8000a52:	685a      	ldr	r2, [r3, #4]
 8000a54:	0691      	lsls	r1, r2, #26
 8000a56:	d41a      	bmi.n	8000a8e <RandomNG+0x72>
	    while((RNG->SR & 0b1) == 0){
 8000a58:	685a      	ldr	r2, [r3, #4]
 8000a5a:	07d2      	lsls	r2, r2, #31
 8000a5c:	d5f6      	bpl.n	8000a4c <RandomNG+0x30>
		    	return 0;
		    }

	    }

	    rval = RNG->DR;                  // read value resets DRDY Flag
 8000a5e:	6899      	ldr	r1, [r3, #8]

	 if((SECS == 0b0) && (CECS == 0b0) && (rval != 0)){
 8000a60:	4a10      	ldr	r2, [pc, #64]	@ (8000aa4 <RandomNG+0x88>)
	    rval = RNG->DR;                  // read value resets DRDY Flag
 8000a62:	4b12      	ldr	r3, [pc, #72]	@ (8000aac <RandomNG+0x90>)
 8000a64:	6019      	str	r1, [r3, #0]
	 if((SECS == 0b0) && (CECS == 0b0) && (rval != 0)){
 8000a66:	7812      	ldrb	r2, [r2, #0]
 8000a68:	b922      	cbnz	r2, 8000a74 <RandomNG+0x58>
 8000a6a:	4a0f      	ldr	r2, [pc, #60]	@ (8000aa8 <RandomNG+0x8c>)
 8000a6c:	7812      	ldrb	r2, [r2, #0]
 8000a6e:	b90a      	cbnz	r2, 8000a74 <RandomNG+0x58>
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	b99a      	cbnz	r2, 8000a9c <RandomNG+0x80>
		 return rval;

	 }else{
		 RNG->CR &= ~RNG_CR_RNGEN;
 8000a74:	4a0a      	ldr	r2, [pc, #40]	@ (8000aa0 <RandomNG+0x84>)
 8000a76:	6813      	ldr	r3, [r2, #0]
 8000a78:	f023 0304 	bic.w	r3, r3, #4
 8000a7c:	6013      	str	r3, [r2, #0]
	 }
}
 8000a7e:	4770      	bx	lr
		    	SECS = ((RNG->SR >> 2) & 0b1);
 8000a80:	685b      	ldr	r3, [r3, #4]
		    	return 0;
 8000a82:	2000      	movs	r0, #0
		    	SECS = ((RNG->SR >> 2) & 0b1);
 8000a84:	4a07      	ldr	r2, [pc, #28]	@ (8000aa4 <RandomNG+0x88>)
 8000a86:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000a8a:	7013      	strb	r3, [r2, #0]
}
 8000a8c:	4770      	bx	lr
		    	CECS = ((RNG->SR >> 1) & 0b1);
 8000a8e:	685b      	ldr	r3, [r3, #4]
		    	return 0;
 8000a90:	2000      	movs	r0, #0
		    	CECS = ((RNG->SR >> 1) & 0b1);
 8000a92:	4a05      	ldr	r2, [pc, #20]	@ (8000aa8 <RandomNG+0x8c>)
 8000a94:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000a98:	7013      	strb	r3, [r2, #0]
}
 8000a9a:	4770      	bx	lr
		 return rval;
 8000a9c:	6818      	ldr	r0, [r3, #0]
 8000a9e:	4770      	bx	lr
 8000aa0:	48021800 	.word	0x48021800
 8000aa4:	24000021 	.word	0x24000021
 8000aa8:	24000020 	.word	0x24000020
 8000aac:	2400001c 	.word	0x2400001c

08000ab0 <HASH_RNG_IRQHandler>:



void RNG_IRQHandler(void){
	   rngIntrpt_g = 1;                // stop WFI loop
	   rval = RNG->DR;                  // read value resets DRDY Flag
 8000ab0:	4b05      	ldr	r3, [pc, #20]	@ (8000ac8 <HASH_RNG_IRQHandler+0x18>)
	   rngIntrpt_g = 1;                // stop WFI loop
 8000ab2:	2001      	movs	r0, #1
 8000ab4:	4905      	ldr	r1, [pc, #20]	@ (8000acc <HASH_RNG_IRQHandler+0x1c>)
	   rval = RNG->DR;                  // read value resets DRDY Flag
 8000ab6:	4a06      	ldr	r2, [pc, #24]	@ (8000ad0 <HASH_RNG_IRQHandler+0x20>)
	   rngIntrpt_g = 1;                // stop WFI loop
 8000ab8:	7008      	strb	r0, [r1, #0]
	   rval = RNG->DR;                  // read value resets DRDY Flag
 8000aba:	6899      	ldr	r1, [r3, #8]
 8000abc:	6011      	str	r1, [r2, #0]
	   RNG->CR &= ~(0b11 << 2);      // turn off RNG only option to reset RNG itrp Flags
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	f022 020c 	bic.w	r2, r2, #12
 8000ac4:	601a      	str	r2, [r3, #0]
}
 8000ac6:	4770      	bx	lr
 8000ac8:	48021800 	.word	0x48021800
 8000acc:	24000022 	.word	0x24000022
 8000ad0:	2400001c 	.word	0x2400001c

08000ad4 <main>:





int main() {
 8000ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    DWT_Init();
 8000ad8:	f7ff ff12 	bl	8000900 <DWT_Init>
			Line(305,150,239,YELLOW);
			delay(10);
			scr_area(0,320,0);
	//int a;

			for(int i = 0;i < LCD_with + 1; i++){
 8000adc:	2400      	movs	r4, #0
    board_voltage();
 8000ade:	f7ff fdd1 	bl	8000684 <board_voltage>
	board_oclk(1);
 8000ae2:	2001      	movs	r0, #1
 8000ae4:	f7ff fdf6 	bl	80006d4 <board_oclk>
				LCD_Scroll(i + 1);
				delay_u(3000);
				Line(i,0,240,MNIGHTBLUE);//}
 8000ae8:	f8df 90ec 	ldr.w	r9, [pc, #236]	@ 8000bd8 <main+0x104>
	board_start();
 8000aec:	f7ff febe 	bl	800086c <board_start>
				Line(i,0,240,MNIGHTBLUE);//}
 8000af0:	f8df 80e8 	ldr.w	r8, [pc, #232]	@ 8000bdc <main+0x108>
    LCD_Init();
 8000af4:	f7ff fd76 	bl	80005e4 <LCD_Init>
    delay(1000);
 8000af8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000afc:	f7ff ff14 	bl	8000928 <delay>
			Line(320,0,90, MAGENTA);//}
 8000b00:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8000b04:	225a      	movs	r2, #90	@ 0x5a
 8000b06:	2100      	movs	r1, #0
 8000b08:	f44f 70a0 	mov.w	r0, #320	@ 0x140
	uint8_t vall = (val % (LCD_hight - tubespace + 1));   // shrink val to LCD writeable space  vall % 190 ->  (2^32 - 1) - {[(2^32 - 1) / 190] - residual of} * 190 - 50  = (0,...,239)
 8000b0c:	f8df a0d0 	ldr.w	sl, [pc, #208]	@ 8000be0 <main+0x10c>
			Line(320,0,90, MAGENTA);//}
 8000b10:	f7ff fca2 	bl	8000458 <Line>
			Line(320,150,240, GREEN);//}
 8000b14:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000b18:	22f0      	movs	r2, #240	@ 0xf0
 8000b1a:	2196      	movs	r1, #150	@ 0x96
 8000b1c:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 8000b20:	f7ff fc9a 	bl	8000458 <Line>
			Line(305,0,90,BLUE);
 8000b24:	f64f 2320 	movw	r3, #64032	@ 0xfa20
 8000b28:	225a      	movs	r2, #90	@ 0x5a
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	f240 1031 	movw	r0, #305	@ 0x131
 8000b30:	f7ff fc92 	bl	8000458 <Line>
			Line(305,150,239,YELLOW);
 8000b34:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000b38:	22ef      	movs	r2, #239	@ 0xef
 8000b3a:	2196      	movs	r1, #150	@ 0x96
 8000b3c:	f240 1031 	movw	r0, #305	@ 0x131
 8000b40:	f7ff fc8a 	bl	8000458 <Line>
			delay(10);
 8000b44:	200a      	movs	r0, #10
 8000b46:	f7ff feef 	bl	8000928 <delay>
			scr_area(0,320,0);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8000b50:	4610      	mov	r0, r2
 8000b52:	f7ff fbc1 	bl	80002d8 <scr_area>
			for(int i = 0;i < LCD_with + 1; i++){
 8000b56:	e006      	b.n	8000b66 <main+0x92>
					Line(i,gappos.gaphigh,239, 204 * i);//
				}

			//	RNG p. 1405 RM_________________________________________________________________________________

				if(i == 319){i = 0;}
 8000b58:	f240 133f 	movw	r3, #319	@ 0x13f
 8000b5c:	429c      	cmp	r4, r3
			for(int i = 0;i < LCD_with + 1; i++){
 8000b5e:	f104 0401 	add.w	r4, r4, #1
 8000b62:	bf08      	it	eq
 8000b64:	2401      	moveq	r4, #1
				LCD_Scroll(i + 1);
 8000b66:	b2a5      	uxth	r5, r4
 8000b68:	1c68      	adds	r0, r5, #1
 8000b6a:	b280      	uxth	r0, r0
 8000b6c:	f7ff fbee 	bl	800034c <LCD_Scroll>
				delay_u(3000);
 8000b70:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000b74:	f7ff ff14 	bl	80009a0 <delay_u>
				Line(i,0,240,MNIGHTBLUE);//}
 8000b78:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000b7c:	22f0      	movs	r2, #240	@ 0xf0
 8000b7e:	2100      	movs	r1, #0
 8000b80:	4628      	mov	r0, r5
 8000b82:	f7ff fc69 	bl	8000458 <Line>
				if((i % 40 == 0) && (i < 320)){
 8000b86:	4b13      	ldr	r3, [pc, #76]	@ (8000bd4 <main+0x100>)
				Line(i,0,240,MNIGHTBLUE);//}
 8000b88:	fb09 8204 	mla	r2, r9, r4, r8
				if((i % 40 == 0) && (i < 320)){
 8000b8c:	ebb3 0ff2 	cmp.w	r3, r2, ror #3
 8000b90:	d3e2      	bcc.n	8000b58 <main+0x84>
	uint32_t val = RandomNG();            //                                                                ____________________________________
 8000b92:	f7ff ff43 	bl	8000a1c <RandomNG>
 8000b96:	4602      	mov	r2, r0
					Line(i,0,gappos.gaplow, 204 * i);//
 8000b98:	eb05 0745 	add.w	r7, r5, r5, lsl #1
	uint8_t vall = (val % (LCD_hight - tubespace + 1));   // shrink val to LCD writeable space  vall % 190 ->  (2^32 - 1) - {[(2^32 - 1) / 190] - residual of} * 190 - 50  = (0,...,239)
 8000b9c:	f04f 0cbe 	mov.w	ip, #190	@ 0xbe
 8000ba0:	0856      	lsrs	r6, r2, #1
					Line(i,0,gappos.gaplow, 204 * i);//
 8000ba2:	4628      	mov	r0, r5
 8000ba4:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 8000ba8:	2100      	movs	r1, #0
	uint8_t vall = (val % (LCD_hight - tubespace + 1));   // shrink val to LCD writeable space  vall % 190 ->  (2^32 - 1) - {[(2^32 - 1) / 190] - residual of} * 190 - 50  = (0,...,239)
 8000baa:	fbaa 3606 	umull	r3, r6, sl, r6
					Line(i,0,gappos.gaplow, 204 * i);//
 8000bae:	00bf      	lsls	r7, r7, #2
	uint8_t vall = (val % (LCD_hight - tubespace + 1));   // shrink val to LCD writeable space  vall % 190 ->  (2^32 - 1) - {[(2^32 - 1) / 190] - residual of} * 190 - 50  = (0,...,239)
 8000bb0:	09b6      	lsrs	r6, r6, #6
					Line(i,0,gappos.gaplow, 204 * i);//
 8000bb2:	b2bf      	uxth	r7, r7
	uint8_t vall = (val % (LCD_hight - tubespace + 1));   // shrink val to LCD writeable space  vall % 190 ->  (2^32 - 1) - {[(2^32 - 1) / 190] - residual of} * 190 - 50  = (0,...,239)
 8000bb4:	fb0c 2616 	mls	r6, ip, r6, r2
					Line(i,0,gappos.gaplow, 204 * i);//
 8000bb8:	463b      	mov	r3, r7
 8000bba:	b2b2      	uxth	r2, r6
 8000bbc:	f7ff fc4c 	bl	8000458 <Line>
	uint8_t valh = vall + tubespace;
 8000bc0:	f106 0132 	add.w	r1, r6, #50	@ 0x32
					Line(i,gappos.gaphigh,239, 204 * i);//
 8000bc4:	463b      	mov	r3, r7
 8000bc6:	22ef      	movs	r2, #239	@ 0xef
 8000bc8:	b2c9      	uxtb	r1, r1
 8000bca:	4628      	mov	r0, r5
 8000bcc:	f7ff fc44 	bl	8000458 <Line>
 8000bd0:	e7c2      	b.n	8000b58 <main+0x84>
 8000bd2:	bf00      	nop
 8000bd4:	06666666 	.word	0x06666666
 8000bd8:	cccccccd 	.word	0xcccccccd
 8000bdc:	19999998 	.word	0x19999998
 8000be0:	ac769185 	.word	0xac769185

08000be4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
   ldr   r0, =_estack
 8000be4:	480d      	ldr	r0, [pc, #52]	@ (8000c1c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000be6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000be8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bec:	480c      	ldr	r0, [pc, #48]	@ (8000c20 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bee:	490d      	ldr	r1, [pc, #52]	@ (8000c24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bf0:	4a0d      	ldr	r2, [pc, #52]	@ (8000c28 <LoopForever+0xe>)
  movs r3, #0
 8000bf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bf4:	e002      	b.n	8000bfc <LoopCopyDataInit>

08000bf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bfa:	3304      	adds	r3, #4

08000bfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c00:	d3f9      	bcc.n	8000bf6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c02:	4a0a      	ldr	r2, [pc, #40]	@ (8000c2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c04:	4c0a      	ldr	r4, [pc, #40]	@ (8000c30 <LoopForever+0x16>)
  movs r3, #0
 8000c06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c08:	e001      	b.n	8000c0e <LoopFillZerobss>

08000c0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c0c:	3204      	adds	r2, #4

08000c0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c10:	d3fb      	bcc.n	8000c0a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c12:	f000 f811 	bl	8000c38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c16:	f7ff ff5d 	bl	8000ad4 <main>

08000c1a <LoopForever>:

LoopForever:
  b LoopForever
 8000c1a:	e7fe      	b.n	8000c1a <LoopForever>
   ldr   r0, =_estack
 8000c1c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000c20:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000c24:	24000000 	.word	0x24000000
  ldr r2, =_sidata
 8000c28:	08000ca0 	.word	0x08000ca0
  ldr r2, =_sbss
 8000c2c:	24000000 	.word	0x24000000
  ldr r4, =_ebss
 8000c30:	24000028 	.word	0x24000028

08000c34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c34:	e7fe      	b.n	8000c34 <ADC1_2_IRQHandler>
	...

08000c38 <__libc_init_array>:
 8000c38:	b570      	push	{r4, r5, r6, lr}
 8000c3a:	4d0d      	ldr	r5, [pc, #52]	@ (8000c70 <__libc_init_array+0x38>)
 8000c3c:	4c0d      	ldr	r4, [pc, #52]	@ (8000c74 <__libc_init_array+0x3c>)
 8000c3e:	1b64      	subs	r4, r4, r5
 8000c40:	10a4      	asrs	r4, r4, #2
 8000c42:	2600      	movs	r6, #0
 8000c44:	42a6      	cmp	r6, r4
 8000c46:	d109      	bne.n	8000c5c <__libc_init_array+0x24>
 8000c48:	4d0b      	ldr	r5, [pc, #44]	@ (8000c78 <__libc_init_array+0x40>)
 8000c4a:	4c0c      	ldr	r4, [pc, #48]	@ (8000c7c <__libc_init_array+0x44>)
 8000c4c:	f000 f818 	bl	8000c80 <_init>
 8000c50:	1b64      	subs	r4, r4, r5
 8000c52:	10a4      	asrs	r4, r4, #2
 8000c54:	2600      	movs	r6, #0
 8000c56:	42a6      	cmp	r6, r4
 8000c58:	d105      	bne.n	8000c66 <__libc_init_array+0x2e>
 8000c5a:	bd70      	pop	{r4, r5, r6, pc}
 8000c5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c60:	4798      	blx	r3
 8000c62:	3601      	adds	r6, #1
 8000c64:	e7ee      	b.n	8000c44 <__libc_init_array+0xc>
 8000c66:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c6a:	4798      	blx	r3
 8000c6c:	3601      	adds	r6, #1
 8000c6e:	e7f2      	b.n	8000c56 <__libc_init_array+0x1e>
 8000c70:	08000c98 	.word	0x08000c98
 8000c74:	08000c98 	.word	0x08000c98
 8000c78:	08000c98 	.word	0x08000c98
 8000c7c:	08000c9c 	.word	0x08000c9c

08000c80 <_init>:
 8000c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c82:	bf00      	nop
 8000c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c86:	bc08      	pop	{r3}
 8000c88:	469e      	mov	lr, r3
 8000c8a:	4770      	bx	lr

08000c8c <_fini>:
 8000c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c8e:	bf00      	nop
 8000c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c92:	bc08      	pop	{r3}
 8000c94:	469e      	mov	lr, r3
 8000c96:	4770      	bx	lr
